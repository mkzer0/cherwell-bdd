/* 
 * Cherwell Rest API
 *
 * <a href=\"../../index.html\">Cherwell Rest API Documentation</a><br>Select version options from the header drop-down list (to the left of the Client Key box). Then, click Explore to view different versions of operations.
 *
 * OpenAPI spec version: 9.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISecurityApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add users to a team by batch
        /// </summary>
        /// <remarks>
        /// Operation to add users to a Team by batch. To get internal IDs for users, use “Get User Information in a Batch.” To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object to specify a list of add user to team request objects.</param>
        /// <returns>AddUserToTeamByBatchResponse</returns>
        AddUserToTeamByBatchResponse SecurityAddUserToTeamByBatchV1 (AddUserToTeamByBatchRequest request);

        /// <summary>
        /// Add users to a team by batch
        /// </summary>
        /// <remarks>
        /// Operation to add users to a Team by batch. To get internal IDs for users, use “Get User Information in a Batch.” To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object to specify a list of add user to team request objects.</param>
        /// <returns>ApiResponse of AddUserToTeamByBatchResponse</returns>
        ApiResponse<AddUserToTeamByBatchResponse> SecurityAddUserToTeamByBatchV1WithHttpInfo (AddUserToTeamByBatchRequest request);
        /// <summary>
        /// Add a user to a team
        /// </summary>
        /// <remarks>
        /// Operation to add a user to a Team. To get the user&#39;s internal ID, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public ID.\&quot; To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequest">Request object to specify user and team values.</param>
        /// <returns></returns>
        void SecurityAddUserToTeamV1 (AddUserToTeamRequest dataRequest);

        /// <summary>
        /// Add a user to a team
        /// </summary>
        /// <remarks>
        /// Operation to add a user to a Team. To get the user&#39;s internal ID, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public ID.\&quot; To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequest">Request object to specify user and team values.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SecurityAddUserToTeamV1WithHttpInfo (AddUserToTeamRequest dataRequest);
        /// <summary>
        /// Add a user to a team
        /// </summary>
        /// <remarks>
        /// Operation to add a user to a Team. To get the user&#39;s internal ID, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public ID.\&quot; To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequest">Request object to specify user and team values.</param>
        /// <returns>AddUserToTeamResponse</returns>
        AddUserToTeamResponse SecurityAddUserToTeamV2 (AddUserToTeamRequest dataRequest);

        /// <summary>
        /// Add a user to a team
        /// </summary>
        /// <remarks>
        /// Operation to add a user to a Team. To get the user&#39;s internal ID, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public ID.\&quot; To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequest">Request object to specify user and team values.</param>
        /// <returns>ApiResponse of AddUserToTeamResponse</returns>
        ApiResponse<AddUserToTeamResponse> SecurityAddUserToTeamV2WithHttpInfo (AddUserToTeamRequest dataRequest);
        /// <summary>
        /// Delete a batch of users
        /// </summary>
        /// <remarks>
        /// Operation to delete a batch of users. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object listing record IDs for users to be deleted and an error flag.</param>
        /// <returns>UserBatchDeleteResponse</returns>
        UserBatchDeleteResponse SecurityDeleteUserBatchV1 (UserBatchDeleteRequest request);

        /// <summary>
        /// Delete a batch of users
        /// </summary>
        /// <remarks>
        /// Operation to delete a batch of users. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object listing record IDs for users to be deleted and an error flag.</param>
        /// <returns>ApiResponse of UserBatchDeleteResponse</returns>
        ApiResponse<UserBatchDeleteResponse> SecurityDeleteUserBatchV1WithHttpInfo (UserBatchDeleteRequest request);
        /// <summary>
        /// Delete a batch of users
        /// </summary>
        /// <remarks>
        /// Operation to delete a batch of users. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object listing record IDs for users to be deleted and an error flag.</param>
        /// <returns>UserBatchDeleteV2Response</returns>
        UserBatchDeleteV2Response SecurityDeleteUserBatchV2 (UserBatchDeleteRequest request);

        /// <summary>
        /// Delete a batch of users
        /// </summary>
        /// <remarks>
        /// Operation to delete a batch of users. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object listing record IDs for users to be deleted and an error flag.</param>
        /// <returns>ApiResponse of UserBatchDeleteV2Response</returns>
        ApiResponse<UserBatchDeleteV2Response> SecurityDeleteUserBatchV2WithHttpInfo (UserBatchDeleteRequest request);
        /// <summary>
        /// Delete a user by record ID
        /// </summary>
        /// <remarks>
        /// Operation to delete a user by record ID. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userrecordid">Specify the record ID of the user you want to delete</param>
        /// <returns>UserDeleteResponse</returns>
        UserDeleteResponse SecurityDeleteUserV1 (string userrecordid);

        /// <summary>
        /// Delete a user by record ID
        /// </summary>
        /// <remarks>
        /// Operation to delete a user by record ID. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userrecordid">Specify the record ID of the user you want to delete</param>
        /// <returns>ApiResponse of UserDeleteResponse</returns>
        ApiResponse<UserDeleteResponse> SecurityDeleteUserV1WithHttpInfo (string userrecordid);
        /// <summary>
        /// Delete a user by record ID
        /// </summary>
        /// <remarks>
        /// Operation to delete a user by record ID. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userrecordid">Specify the record ID of the user you want to delete</param>
        /// <returns>UserDeleteV2Response</returns>
        UserDeleteV2Response SecurityDeleteUserV2 (string userrecordid);

        /// <summary>
        /// Delete a user by record ID
        /// </summary>
        /// <remarks>
        /// Operation to delete a user by record ID. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userrecordid">Specify the record ID of the user you want to delete</param>
        /// <returns>ApiResponse of UserDeleteV2Response</returns>
        ApiResponse<UserDeleteV2Response> SecurityDeleteUserV2WithHttpInfo (string userrecordid);
        /// <summary>
        /// Get all available Roles
        /// </summary>
        /// <remarks>
        /// Operation to get all available Roles.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RoleReadResponse</returns>
        RoleReadResponse SecurityGetRolesV1 ();

        /// <summary>
        /// Get all available Roles
        /// </summary>
        /// <remarks>
        /// Operation to get all available Roles.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RoleReadResponse</returns>
        ApiResponse<RoleReadResponse> SecurityGetRolesV1WithHttpInfo ();
        /// <summary>
        /// Get all available Roles
        /// </summary>
        /// <remarks>
        /// Operation to get all available Roles.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RoleReadV2Response</returns>
        RoleReadV2Response SecurityGetRolesV2 ();

        /// <summary>
        /// Get all available Roles
        /// </summary>
        /// <remarks>
        /// Operation to get all available Roles.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RoleReadV2Response</returns>
        ApiResponse<RoleReadV2Response> SecurityGetRolesV2WithHttpInfo ();
        /// <summary>
        /// Get Business Object permissions by Security Group
        /// </summary>
        /// <remarks>
        /// Operation to get specific Business Object permissions for a Security Group. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID. </param>
        /// <param name="busObId">Specify the Business Object ID.</param>
        /// <returns>List&lt;BusinessObjectPermission&gt;</returns>
        List<BusinessObjectPermission> SecurityGetSecurityGroupBusinessObjectPermissionsByBusObIdV1 (string groupid, string busObId);

        /// <summary>
        /// Get Business Object permissions by Security Group
        /// </summary>
        /// <remarks>
        /// Operation to get specific Business Object permissions for a Security Group. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID. </param>
        /// <param name="busObId">Specify the Business Object ID.</param>
        /// <returns>ApiResponse of List&lt;BusinessObjectPermission&gt;</returns>
        ApiResponse<List<BusinessObjectPermission>> SecurityGetSecurityGroupBusinessObjectPermissionsByBusObIdV1WithHttpInfo (string groupid, string busObId);
        /// <summary>
        /// Get Business Object permissions by Security Group
        /// </summary>
        /// <remarks>
        /// Operation to get specific Business Object permissions for a Security Group. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID. </param>
        /// <param name="busObId">Specify the Business Object ID.</param>
        /// <returns>GetSecurityGroupBusinessObjectPermissionsResponse</returns>
        GetSecurityGroupBusinessObjectPermissionsResponse SecurityGetSecurityGroupBusinessObjectPermissionsByBusObIdV2 (string groupid, string busObId);

        /// <summary>
        /// Get Business Object permissions by Security Group
        /// </summary>
        /// <remarks>
        /// Operation to get specific Business Object permissions for a Security Group. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID. </param>
        /// <param name="busObId">Specify the Business Object ID.</param>
        /// <returns>ApiResponse of GetSecurityGroupBusinessObjectPermissionsResponse</returns>
        ApiResponse<GetSecurityGroupBusinessObjectPermissionsResponse> SecurityGetSecurityGroupBusinessObjectPermissionsByBusObIdV2WithHttpInfo (string groupid, string busObId);
        /// <summary>
        /// Get Business Object permissions by Security Group
        /// </summary>
        /// <remarks>
        /// Operation to get specific Business Object permissions for a Security Group. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupname">Specify the Security Group name. </param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <returns>List&lt;BusinessObjectPermission&gt;</returns>
        List<BusinessObjectPermission> SecurityGetSecurityGroupBusinessObjectPermissionsByBusObNameV1 (string groupname, string busobname);

        /// <summary>
        /// Get Business Object permissions by Security Group
        /// </summary>
        /// <remarks>
        /// Operation to get specific Business Object permissions for a Security Group. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupname">Specify the Security Group name. </param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <returns>ApiResponse of List&lt;BusinessObjectPermission&gt;</returns>
        ApiResponse<List<BusinessObjectPermission>> SecurityGetSecurityGroupBusinessObjectPermissionsByBusObNameV1WithHttpInfo (string groupname, string busobname);
        /// <summary>
        /// Get Business Object permissions by Security Group
        /// </summary>
        /// <remarks>
        /// Operation to get specific Business Object permissions for a Security Group. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupname">Specify the Security Group name. </param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <returns>GetSecurityGroupBusinessObjectPermissionsResponse</returns>
        GetSecurityGroupBusinessObjectPermissionsResponse SecurityGetSecurityGroupBusinessObjectPermissionsByBusObNameV2 (string groupname, string busobname);

        /// <summary>
        /// Get Business Object permissions by Security Group
        /// </summary>
        /// <remarks>
        /// Operation to get specific Business Object permissions for a Security Group. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupname">Specify the Security Group name. </param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <returns>ApiResponse of GetSecurityGroupBusinessObjectPermissionsResponse</returns>
        ApiResponse<GetSecurityGroupBusinessObjectPermissionsResponse> SecurityGetSecurityGroupBusinessObjectPermissionsByBusObNameV2WithHttpInfo (string groupname, string busobname);
        /// <summary>
        /// Get Business Object permission for current user
        /// </summary>
        /// <remarks>
        /// Operation to get Business Object permissions for the currently logged-in user&#39;s Security Group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busObId">Specify the Business Object ID.</param>
        /// <returns>List&lt;BusinessObjectPermission&gt;</returns>
        List<BusinessObjectPermission> SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObIdV1 (string busObId);

        /// <summary>
        /// Get Business Object permission for current user
        /// </summary>
        /// <remarks>
        /// Operation to get Business Object permissions for the currently logged-in user&#39;s Security Group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busObId">Specify the Business Object ID.</param>
        /// <returns>ApiResponse of List&lt;BusinessObjectPermission&gt;</returns>
        ApiResponse<List<BusinessObjectPermission>> SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObIdV1WithHttpInfo (string busObId);
        /// <summary>
        /// Get Business Object permission for current user
        /// </summary>
        /// <remarks>
        /// Operation to get Business Object permissions for the currently logged-in user&#39;s Security Group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busObId">Specify the Business Object ID.</param>
        /// <returns>GetSecurityGroupBusinessObjectPermissionsResponse</returns>
        GetSecurityGroupBusinessObjectPermissionsResponse SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObIdV2 (string busObId);

        /// <summary>
        /// Get Business Object permission for current user
        /// </summary>
        /// <remarks>
        /// Operation to get Business Object permissions for the currently logged-in user&#39;s Security Group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busObId">Specify the Business Object ID.</param>
        /// <returns>ApiResponse of GetSecurityGroupBusinessObjectPermissionsResponse</returns>
        ApiResponse<GetSecurityGroupBusinessObjectPermissionsResponse> SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObIdV2WithHttpInfo (string busObId);
        /// <summary>
        /// Get Business Object permissions for current user
        /// </summary>
        /// <remarks>
        /// Operation to get Business Object permissions for currently logged in user&#39;s Security Group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <returns>List&lt;BusinessObjectPermission&gt;</returns>
        List<BusinessObjectPermission> SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObNameV1 (string busobname);

        /// <summary>
        /// Get Business Object permissions for current user
        /// </summary>
        /// <remarks>
        /// Operation to get Business Object permissions for currently logged in user&#39;s Security Group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <returns>ApiResponse of List&lt;BusinessObjectPermission&gt;</returns>
        ApiResponse<List<BusinessObjectPermission>> SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObNameV1WithHttpInfo (string busobname);
        /// <summary>
        /// Get Business Object permissions for current user
        /// </summary>
        /// <remarks>
        /// Operation to get Business Object permissions for currently logged in user&#39;s Security Group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <returns>GetSecurityGroupBusinessObjectPermissionsResponse</returns>
        GetSecurityGroupBusinessObjectPermissionsResponse SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObNameV2 (string busobname);

        /// <summary>
        /// Get Business Object permissions for current user
        /// </summary>
        /// <remarks>
        /// Operation to get Business Object permissions for currently logged in user&#39;s Security Group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <returns>ApiResponse of GetSecurityGroupBusinessObjectPermissionsResponse</returns>
        ApiResponse<GetSecurityGroupBusinessObjectPermissionsResponse> SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObNameV2WithHttpInfo (string busobname);
        /// <summary>
        /// Get all Security Group categories
        /// </summary>
        /// <remarks>
        /// Operation to get IDs and names for all available Security Group categories. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;RightCategory&gt;</returns>
        List<RightCategory> SecurityGetSecurityGroupCategoriesV1 ();

        /// <summary>
        /// Get all Security Group categories
        /// </summary>
        /// <remarks>
        /// Operation to get IDs and names for all available Security Group categories. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;RightCategory&gt;</returns>
        ApiResponse<List<RightCategory>> SecurityGetSecurityGroupCategoriesV1WithHttpInfo ();
        /// <summary>
        /// Get all Security Group categories
        /// </summary>
        /// <remarks>
        /// Operation to get IDs and names for all available Security Group categories. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SecurityRightCategoriesResponse</returns>
        SecurityRightCategoriesResponse SecurityGetSecurityGroupCategoriesV2 ();

        /// <summary>
        /// Get all Security Group categories
        /// </summary>
        /// <remarks>
        /// Operation to get IDs and names for all available Security Group categories. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SecurityRightCategoriesResponse</returns>
        ApiResponse<SecurityRightCategoriesResponse> SecurityGetSecurityGroupCategoriesV2WithHttpInfo ();
        /// <summary>
        /// Get permissions for a Security Group by category
        /// </summary>
        /// <remarks>
        /// Operation to get permissions for a Security Group by category. To get Security Group IDs, use \&quot;Get all available Security Groups.\&quot; To get Security Group category IDs, use \&quot;Get all Security Group categories.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID</param>
        /// <param name="categoryid">Specify the Security Group category ID</param>
        /// <returns>List&lt;Right&gt;</returns>
        List<Right> SecurityGetSecurityGroupRightsByGroupIdAndCategoryIdV1 (string groupid, string categoryid);

        /// <summary>
        /// Get permissions for a Security Group by category
        /// </summary>
        /// <remarks>
        /// Operation to get permissions for a Security Group by category. To get Security Group IDs, use \&quot;Get all available Security Groups.\&quot; To get Security Group category IDs, use \&quot;Get all Security Group categories.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID</param>
        /// <param name="categoryid">Specify the Security Group category ID</param>
        /// <returns>ApiResponse of List&lt;Right&gt;</returns>
        ApiResponse<List<Right>> SecurityGetSecurityGroupRightsByGroupIdAndCategoryIdV1WithHttpInfo (string groupid, string categoryid);
        /// <summary>
        /// Get permissions for a Security Group by category
        /// </summary>
        /// <remarks>
        /// Operation to get permissions for a Security Group by category. To get Security Group IDs, use \&quot;Get all available Security Groups.\&quot; To get Security Group category IDs, use \&quot;Get all Security Group categories.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID</param>
        /// <param name="categoryid">Specify the Security Group category ID</param>
        /// <returns>SecurityRightsResponse</returns>
        SecurityRightsResponse SecurityGetSecurityGroupRightsByGroupIdAndCategoryIdV2 (string groupid, string categoryid);

        /// <summary>
        /// Get permissions for a Security Group by category
        /// </summary>
        /// <remarks>
        /// Operation to get permissions for a Security Group by category. To get Security Group IDs, use \&quot;Get all available Security Groups.\&quot; To get Security Group category IDs, use \&quot;Get all Security Group categories.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID</param>
        /// <param name="categoryid">Specify the Security Group category ID</param>
        /// <returns>ApiResponse of SecurityRightsResponse</returns>
        ApiResponse<SecurityRightsResponse> SecurityGetSecurityGroupRightsByGroupIdAndCategoryIdV2WithHttpInfo (string groupid, string categoryid);
        /// <summary>
        /// Get permissions for a Security Group by category
        /// </summary>
        /// <remarks>
        /// Operation to get permissions for a Security Group by category.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupname">Specify the Security Group name.</param>
        /// <param name="categoryname">Specify the Security Group category name.</param>
        /// <returns>List&lt;Right&gt;</returns>
        List<Right> SecurityGetSecurityGroupRightsByGroupNameAndCategoryNameV1 (string groupname, string categoryname);

        /// <summary>
        /// Get permissions for a Security Group by category
        /// </summary>
        /// <remarks>
        /// Operation to get permissions for a Security Group by category.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupname">Specify the Security Group name.</param>
        /// <param name="categoryname">Specify the Security Group category name.</param>
        /// <returns>ApiResponse of List&lt;Right&gt;</returns>
        ApiResponse<List<Right>> SecurityGetSecurityGroupRightsByGroupNameAndCategoryNameV1WithHttpInfo (string groupname, string categoryname);
        /// <summary>
        /// Get permissions for a Security Group by category
        /// </summary>
        /// <remarks>
        /// Operation to get permissions for a Security Group by category.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupname">Specify the Security Group name.</param>
        /// <param name="categoryname">Specify the Security Group category name.</param>
        /// <returns>SecurityRightsResponse</returns>
        SecurityRightsResponse SecurityGetSecurityGroupRightsByGroupNameAndCategoryNameV2 (string groupname, string categoryname);

        /// <summary>
        /// Get permissions for a Security Group by category
        /// </summary>
        /// <remarks>
        /// Operation to get permissions for a Security Group by category.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupname">Specify the Security Group name.</param>
        /// <param name="categoryname">Specify the Security Group category name.</param>
        /// <returns>ApiResponse of SecurityRightsResponse</returns>
        ApiResponse<SecurityRightsResponse> SecurityGetSecurityGroupRightsByGroupNameAndCategoryNameV2WithHttpInfo (string groupname, string categoryname);
        /// <summary>
        /// Get current user&#39;s permissions by Security Group category by ID
        /// </summary>
        /// <remarks>
        /// Operation to get permissions for the current user&#39;s Security Group by category. To get Security Group category IDs, use \&quot;Get all Security Group categories.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryid">Specify the Security Group category ID.</param>
        /// <returns>List&lt;Right&gt;</returns>
        List<Right> SecurityGetSecurityGroupRightsForCurrentUserByCategoryIdV1 (string categoryid);

        /// <summary>
        /// Get current user&#39;s permissions by Security Group category by ID
        /// </summary>
        /// <remarks>
        /// Operation to get permissions for the current user&#39;s Security Group by category. To get Security Group category IDs, use \&quot;Get all Security Group categories.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryid">Specify the Security Group category ID.</param>
        /// <returns>ApiResponse of List&lt;Right&gt;</returns>
        ApiResponse<List<Right>> SecurityGetSecurityGroupRightsForCurrentUserByCategoryIdV1WithHttpInfo (string categoryid);
        /// <summary>
        /// Get current user&#39;s permissions by Security Group category by ID
        /// </summary>
        /// <remarks>
        /// Operation to get permissions for the current user&#39;s Security Group by category. To get Security Group category IDs, use \&quot;Get all Security Group categories.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryid">Specify the Security Group category ID.</param>
        /// <returns>SecurityRightsResponse</returns>
        SecurityRightsResponse SecurityGetSecurityGroupRightsForCurrentUserByCategoryIdV2 (string categoryid);

        /// <summary>
        /// Get current user&#39;s permissions by Security Group category by ID
        /// </summary>
        /// <remarks>
        /// Operation to get permissions for the current user&#39;s Security Group by category. To get Security Group category IDs, use \&quot;Get all Security Group categories.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryid">Specify the Security Group category ID.</param>
        /// <returns>ApiResponse of SecurityRightsResponse</returns>
        ApiResponse<SecurityRightsResponse> SecurityGetSecurityGroupRightsForCurrentUserByCategoryIdV2WithHttpInfo (string categoryid);
        /// <summary>
        /// Get current user&#39;s permissions by Security Group category by name
        /// </summary>
        /// <remarks>
        /// Operation to get permissions for the current user&#39;s Security Group by category.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryname">Specify the Security Group category name.</param>
        /// <returns>List&lt;Right&gt;</returns>
        List<Right> SecurityGetSecurityGroupRightsForCurrentUserByCategoryNameV1 (string categoryname);

        /// <summary>
        /// Get current user&#39;s permissions by Security Group category by name
        /// </summary>
        /// <remarks>
        /// Operation to get permissions for the current user&#39;s Security Group by category.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryname">Specify the Security Group category name.</param>
        /// <returns>ApiResponse of List&lt;Right&gt;</returns>
        ApiResponse<List<Right>> SecurityGetSecurityGroupRightsForCurrentUserByCategoryNameV1WithHttpInfo (string categoryname);
        /// <summary>
        /// Get current user&#39;s permissions by Security Group category by name
        /// </summary>
        /// <remarks>
        /// Operation to get permissions for the current user&#39;s Security Group by category.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryname">Specify the Security Group category name.</param>
        /// <returns>SecurityRightsResponse</returns>
        SecurityRightsResponse SecurityGetSecurityGroupRightsForCurrentUserByCategoryNameV2 (string categoryname);

        /// <summary>
        /// Get current user&#39;s permissions by Security Group category by name
        /// </summary>
        /// <remarks>
        /// Operation to get permissions for the current user&#39;s Security Group by category.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryname">Specify the Security Group category name.</param>
        /// <returns>ApiResponse of SecurityRightsResponse</returns>
        ApiResponse<SecurityRightsResponse> SecurityGetSecurityGroupRightsForCurrentUserByCategoryNameV2WithHttpInfo (string categoryname);
        /// <summary>
        /// Get all available Security Groups
        /// </summary>
        /// <remarks>
        /// Operation to get IDs, names, and descriptions for all available Security Groups.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SecurityGroupResponse</returns>
        SecurityGroupResponse SecurityGetSecurityGroupsV1 ();

        /// <summary>
        /// Get all available Security Groups
        /// </summary>
        /// <remarks>
        /// Operation to get IDs, names, and descriptions for all available Security Groups.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SecurityGroupResponse</returns>
        ApiResponse<SecurityGroupResponse> SecurityGetSecurityGroupsV1WithHttpInfo ();
        /// <summary>
        /// Get all available Security Groups
        /// </summary>
        /// <remarks>
        /// Operation to get IDs, names, and descriptions for all available Security Groups.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SecurityGroupV2Response</returns>
        SecurityGroupV2Response SecurityGetSecurityGroupsV2 ();

        /// <summary>
        /// Get all available Security Groups
        /// </summary>
        /// <remarks>
        /// Operation to get IDs, names, and descriptions for all available Security Groups.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SecurityGroupV2Response</returns>
        ApiResponse<SecurityGroupV2Response> SecurityGetSecurityGroupsV2WithHttpInfo ();
        /// <summary>
        /// Get all available Teams
        /// </summary>
        /// <remarks>
        /// Operation to get IDs and names for all available Teams.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TeamsResponse</returns>
        TeamsResponse SecurityGetTeamsV1 ();

        /// <summary>
        /// Get all available Teams
        /// </summary>
        /// <remarks>
        /// Operation to get IDs and names for all available Teams.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TeamsResponse</returns>
        ApiResponse<TeamsResponse> SecurityGetTeamsV1WithHttpInfo ();
        /// <summary>
        /// Get all available Teams
        /// </summary>
        /// <remarks>
        /// Operation to get IDs and names for all available Teams.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TeamsV2Response</returns>
        TeamsV2Response SecurityGetTeamsV2 ();

        /// <summary>
        /// Get all available Teams
        /// </summary>
        /// <remarks>
        /// Operation to get IDs and names for all available Teams.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TeamsV2Response</returns>
        ApiResponse<TeamsV2Response> SecurityGetTeamsV2WithHttpInfo ();
        /// <summary>
        /// Get user information in a batch
        /// </summary>
        /// <remarks>
        /// Operation to get user information in a batch. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object that lists user record IDs or public IDs of users and an error flag.</param>
        /// <returns>UserBatchReadResponse</returns>
        UserBatchReadResponse SecurityGetUserBatchV1 (UserBatchReadRequest request);

        /// <summary>
        /// Get user information in a batch
        /// </summary>
        /// <remarks>
        /// Operation to get user information in a batch. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object that lists user record IDs or public IDs of users and an error flag.</param>
        /// <returns>ApiResponse of UserBatchReadResponse</returns>
        ApiResponse<UserBatchReadResponse> SecurityGetUserBatchV1WithHttpInfo (UserBatchReadRequest request);
        /// <summary>
        /// Get a user by login ID
        /// </summary>
        /// <remarks>
        /// Operation to get detailed user information by login ID. Use to get user record IDs and account settings, for example. This operation has been deprecated by a V2 operation of the same name, but with query string parameters.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginid">Specify the user&#39;s login ID.</param>
        /// <returns>User</returns>
        User SecurityGetUserByLoginIdV1 (string loginid);

        /// <summary>
        /// Get a user by login ID
        /// </summary>
        /// <remarks>
        /// Operation to get detailed user information by login ID. Use to get user record IDs and account settings, for example. This operation has been deprecated by a V2 operation of the same name, but with query string parameters.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginid">Specify the user&#39;s login ID.</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> SecurityGetUserByLoginIdV1WithHttpInfo (string loginid);
        /// <summary>
        /// Get a user by login ID and login ID type
        /// </summary>
        /// <remarks>
        /// Operation to get detailed user information by login ID. Use to get user record IDs and account settings, for example.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginid">Specify the user&#39;s login ID.</param>
        /// <param name="loginidtype">Specify the login ID type.</param>
        /// <returns>User</returns>
        User SecurityGetUserByLoginIdV2 (string loginid, string loginidtype);

        /// <summary>
        /// Get a user by login ID and login ID type
        /// </summary>
        /// <remarks>
        /// Operation to get detailed user information by login ID. Use to get user record IDs and account settings, for example.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginid">Specify the user&#39;s login ID.</param>
        /// <param name="loginidtype">Specify the login ID type.</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> SecurityGetUserByLoginIdV2WithHttpInfo (string loginid, string loginidtype);
        /// <summary>
        /// Get a user by login ID and login ID type
        /// </summary>
        /// <remarks>
        /// Operation to get detailed user information by login ID. Use to get user record IDs and account settings, for example.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginid">Specify the user&#39;s login ID.</param>
        /// <param name="loginidtype">Specify the login ID type.</param>
        /// <returns>UserV2</returns>
        UserV2 SecurityGetUserByLoginIdV3 (string loginid, string loginidtype);

        /// <summary>
        /// Get a user by login ID and login ID type
        /// </summary>
        /// <remarks>
        /// Operation to get detailed user information by login ID. Use to get user record IDs and account settings, for example.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginid">Specify the user&#39;s login ID.</param>
        /// <param name="loginidtype">Specify the login ID type.</param>
        /// <returns>ApiResponse of UserV2</returns>
        ApiResponse<UserV2> SecurityGetUserByLoginIdV3WithHttpInfo (string loginid, string loginidtype);
        /// <summary>
        /// Get a user by public ID
        /// </summary>
        /// <remarks>
        /// Operation to get a user by public ID. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicid">Specify the user&#39;s public ID.</param>
        /// <returns>UserReadResponse</returns>
        UserReadResponse SecurityGetUserByPublicIdV1 (string publicid);

        /// <summary>
        /// Get a user by public ID
        /// </summary>
        /// <remarks>
        /// Operation to get a user by public ID. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicid">Specify the user&#39;s public ID.</param>
        /// <returns>ApiResponse of UserReadResponse</returns>
        ApiResponse<UserReadResponse> SecurityGetUserByPublicIdV1WithHttpInfo (string publicid);
        /// <summary>
        /// Get a user by public ID
        /// </summary>
        /// <remarks>
        /// Operation to get a user by public ID. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicid">Specify the user&#39;s public ID.</param>
        /// <returns>UserReadV2Response</returns>
        UserReadV2Response SecurityGetUserByPublicIdV2 (string publicid);

        /// <summary>
        /// Get a user by public ID
        /// </summary>
        /// <remarks>
        /// Operation to get a user by public ID. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicid">Specify the user&#39;s public ID.</param>
        /// <returns>ApiResponse of UserReadV2Response</returns>
        ApiResponse<UserReadV2Response> SecurityGetUserByPublicIdV2WithHttpInfo (string publicid);
        /// <summary>
        /// Get users in a Security Group
        /// </summary>
        /// <remarks>
        /// Operation to get the users in a specified Security Group. Use \&quot;Get all available Security Groups\&quot; to get Security Group record IDs. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID.</param>
        /// <returns>List&lt;User&gt;</returns>
        List<User> SecurityGetUsersInSecurityGroupV1 (string groupid);

        /// <summary>
        /// Get users in a Security Group
        /// </summary>
        /// <remarks>
        /// Operation to get the users in a specified Security Group. Use \&quot;Get all available Security Groups\&quot; to get Security Group record IDs. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID.</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> SecurityGetUsersInSecurityGroupV1WithHttpInfo (string groupid);
        /// <summary>
        /// Get users in a Security Group
        /// </summary>
        /// <remarks>
        /// Operation to get the users in a specified Security Group. Use \&quot;Get all available Security Groups\&quot; to get Security Group record IDs. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID.</param>
        /// <returns>UserReadV2Response</returns>
        UserReadV2Response SecurityGetUsersInSecurityGroupV2 (string groupid);

        /// <summary>
        /// Get users in a Security Group
        /// </summary>
        /// <remarks>
        /// Operation to get the users in a specified Security Group. Use \&quot;Get all available Security Groups\&quot; to get Security Group record IDs. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID.</param>
        /// <returns>ApiResponse of UserReadV2Response</returns>
        ApiResponse<UserReadV2Response> SecurityGetUsersInSecurityGroupV2WithHttpInfo (string groupid);
        /// <summary>
        /// Get Team assignments for a user
        /// </summary>
        /// <remarks>
        /// Operation to get Team assignments for a user. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userRecordId">Specify the user record ID.</param>
        /// <returns>TeamsResponse</returns>
        TeamsResponse SecurityGetUsersTeamsV1 (string userRecordId);

        /// <summary>
        /// Get Team assignments for a user
        /// </summary>
        /// <remarks>
        /// Operation to get Team assignments for a user. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userRecordId">Specify the user record ID.</param>
        /// <returns>ApiResponse of TeamsResponse</returns>
        ApiResponse<TeamsResponse> SecurityGetUsersTeamsV1WithHttpInfo (string userRecordId);
        /// <summary>
        /// Get Team assignments for a user
        /// </summary>
        /// <remarks>
        /// Operation to get Team assignments for a user. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userRecordId">Specify the user record ID.</param>
        /// <returns>TeamsV2Response</returns>
        TeamsV2Response SecurityGetUsersTeamsV2 (string userRecordId);

        /// <summary>
        /// Get Team assignments for a user
        /// </summary>
        /// <remarks>
        /// Operation to get Team assignments for a user. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userRecordId">Specify the user record ID.</param>
        /// <returns>ApiResponse of TeamsV2Response</returns>
        ApiResponse<TeamsV2Response> SecurityGetUsersTeamsV2WithHttpInfo (string userRecordId);
        /// <summary>
        /// Get all available Workgroups
        /// </summary>
        /// <remarks>
        /// Operation to get IDs and names for all available Workgroups.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TeamsResponse</returns>
        TeamsResponse SecurityGetWorkgroupsV1 ();

        /// <summary>
        /// Get all available Workgroups
        /// </summary>
        /// <remarks>
        /// Operation to get IDs and names for all available Workgroups.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TeamsResponse</returns>
        ApiResponse<TeamsResponse> SecurityGetWorkgroupsV1WithHttpInfo ();
        /// <summary>
        /// Get all available Workgroups
        /// </summary>
        /// <remarks>
        /// Operation to get IDs and names for all available Workgroups.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TeamsV2Response</returns>
        TeamsV2Response SecurityGetWorkgroupsV2 ();

        /// <summary>
        /// Get all available Workgroups
        /// </summary>
        /// <remarks>
        /// Operation to get IDs and names for all available Workgroups.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TeamsV2Response</returns>
        ApiResponse<TeamsV2Response> SecurityGetWorkgroupsV2WithHttpInfo ();
        /// <summary>
        /// Remove a user from a team
        /// </summary>
        /// <remarks>
        /// Operation to remove a user from a Team. To get the user&#39;s record ID, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public ID.\&quot; To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Specify the internal ID of the Team you want to remove the user from</param>
        /// <param name="userrecordid">Specify the record ID of the user you want to remove from the Team.</param>
        /// <returns></returns>
        void SecurityRemoveUserFromTeamV1 (string teamId, string userrecordid);

        /// <summary>
        /// Remove a user from a team
        /// </summary>
        /// <remarks>
        /// Operation to remove a user from a Team. To get the user&#39;s record ID, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public ID.\&quot; To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Specify the internal ID of the Team you want to remove the user from</param>
        /// <param name="userrecordid">Specify the record ID of the user you want to remove from the Team.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SecurityRemoveUserFromTeamV1WithHttpInfo (string teamId, string userrecordid);
        /// <summary>
        /// Remove a user from a team
        /// </summary>
        /// <remarks>
        /// Operation to remove a user from a Team. To get the user&#39;s record ID, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public ID.\&quot; To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Specify the internal ID of the Team you want to remove the user from</param>
        /// <param name="userrecordid">Specify the record ID of the user you want to remove from the Team.</param>
        /// <returns>RemoveUserFromTeamResponse</returns>
        RemoveUserFromTeamResponse SecurityRemoveUserFromTeamV2 (string teamId, string userrecordid);

        /// <summary>
        /// Remove a user from a team
        /// </summary>
        /// <remarks>
        /// Operation to remove a user from a Team. To get the user&#39;s record ID, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public ID.\&quot; To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Specify the internal ID of the Team you want to remove the user from</param>
        /// <param name="userrecordid">Specify the record ID of the user you want to remove from the Team.</param>
        /// <returns>ApiResponse of RemoveUserFromTeamResponse</returns>
        ApiResponse<RemoveUserFromTeamResponse> SecurityRemoveUserFromTeamV2WithHttpInfo (string teamId, string userrecordid);
        /// <summary>
        /// Create or update a team
        /// </summary>
        /// <remarks>
        /// Operation to create or update a Team or Workgroup. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object to create Teams or Workgroups. To create a Team, use teamType and teamName. To update a team, use teamID. Team type values must be User or CustomerWorkgroup. The teamType cannot be changed for existing Teams or Workgroups.</param>
        /// <returns>TeamSaveResponse</returns>
        TeamSaveResponse SecuritySaveTeamV1 (TeamSaveRequest request);

        /// <summary>
        /// Create or update a team
        /// </summary>
        /// <remarks>
        /// Operation to create or update a Team or Workgroup. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object to create Teams or Workgroups. To create a Team, use teamType and teamName. To update a team, use teamID. Team type values must be User or CustomerWorkgroup. The teamType cannot be changed for existing Teams or Workgroups.</param>
        /// <returns>ApiResponse of TeamSaveResponse</returns>
        ApiResponse<TeamSaveResponse> SecuritySaveTeamV1WithHttpInfo (TeamSaveRequest request);
        /// <summary>
        /// Create or update users in a batch
        /// </summary>
        /// <remarks>
        /// Operation to create or update users in a batch. To update, specify record ID. To create, leave record ID empty.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object listing user record IDs and an error flag.</param>
        /// <returns>UserBatchSaveResponse</returns>
        UserBatchSaveResponse SecuritySaveUserBatchV1 (UserBatchSaveRequest request);

        /// <summary>
        /// Create or update users in a batch
        /// </summary>
        /// <remarks>
        /// Operation to create or update users in a batch. To update, specify record ID. To create, leave record ID empty.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object listing user record IDs and an error flag.</param>
        /// <returns>ApiResponse of UserBatchSaveResponse</returns>
        ApiResponse<UserBatchSaveResponse> SecuritySaveUserBatchV1WithHttpInfo (UserBatchSaveRequest request);
        /// <summary>
        /// Create or update users in a batch
        /// </summary>
        /// <remarks>
        /// Operation to create or update users in a batch. To update, specify record ID. To create, leave record ID empty.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object listing user record IDs and an error flag.</param>
        /// <returns>UserBatchSaveV2Response</returns>
        UserBatchSaveV2Response SecuritySaveUserBatchV2 (UserBatchSaveV2Request request);

        /// <summary>
        /// Create or update users in a batch
        /// </summary>
        /// <remarks>
        /// Operation to create or update users in a batch. To update, specify record ID. To create, leave record ID empty.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object listing user record IDs and an error flag.</param>
        /// <returns>ApiResponse of UserBatchSaveV2Response</returns>
        ApiResponse<UserBatchSaveV2Response> SecuritySaveUserBatchV2WithHttpInfo (UserBatchSaveV2Request request);
        /// <summary>
        /// Create or update a user
        /// </summary>
        /// <remarks>
        /// Operation to create or update a user.  The response is a collection because if you use a public ID, more than one user could be updated since public IDs may not be unique. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object to specify user parameters and fields with values to be created or updated. The loginId and either the busObRecId or busObPublicId are required.</param>
        /// <returns>UserSaveResponse</returns>
        UserSaveResponse SecuritySaveUserV1 (UserSaveRequest request);

        /// <summary>
        /// Create or update a user
        /// </summary>
        /// <remarks>
        /// Operation to create or update a user.  The response is a collection because if you use a public ID, more than one user could be updated since public IDs may not be unique. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object to specify user parameters and fields with values to be created or updated. The loginId and either the busObRecId or busObPublicId are required.</param>
        /// <returns>ApiResponse of UserSaveResponse</returns>
        ApiResponse<UserSaveResponse> SecuritySaveUserV1WithHttpInfo (UserSaveRequest request);
        /// <summary>
        /// Create or update a user
        /// </summary>
        /// <remarks>
        /// Operation to create or update a user.  The response is a collection because if you use a public ID, more than one user could be updated since public IDs may not be unique. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object to specify user parameters and fields with values to be created or updated. The loginId and either the busObRecId or busObPublicId are required.</param>
        /// <returns>UserSaveV2Response</returns>
        UserSaveV2Response SecuritySaveUserV2 (UserSaveV2Request request);

        /// <summary>
        /// Create or update a user
        /// </summary>
        /// <remarks>
        /// Operation to create or update a user.  The response is a collection because if you use a public ID, more than one user could be updated since public IDs may not be unique. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object to specify user parameters and fields with values to be created or updated. The loginId and either the busObRecId or busObPublicId are required.</param>
        /// <returns>ApiResponse of UserSaveV2Response</returns>
        ApiResponse<UserSaveV2Response> SecuritySaveUserV2WithHttpInfo (UserSaveV2Request request);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add users to a team by batch
        /// </summary>
        /// <remarks>
        /// Operation to add users to a Team by batch. To get internal IDs for users, use “Get User Information in a Batch.” To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object to specify a list of add user to team request objects.</param>
        /// <returns>Task of AddUserToTeamByBatchResponse</returns>
        System.Threading.Tasks.Task<AddUserToTeamByBatchResponse> SecurityAddUserToTeamByBatchV1Async (AddUserToTeamByBatchRequest request);

        /// <summary>
        /// Add users to a team by batch
        /// </summary>
        /// <remarks>
        /// Operation to add users to a Team by batch. To get internal IDs for users, use “Get User Information in a Batch.” To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object to specify a list of add user to team request objects.</param>
        /// <returns>Task of ApiResponse (AddUserToTeamByBatchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddUserToTeamByBatchResponse>> SecurityAddUserToTeamByBatchV1AsyncWithHttpInfo (AddUserToTeamByBatchRequest request);
        /// <summary>
        /// Add a user to a team
        /// </summary>
        /// <remarks>
        /// Operation to add a user to a Team. To get the user&#39;s internal ID, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public ID.\&quot; To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequest">Request object to specify user and team values.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SecurityAddUserToTeamV1Async (AddUserToTeamRequest dataRequest);

        /// <summary>
        /// Add a user to a team
        /// </summary>
        /// <remarks>
        /// Operation to add a user to a Team. To get the user&#39;s internal ID, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public ID.\&quot; To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequest">Request object to specify user and team values.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SecurityAddUserToTeamV1AsyncWithHttpInfo (AddUserToTeamRequest dataRequest);
        /// <summary>
        /// Add a user to a team
        /// </summary>
        /// <remarks>
        /// Operation to add a user to a Team. To get the user&#39;s internal ID, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public ID.\&quot; To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequest">Request object to specify user and team values.</param>
        /// <returns>Task of AddUserToTeamResponse</returns>
        System.Threading.Tasks.Task<AddUserToTeamResponse> SecurityAddUserToTeamV2Async (AddUserToTeamRequest dataRequest);

        /// <summary>
        /// Add a user to a team
        /// </summary>
        /// <remarks>
        /// Operation to add a user to a Team. To get the user&#39;s internal ID, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public ID.\&quot; To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequest">Request object to specify user and team values.</param>
        /// <returns>Task of ApiResponse (AddUserToTeamResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddUserToTeamResponse>> SecurityAddUserToTeamV2AsyncWithHttpInfo (AddUserToTeamRequest dataRequest);
        /// <summary>
        /// Delete a batch of users
        /// </summary>
        /// <remarks>
        /// Operation to delete a batch of users. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object listing record IDs for users to be deleted and an error flag.</param>
        /// <returns>Task of UserBatchDeleteResponse</returns>
        System.Threading.Tasks.Task<UserBatchDeleteResponse> SecurityDeleteUserBatchV1Async (UserBatchDeleteRequest request);

        /// <summary>
        /// Delete a batch of users
        /// </summary>
        /// <remarks>
        /// Operation to delete a batch of users. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object listing record IDs for users to be deleted and an error flag.</param>
        /// <returns>Task of ApiResponse (UserBatchDeleteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserBatchDeleteResponse>> SecurityDeleteUserBatchV1AsyncWithHttpInfo (UserBatchDeleteRequest request);
        /// <summary>
        /// Delete a batch of users
        /// </summary>
        /// <remarks>
        /// Operation to delete a batch of users. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object listing record IDs for users to be deleted and an error flag.</param>
        /// <returns>Task of UserBatchDeleteV2Response</returns>
        System.Threading.Tasks.Task<UserBatchDeleteV2Response> SecurityDeleteUserBatchV2Async (UserBatchDeleteRequest request);

        /// <summary>
        /// Delete a batch of users
        /// </summary>
        /// <remarks>
        /// Operation to delete a batch of users. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object listing record IDs for users to be deleted and an error flag.</param>
        /// <returns>Task of ApiResponse (UserBatchDeleteV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserBatchDeleteV2Response>> SecurityDeleteUserBatchV2AsyncWithHttpInfo (UserBatchDeleteRequest request);
        /// <summary>
        /// Delete a user by record ID
        /// </summary>
        /// <remarks>
        /// Operation to delete a user by record ID. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userrecordid">Specify the record ID of the user you want to delete</param>
        /// <returns>Task of UserDeleteResponse</returns>
        System.Threading.Tasks.Task<UserDeleteResponse> SecurityDeleteUserV1Async (string userrecordid);

        /// <summary>
        /// Delete a user by record ID
        /// </summary>
        /// <remarks>
        /// Operation to delete a user by record ID. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userrecordid">Specify the record ID of the user you want to delete</param>
        /// <returns>Task of ApiResponse (UserDeleteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserDeleteResponse>> SecurityDeleteUserV1AsyncWithHttpInfo (string userrecordid);
        /// <summary>
        /// Delete a user by record ID
        /// </summary>
        /// <remarks>
        /// Operation to delete a user by record ID. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userrecordid">Specify the record ID of the user you want to delete</param>
        /// <returns>Task of UserDeleteV2Response</returns>
        System.Threading.Tasks.Task<UserDeleteV2Response> SecurityDeleteUserV2Async (string userrecordid);

        /// <summary>
        /// Delete a user by record ID
        /// </summary>
        /// <remarks>
        /// Operation to delete a user by record ID. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userrecordid">Specify the record ID of the user you want to delete</param>
        /// <returns>Task of ApiResponse (UserDeleteV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserDeleteV2Response>> SecurityDeleteUserV2AsyncWithHttpInfo (string userrecordid);
        /// <summary>
        /// Get all available Roles
        /// </summary>
        /// <remarks>
        /// Operation to get all available Roles.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of RoleReadResponse</returns>
        System.Threading.Tasks.Task<RoleReadResponse> SecurityGetRolesV1Async ();

        /// <summary>
        /// Get all available Roles
        /// </summary>
        /// <remarks>
        /// Operation to get all available Roles.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (RoleReadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RoleReadResponse>> SecurityGetRolesV1AsyncWithHttpInfo ();
        /// <summary>
        /// Get all available Roles
        /// </summary>
        /// <remarks>
        /// Operation to get all available Roles.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of RoleReadV2Response</returns>
        System.Threading.Tasks.Task<RoleReadV2Response> SecurityGetRolesV2Async ();

        /// <summary>
        /// Get all available Roles
        /// </summary>
        /// <remarks>
        /// Operation to get all available Roles.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (RoleReadV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<RoleReadV2Response>> SecurityGetRolesV2AsyncWithHttpInfo ();
        /// <summary>
        /// Get Business Object permissions by Security Group
        /// </summary>
        /// <remarks>
        /// Operation to get specific Business Object permissions for a Security Group. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID. </param>
        /// <param name="busObId">Specify the Business Object ID.</param>
        /// <returns>Task of List&lt;BusinessObjectPermission&gt;</returns>
        System.Threading.Tasks.Task<List<BusinessObjectPermission>> SecurityGetSecurityGroupBusinessObjectPermissionsByBusObIdV1Async (string groupid, string busObId);

        /// <summary>
        /// Get Business Object permissions by Security Group
        /// </summary>
        /// <remarks>
        /// Operation to get specific Business Object permissions for a Security Group. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID. </param>
        /// <param name="busObId">Specify the Business Object ID.</param>
        /// <returns>Task of ApiResponse (List&lt;BusinessObjectPermission&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BusinessObjectPermission>>> SecurityGetSecurityGroupBusinessObjectPermissionsByBusObIdV1AsyncWithHttpInfo (string groupid, string busObId);
        /// <summary>
        /// Get Business Object permissions by Security Group
        /// </summary>
        /// <remarks>
        /// Operation to get specific Business Object permissions for a Security Group. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID. </param>
        /// <param name="busObId">Specify the Business Object ID.</param>
        /// <returns>Task of GetSecurityGroupBusinessObjectPermissionsResponse</returns>
        System.Threading.Tasks.Task<GetSecurityGroupBusinessObjectPermissionsResponse> SecurityGetSecurityGroupBusinessObjectPermissionsByBusObIdV2Async (string groupid, string busObId);

        /// <summary>
        /// Get Business Object permissions by Security Group
        /// </summary>
        /// <remarks>
        /// Operation to get specific Business Object permissions for a Security Group. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID. </param>
        /// <param name="busObId">Specify the Business Object ID.</param>
        /// <returns>Task of ApiResponse (GetSecurityGroupBusinessObjectPermissionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSecurityGroupBusinessObjectPermissionsResponse>> SecurityGetSecurityGroupBusinessObjectPermissionsByBusObIdV2AsyncWithHttpInfo (string groupid, string busObId);
        /// <summary>
        /// Get Business Object permissions by Security Group
        /// </summary>
        /// <remarks>
        /// Operation to get specific Business Object permissions for a Security Group. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupname">Specify the Security Group name. </param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <returns>Task of List&lt;BusinessObjectPermission&gt;</returns>
        System.Threading.Tasks.Task<List<BusinessObjectPermission>> SecurityGetSecurityGroupBusinessObjectPermissionsByBusObNameV1Async (string groupname, string busobname);

        /// <summary>
        /// Get Business Object permissions by Security Group
        /// </summary>
        /// <remarks>
        /// Operation to get specific Business Object permissions for a Security Group. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupname">Specify the Security Group name. </param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <returns>Task of ApiResponse (List&lt;BusinessObjectPermission&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BusinessObjectPermission>>> SecurityGetSecurityGroupBusinessObjectPermissionsByBusObNameV1AsyncWithHttpInfo (string groupname, string busobname);
        /// <summary>
        /// Get Business Object permissions by Security Group
        /// </summary>
        /// <remarks>
        /// Operation to get specific Business Object permissions for a Security Group. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupname">Specify the Security Group name. </param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <returns>Task of GetSecurityGroupBusinessObjectPermissionsResponse</returns>
        System.Threading.Tasks.Task<GetSecurityGroupBusinessObjectPermissionsResponse> SecurityGetSecurityGroupBusinessObjectPermissionsByBusObNameV2Async (string groupname, string busobname);

        /// <summary>
        /// Get Business Object permissions by Security Group
        /// </summary>
        /// <remarks>
        /// Operation to get specific Business Object permissions for a Security Group. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupname">Specify the Security Group name. </param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <returns>Task of ApiResponse (GetSecurityGroupBusinessObjectPermissionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSecurityGroupBusinessObjectPermissionsResponse>> SecurityGetSecurityGroupBusinessObjectPermissionsByBusObNameV2AsyncWithHttpInfo (string groupname, string busobname);
        /// <summary>
        /// Get Business Object permission for current user
        /// </summary>
        /// <remarks>
        /// Operation to get Business Object permissions for the currently logged-in user&#39;s Security Group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busObId">Specify the Business Object ID.</param>
        /// <returns>Task of List&lt;BusinessObjectPermission&gt;</returns>
        System.Threading.Tasks.Task<List<BusinessObjectPermission>> SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObIdV1Async (string busObId);

        /// <summary>
        /// Get Business Object permission for current user
        /// </summary>
        /// <remarks>
        /// Operation to get Business Object permissions for the currently logged-in user&#39;s Security Group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busObId">Specify the Business Object ID.</param>
        /// <returns>Task of ApiResponse (List&lt;BusinessObjectPermission&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BusinessObjectPermission>>> SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObIdV1AsyncWithHttpInfo (string busObId);
        /// <summary>
        /// Get Business Object permission for current user
        /// </summary>
        /// <remarks>
        /// Operation to get Business Object permissions for the currently logged-in user&#39;s Security Group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busObId">Specify the Business Object ID.</param>
        /// <returns>Task of GetSecurityGroupBusinessObjectPermissionsResponse</returns>
        System.Threading.Tasks.Task<GetSecurityGroupBusinessObjectPermissionsResponse> SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObIdV2Async (string busObId);

        /// <summary>
        /// Get Business Object permission for current user
        /// </summary>
        /// <remarks>
        /// Operation to get Business Object permissions for the currently logged-in user&#39;s Security Group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busObId">Specify the Business Object ID.</param>
        /// <returns>Task of ApiResponse (GetSecurityGroupBusinessObjectPermissionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSecurityGroupBusinessObjectPermissionsResponse>> SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObIdV2AsyncWithHttpInfo (string busObId);
        /// <summary>
        /// Get Business Object permissions for current user
        /// </summary>
        /// <remarks>
        /// Operation to get Business Object permissions for currently logged in user&#39;s Security Group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <returns>Task of List&lt;BusinessObjectPermission&gt;</returns>
        System.Threading.Tasks.Task<List<BusinessObjectPermission>> SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObNameV1Async (string busobname);

        /// <summary>
        /// Get Business Object permissions for current user
        /// </summary>
        /// <remarks>
        /// Operation to get Business Object permissions for currently logged in user&#39;s Security Group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <returns>Task of ApiResponse (List&lt;BusinessObjectPermission&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BusinessObjectPermission>>> SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObNameV1AsyncWithHttpInfo (string busobname);
        /// <summary>
        /// Get Business Object permissions for current user
        /// </summary>
        /// <remarks>
        /// Operation to get Business Object permissions for currently logged in user&#39;s Security Group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <returns>Task of GetSecurityGroupBusinessObjectPermissionsResponse</returns>
        System.Threading.Tasks.Task<GetSecurityGroupBusinessObjectPermissionsResponse> SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObNameV2Async (string busobname);

        /// <summary>
        /// Get Business Object permissions for current user
        /// </summary>
        /// <remarks>
        /// Operation to get Business Object permissions for currently logged in user&#39;s Security Group.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <returns>Task of ApiResponse (GetSecurityGroupBusinessObjectPermissionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSecurityGroupBusinessObjectPermissionsResponse>> SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObNameV2AsyncWithHttpInfo (string busobname);
        /// <summary>
        /// Get all Security Group categories
        /// </summary>
        /// <remarks>
        /// Operation to get IDs and names for all available Security Group categories. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;RightCategory&gt;</returns>
        System.Threading.Tasks.Task<List<RightCategory>> SecurityGetSecurityGroupCategoriesV1Async ();

        /// <summary>
        /// Get all Security Group categories
        /// </summary>
        /// <remarks>
        /// Operation to get IDs and names for all available Security Group categories. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;RightCategory&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RightCategory>>> SecurityGetSecurityGroupCategoriesV1AsyncWithHttpInfo ();
        /// <summary>
        /// Get all Security Group categories
        /// </summary>
        /// <remarks>
        /// Operation to get IDs and names for all available Security Group categories. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SecurityRightCategoriesResponse</returns>
        System.Threading.Tasks.Task<SecurityRightCategoriesResponse> SecurityGetSecurityGroupCategoriesV2Async ();

        /// <summary>
        /// Get all Security Group categories
        /// </summary>
        /// <remarks>
        /// Operation to get IDs and names for all available Security Group categories. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SecurityRightCategoriesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecurityRightCategoriesResponse>> SecurityGetSecurityGroupCategoriesV2AsyncWithHttpInfo ();
        /// <summary>
        /// Get permissions for a Security Group by category
        /// </summary>
        /// <remarks>
        /// Operation to get permissions for a Security Group by category. To get Security Group IDs, use \&quot;Get all available Security Groups.\&quot; To get Security Group category IDs, use \&quot;Get all Security Group categories.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID</param>
        /// <param name="categoryid">Specify the Security Group category ID</param>
        /// <returns>Task of List&lt;Right&gt;</returns>
        System.Threading.Tasks.Task<List<Right>> SecurityGetSecurityGroupRightsByGroupIdAndCategoryIdV1Async (string groupid, string categoryid);

        /// <summary>
        /// Get permissions for a Security Group by category
        /// </summary>
        /// <remarks>
        /// Operation to get permissions for a Security Group by category. To get Security Group IDs, use \&quot;Get all available Security Groups.\&quot; To get Security Group category IDs, use \&quot;Get all Security Group categories.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID</param>
        /// <param name="categoryid">Specify the Security Group category ID</param>
        /// <returns>Task of ApiResponse (List&lt;Right&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Right>>> SecurityGetSecurityGroupRightsByGroupIdAndCategoryIdV1AsyncWithHttpInfo (string groupid, string categoryid);
        /// <summary>
        /// Get permissions for a Security Group by category
        /// </summary>
        /// <remarks>
        /// Operation to get permissions for a Security Group by category. To get Security Group IDs, use \&quot;Get all available Security Groups.\&quot; To get Security Group category IDs, use \&quot;Get all Security Group categories.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID</param>
        /// <param name="categoryid">Specify the Security Group category ID</param>
        /// <returns>Task of SecurityRightsResponse</returns>
        System.Threading.Tasks.Task<SecurityRightsResponse> SecurityGetSecurityGroupRightsByGroupIdAndCategoryIdV2Async (string groupid, string categoryid);

        /// <summary>
        /// Get permissions for a Security Group by category
        /// </summary>
        /// <remarks>
        /// Operation to get permissions for a Security Group by category. To get Security Group IDs, use \&quot;Get all available Security Groups.\&quot; To get Security Group category IDs, use \&quot;Get all Security Group categories.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID</param>
        /// <param name="categoryid">Specify the Security Group category ID</param>
        /// <returns>Task of ApiResponse (SecurityRightsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecurityRightsResponse>> SecurityGetSecurityGroupRightsByGroupIdAndCategoryIdV2AsyncWithHttpInfo (string groupid, string categoryid);
        /// <summary>
        /// Get permissions for a Security Group by category
        /// </summary>
        /// <remarks>
        /// Operation to get permissions for a Security Group by category.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupname">Specify the Security Group name.</param>
        /// <param name="categoryname">Specify the Security Group category name.</param>
        /// <returns>Task of List&lt;Right&gt;</returns>
        System.Threading.Tasks.Task<List<Right>> SecurityGetSecurityGroupRightsByGroupNameAndCategoryNameV1Async (string groupname, string categoryname);

        /// <summary>
        /// Get permissions for a Security Group by category
        /// </summary>
        /// <remarks>
        /// Operation to get permissions for a Security Group by category.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupname">Specify the Security Group name.</param>
        /// <param name="categoryname">Specify the Security Group category name.</param>
        /// <returns>Task of ApiResponse (List&lt;Right&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Right>>> SecurityGetSecurityGroupRightsByGroupNameAndCategoryNameV1AsyncWithHttpInfo (string groupname, string categoryname);
        /// <summary>
        /// Get permissions for a Security Group by category
        /// </summary>
        /// <remarks>
        /// Operation to get permissions for a Security Group by category.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupname">Specify the Security Group name.</param>
        /// <param name="categoryname">Specify the Security Group category name.</param>
        /// <returns>Task of SecurityRightsResponse</returns>
        System.Threading.Tasks.Task<SecurityRightsResponse> SecurityGetSecurityGroupRightsByGroupNameAndCategoryNameV2Async (string groupname, string categoryname);

        /// <summary>
        /// Get permissions for a Security Group by category
        /// </summary>
        /// <remarks>
        /// Operation to get permissions for a Security Group by category.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupname">Specify the Security Group name.</param>
        /// <param name="categoryname">Specify the Security Group category name.</param>
        /// <returns>Task of ApiResponse (SecurityRightsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecurityRightsResponse>> SecurityGetSecurityGroupRightsByGroupNameAndCategoryNameV2AsyncWithHttpInfo (string groupname, string categoryname);
        /// <summary>
        /// Get current user&#39;s permissions by Security Group category by ID
        /// </summary>
        /// <remarks>
        /// Operation to get permissions for the current user&#39;s Security Group by category. To get Security Group category IDs, use \&quot;Get all Security Group categories.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryid">Specify the Security Group category ID.</param>
        /// <returns>Task of List&lt;Right&gt;</returns>
        System.Threading.Tasks.Task<List<Right>> SecurityGetSecurityGroupRightsForCurrentUserByCategoryIdV1Async (string categoryid);

        /// <summary>
        /// Get current user&#39;s permissions by Security Group category by ID
        /// </summary>
        /// <remarks>
        /// Operation to get permissions for the current user&#39;s Security Group by category. To get Security Group category IDs, use \&quot;Get all Security Group categories.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryid">Specify the Security Group category ID.</param>
        /// <returns>Task of ApiResponse (List&lt;Right&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Right>>> SecurityGetSecurityGroupRightsForCurrentUserByCategoryIdV1AsyncWithHttpInfo (string categoryid);
        /// <summary>
        /// Get current user&#39;s permissions by Security Group category by ID
        /// </summary>
        /// <remarks>
        /// Operation to get permissions for the current user&#39;s Security Group by category. To get Security Group category IDs, use \&quot;Get all Security Group categories.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryid">Specify the Security Group category ID.</param>
        /// <returns>Task of SecurityRightsResponse</returns>
        System.Threading.Tasks.Task<SecurityRightsResponse> SecurityGetSecurityGroupRightsForCurrentUserByCategoryIdV2Async (string categoryid);

        /// <summary>
        /// Get current user&#39;s permissions by Security Group category by ID
        /// </summary>
        /// <remarks>
        /// Operation to get permissions for the current user&#39;s Security Group by category. To get Security Group category IDs, use \&quot;Get all Security Group categories.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryid">Specify the Security Group category ID.</param>
        /// <returns>Task of ApiResponse (SecurityRightsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecurityRightsResponse>> SecurityGetSecurityGroupRightsForCurrentUserByCategoryIdV2AsyncWithHttpInfo (string categoryid);
        /// <summary>
        /// Get current user&#39;s permissions by Security Group category by name
        /// </summary>
        /// <remarks>
        /// Operation to get permissions for the current user&#39;s Security Group by category.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryname">Specify the Security Group category name.</param>
        /// <returns>Task of List&lt;Right&gt;</returns>
        System.Threading.Tasks.Task<List<Right>> SecurityGetSecurityGroupRightsForCurrentUserByCategoryNameV1Async (string categoryname);

        /// <summary>
        /// Get current user&#39;s permissions by Security Group category by name
        /// </summary>
        /// <remarks>
        /// Operation to get permissions for the current user&#39;s Security Group by category.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryname">Specify the Security Group category name.</param>
        /// <returns>Task of ApiResponse (List&lt;Right&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Right>>> SecurityGetSecurityGroupRightsForCurrentUserByCategoryNameV1AsyncWithHttpInfo (string categoryname);
        /// <summary>
        /// Get current user&#39;s permissions by Security Group category by name
        /// </summary>
        /// <remarks>
        /// Operation to get permissions for the current user&#39;s Security Group by category.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryname">Specify the Security Group category name.</param>
        /// <returns>Task of SecurityRightsResponse</returns>
        System.Threading.Tasks.Task<SecurityRightsResponse> SecurityGetSecurityGroupRightsForCurrentUserByCategoryNameV2Async (string categoryname);

        /// <summary>
        /// Get current user&#39;s permissions by Security Group category by name
        /// </summary>
        /// <remarks>
        /// Operation to get permissions for the current user&#39;s Security Group by category.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryname">Specify the Security Group category name.</param>
        /// <returns>Task of ApiResponse (SecurityRightsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecurityRightsResponse>> SecurityGetSecurityGroupRightsForCurrentUserByCategoryNameV2AsyncWithHttpInfo (string categoryname);
        /// <summary>
        /// Get all available Security Groups
        /// </summary>
        /// <remarks>
        /// Operation to get IDs, names, and descriptions for all available Security Groups.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SecurityGroupResponse</returns>
        System.Threading.Tasks.Task<SecurityGroupResponse> SecurityGetSecurityGroupsV1Async ();

        /// <summary>
        /// Get all available Security Groups
        /// </summary>
        /// <remarks>
        /// Operation to get IDs, names, and descriptions for all available Security Groups.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SecurityGroupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecurityGroupResponse>> SecurityGetSecurityGroupsV1AsyncWithHttpInfo ();
        /// <summary>
        /// Get all available Security Groups
        /// </summary>
        /// <remarks>
        /// Operation to get IDs, names, and descriptions for all available Security Groups.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SecurityGroupV2Response</returns>
        System.Threading.Tasks.Task<SecurityGroupV2Response> SecurityGetSecurityGroupsV2Async ();

        /// <summary>
        /// Get all available Security Groups
        /// </summary>
        /// <remarks>
        /// Operation to get IDs, names, and descriptions for all available Security Groups.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SecurityGroupV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SecurityGroupV2Response>> SecurityGetSecurityGroupsV2AsyncWithHttpInfo ();
        /// <summary>
        /// Get all available Teams
        /// </summary>
        /// <remarks>
        /// Operation to get IDs and names for all available Teams.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TeamsResponse</returns>
        System.Threading.Tasks.Task<TeamsResponse> SecurityGetTeamsV1Async ();

        /// <summary>
        /// Get all available Teams
        /// </summary>
        /// <remarks>
        /// Operation to get IDs and names for all available Teams.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TeamsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamsResponse>> SecurityGetTeamsV1AsyncWithHttpInfo ();
        /// <summary>
        /// Get all available Teams
        /// </summary>
        /// <remarks>
        /// Operation to get IDs and names for all available Teams.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TeamsV2Response</returns>
        System.Threading.Tasks.Task<TeamsV2Response> SecurityGetTeamsV2Async ();

        /// <summary>
        /// Get all available Teams
        /// </summary>
        /// <remarks>
        /// Operation to get IDs and names for all available Teams.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TeamsV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamsV2Response>> SecurityGetTeamsV2AsyncWithHttpInfo ();
        /// <summary>
        /// Get user information in a batch
        /// </summary>
        /// <remarks>
        /// Operation to get user information in a batch. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object that lists user record IDs or public IDs of users and an error flag.</param>
        /// <returns>Task of UserBatchReadResponse</returns>
        System.Threading.Tasks.Task<UserBatchReadResponse> SecurityGetUserBatchV1Async (UserBatchReadRequest request);

        /// <summary>
        /// Get user information in a batch
        /// </summary>
        /// <remarks>
        /// Operation to get user information in a batch. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object that lists user record IDs or public IDs of users and an error flag.</param>
        /// <returns>Task of ApiResponse (UserBatchReadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserBatchReadResponse>> SecurityGetUserBatchV1AsyncWithHttpInfo (UserBatchReadRequest request);
        /// <summary>
        /// Get a user by login ID
        /// </summary>
        /// <remarks>
        /// Operation to get detailed user information by login ID. Use to get user record IDs and account settings, for example. This operation has been deprecated by a V2 operation of the same name, but with query string parameters.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginid">Specify the user&#39;s login ID.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> SecurityGetUserByLoginIdV1Async (string loginid);

        /// <summary>
        /// Get a user by login ID
        /// </summary>
        /// <remarks>
        /// Operation to get detailed user information by login ID. Use to get user record IDs and account settings, for example. This operation has been deprecated by a V2 operation of the same name, but with query string parameters.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginid">Specify the user&#39;s login ID.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> SecurityGetUserByLoginIdV1AsyncWithHttpInfo (string loginid);
        /// <summary>
        /// Get a user by login ID and login ID type
        /// </summary>
        /// <remarks>
        /// Operation to get detailed user information by login ID. Use to get user record IDs and account settings, for example.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginid">Specify the user&#39;s login ID.</param>
        /// <param name="loginidtype">Specify the login ID type.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> SecurityGetUserByLoginIdV2Async (string loginid, string loginidtype);

        /// <summary>
        /// Get a user by login ID and login ID type
        /// </summary>
        /// <remarks>
        /// Operation to get detailed user information by login ID. Use to get user record IDs and account settings, for example.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginid">Specify the user&#39;s login ID.</param>
        /// <param name="loginidtype">Specify the login ID type.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> SecurityGetUserByLoginIdV2AsyncWithHttpInfo (string loginid, string loginidtype);
        /// <summary>
        /// Get a user by login ID and login ID type
        /// </summary>
        /// <remarks>
        /// Operation to get detailed user information by login ID. Use to get user record IDs and account settings, for example.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginid">Specify the user&#39;s login ID.</param>
        /// <param name="loginidtype">Specify the login ID type.</param>
        /// <returns>Task of UserV2</returns>
        System.Threading.Tasks.Task<UserV2> SecurityGetUserByLoginIdV3Async (string loginid, string loginidtype);

        /// <summary>
        /// Get a user by login ID and login ID type
        /// </summary>
        /// <remarks>
        /// Operation to get detailed user information by login ID. Use to get user record IDs and account settings, for example.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginid">Specify the user&#39;s login ID.</param>
        /// <param name="loginidtype">Specify the login ID type.</param>
        /// <returns>Task of ApiResponse (UserV2)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserV2>> SecurityGetUserByLoginIdV3AsyncWithHttpInfo (string loginid, string loginidtype);
        /// <summary>
        /// Get a user by public ID
        /// </summary>
        /// <remarks>
        /// Operation to get a user by public ID. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicid">Specify the user&#39;s public ID.</param>
        /// <returns>Task of UserReadResponse</returns>
        System.Threading.Tasks.Task<UserReadResponse> SecurityGetUserByPublicIdV1Async (string publicid);

        /// <summary>
        /// Get a user by public ID
        /// </summary>
        /// <remarks>
        /// Operation to get a user by public ID. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicid">Specify the user&#39;s public ID.</param>
        /// <returns>Task of ApiResponse (UserReadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserReadResponse>> SecurityGetUserByPublicIdV1AsyncWithHttpInfo (string publicid);
        /// <summary>
        /// Get a user by public ID
        /// </summary>
        /// <remarks>
        /// Operation to get a user by public ID. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicid">Specify the user&#39;s public ID.</param>
        /// <returns>Task of UserReadV2Response</returns>
        System.Threading.Tasks.Task<UserReadV2Response> SecurityGetUserByPublicIdV2Async (string publicid);

        /// <summary>
        /// Get a user by public ID
        /// </summary>
        /// <remarks>
        /// Operation to get a user by public ID. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicid">Specify the user&#39;s public ID.</param>
        /// <returns>Task of ApiResponse (UserReadV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserReadV2Response>> SecurityGetUserByPublicIdV2AsyncWithHttpInfo (string publicid);
        /// <summary>
        /// Get users in a Security Group
        /// </summary>
        /// <remarks>
        /// Operation to get the users in a specified Security Group. Use \&quot;Get all available Security Groups\&quot; to get Security Group record IDs. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID.</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> SecurityGetUsersInSecurityGroupV1Async (string groupid);

        /// <summary>
        /// Get users in a Security Group
        /// </summary>
        /// <remarks>
        /// Operation to get the users in a specified Security Group. Use \&quot;Get all available Security Groups\&quot; to get Security Group record IDs. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID.</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> SecurityGetUsersInSecurityGroupV1AsyncWithHttpInfo (string groupid);
        /// <summary>
        /// Get users in a Security Group
        /// </summary>
        /// <remarks>
        /// Operation to get the users in a specified Security Group. Use \&quot;Get all available Security Groups\&quot; to get Security Group record IDs. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID.</param>
        /// <returns>Task of UserReadV2Response</returns>
        System.Threading.Tasks.Task<UserReadV2Response> SecurityGetUsersInSecurityGroupV2Async (string groupid);

        /// <summary>
        /// Get users in a Security Group
        /// </summary>
        /// <remarks>
        /// Operation to get the users in a specified Security Group. Use \&quot;Get all available Security Groups\&quot; to get Security Group record IDs. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID.</param>
        /// <returns>Task of ApiResponse (UserReadV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserReadV2Response>> SecurityGetUsersInSecurityGroupV2AsyncWithHttpInfo (string groupid);
        /// <summary>
        /// Get Team assignments for a user
        /// </summary>
        /// <remarks>
        /// Operation to get Team assignments for a user. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userRecordId">Specify the user record ID.</param>
        /// <returns>Task of TeamsResponse</returns>
        System.Threading.Tasks.Task<TeamsResponse> SecurityGetUsersTeamsV1Async (string userRecordId);

        /// <summary>
        /// Get Team assignments for a user
        /// </summary>
        /// <remarks>
        /// Operation to get Team assignments for a user. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userRecordId">Specify the user record ID.</param>
        /// <returns>Task of ApiResponse (TeamsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamsResponse>> SecurityGetUsersTeamsV1AsyncWithHttpInfo (string userRecordId);
        /// <summary>
        /// Get Team assignments for a user
        /// </summary>
        /// <remarks>
        /// Operation to get Team assignments for a user. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userRecordId">Specify the user record ID.</param>
        /// <returns>Task of TeamsV2Response</returns>
        System.Threading.Tasks.Task<TeamsV2Response> SecurityGetUsersTeamsV2Async (string userRecordId);

        /// <summary>
        /// Get Team assignments for a user
        /// </summary>
        /// <remarks>
        /// Operation to get Team assignments for a user. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userRecordId">Specify the user record ID.</param>
        /// <returns>Task of ApiResponse (TeamsV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamsV2Response>> SecurityGetUsersTeamsV2AsyncWithHttpInfo (string userRecordId);
        /// <summary>
        /// Get all available Workgroups
        /// </summary>
        /// <remarks>
        /// Operation to get IDs and names for all available Workgroups.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TeamsResponse</returns>
        System.Threading.Tasks.Task<TeamsResponse> SecurityGetWorkgroupsV1Async ();

        /// <summary>
        /// Get all available Workgroups
        /// </summary>
        /// <remarks>
        /// Operation to get IDs and names for all available Workgroups.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TeamsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamsResponse>> SecurityGetWorkgroupsV1AsyncWithHttpInfo ();
        /// <summary>
        /// Get all available Workgroups
        /// </summary>
        /// <remarks>
        /// Operation to get IDs and names for all available Workgroups.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TeamsV2Response</returns>
        System.Threading.Tasks.Task<TeamsV2Response> SecurityGetWorkgroupsV2Async ();

        /// <summary>
        /// Get all available Workgroups
        /// </summary>
        /// <remarks>
        /// Operation to get IDs and names for all available Workgroups.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TeamsV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamsV2Response>> SecurityGetWorkgroupsV2AsyncWithHttpInfo ();
        /// <summary>
        /// Remove a user from a team
        /// </summary>
        /// <remarks>
        /// Operation to remove a user from a Team. To get the user&#39;s record ID, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public ID.\&quot; To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Specify the internal ID of the Team you want to remove the user from</param>
        /// <param name="userrecordid">Specify the record ID of the user you want to remove from the Team.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SecurityRemoveUserFromTeamV1Async (string teamId, string userrecordid);

        /// <summary>
        /// Remove a user from a team
        /// </summary>
        /// <remarks>
        /// Operation to remove a user from a Team. To get the user&#39;s record ID, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public ID.\&quot; To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Specify the internal ID of the Team you want to remove the user from</param>
        /// <param name="userrecordid">Specify the record ID of the user you want to remove from the Team.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SecurityRemoveUserFromTeamV1AsyncWithHttpInfo (string teamId, string userrecordid);
        /// <summary>
        /// Remove a user from a team
        /// </summary>
        /// <remarks>
        /// Operation to remove a user from a Team. To get the user&#39;s record ID, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public ID.\&quot; To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Specify the internal ID of the Team you want to remove the user from</param>
        /// <param name="userrecordid">Specify the record ID of the user you want to remove from the Team.</param>
        /// <returns>Task of RemoveUserFromTeamResponse</returns>
        System.Threading.Tasks.Task<RemoveUserFromTeamResponse> SecurityRemoveUserFromTeamV2Async (string teamId, string userrecordid);

        /// <summary>
        /// Remove a user from a team
        /// </summary>
        /// <remarks>
        /// Operation to remove a user from a Team. To get the user&#39;s record ID, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public ID.\&quot; To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Specify the internal ID of the Team you want to remove the user from</param>
        /// <param name="userrecordid">Specify the record ID of the user you want to remove from the Team.</param>
        /// <returns>Task of ApiResponse (RemoveUserFromTeamResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoveUserFromTeamResponse>> SecurityRemoveUserFromTeamV2AsyncWithHttpInfo (string teamId, string userrecordid);
        /// <summary>
        /// Create or update a team
        /// </summary>
        /// <remarks>
        /// Operation to create or update a Team or Workgroup. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object to create Teams or Workgroups. To create a Team, use teamType and teamName. To update a team, use teamID. Team type values must be User or CustomerWorkgroup. The teamType cannot be changed for existing Teams or Workgroups.</param>
        /// <returns>Task of TeamSaveResponse</returns>
        System.Threading.Tasks.Task<TeamSaveResponse> SecuritySaveTeamV1Async (TeamSaveRequest request);

        /// <summary>
        /// Create or update a team
        /// </summary>
        /// <remarks>
        /// Operation to create or update a Team or Workgroup. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object to create Teams or Workgroups. To create a Team, use teamType and teamName. To update a team, use teamID. Team type values must be User or CustomerWorkgroup. The teamType cannot be changed for existing Teams or Workgroups.</param>
        /// <returns>Task of ApiResponse (TeamSaveResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamSaveResponse>> SecuritySaveTeamV1AsyncWithHttpInfo (TeamSaveRequest request);
        /// <summary>
        /// Create or update users in a batch
        /// </summary>
        /// <remarks>
        /// Operation to create or update users in a batch. To update, specify record ID. To create, leave record ID empty.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object listing user record IDs and an error flag.</param>
        /// <returns>Task of UserBatchSaveResponse</returns>
        System.Threading.Tasks.Task<UserBatchSaveResponse> SecuritySaveUserBatchV1Async (UserBatchSaveRequest request);

        /// <summary>
        /// Create or update users in a batch
        /// </summary>
        /// <remarks>
        /// Operation to create or update users in a batch. To update, specify record ID. To create, leave record ID empty.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object listing user record IDs and an error flag.</param>
        /// <returns>Task of ApiResponse (UserBatchSaveResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserBatchSaveResponse>> SecuritySaveUserBatchV1AsyncWithHttpInfo (UserBatchSaveRequest request);
        /// <summary>
        /// Create or update users in a batch
        /// </summary>
        /// <remarks>
        /// Operation to create or update users in a batch. To update, specify record ID. To create, leave record ID empty.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object listing user record IDs and an error flag.</param>
        /// <returns>Task of UserBatchSaveV2Response</returns>
        System.Threading.Tasks.Task<UserBatchSaveV2Response> SecuritySaveUserBatchV2Async (UserBatchSaveV2Request request);

        /// <summary>
        /// Create or update users in a batch
        /// </summary>
        /// <remarks>
        /// Operation to create or update users in a batch. To update, specify record ID. To create, leave record ID empty.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object listing user record IDs and an error flag.</param>
        /// <returns>Task of ApiResponse (UserBatchSaveV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserBatchSaveV2Response>> SecuritySaveUserBatchV2AsyncWithHttpInfo (UserBatchSaveV2Request request);
        /// <summary>
        /// Create or update a user
        /// </summary>
        /// <remarks>
        /// Operation to create or update a user.  The response is a collection because if you use a public ID, more than one user could be updated since public IDs may not be unique. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object to specify user parameters and fields with values to be created or updated. The loginId and either the busObRecId or busObPublicId are required.</param>
        /// <returns>Task of UserSaveResponse</returns>
        System.Threading.Tasks.Task<UserSaveResponse> SecuritySaveUserV1Async (UserSaveRequest request);

        /// <summary>
        /// Create or update a user
        /// </summary>
        /// <remarks>
        /// Operation to create or update a user.  The response is a collection because if you use a public ID, more than one user could be updated since public IDs may not be unique. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object to specify user parameters and fields with values to be created or updated. The loginId and either the busObRecId or busObPublicId are required.</param>
        /// <returns>Task of ApiResponse (UserSaveResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserSaveResponse>> SecuritySaveUserV1AsyncWithHttpInfo (UserSaveRequest request);
        /// <summary>
        /// Create or update a user
        /// </summary>
        /// <remarks>
        /// Operation to create or update a user.  The response is a collection because if you use a public ID, more than one user could be updated since public IDs may not be unique. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object to specify user parameters and fields with values to be created or updated. The loginId and either the busObRecId or busObPublicId are required.</param>
        /// <returns>Task of UserSaveV2Response</returns>
        System.Threading.Tasks.Task<UserSaveV2Response> SecuritySaveUserV2Async (UserSaveV2Request request);

        /// <summary>
        /// Create or update a user
        /// </summary>
        /// <remarks>
        /// Operation to create or update a user.  The response is a collection because if you use a public ID, more than one user could be updated since public IDs may not be unique. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object to specify user parameters and fields with values to be created or updated. The loginId and either the busObRecId or busObPublicId are required.</param>
        /// <returns>Task of ApiResponse (UserSaveV2Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserSaveV2Response>> SecuritySaveUserV2AsyncWithHttpInfo (UserSaveV2Request request);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SecurityApi : ISecurityApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SecurityApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SecurityApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add users to a team by batch Operation to add users to a Team by batch. To get internal IDs for users, use “Get User Information in a Batch.” To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object to specify a list of add user to team request objects.</param>
        /// <returns>AddUserToTeamByBatchResponse</returns>
        public AddUserToTeamByBatchResponse SecurityAddUserToTeamByBatchV1 (AddUserToTeamByBatchRequest request)
        {
             ApiResponse<AddUserToTeamByBatchResponse> localVarResponse = SecurityAddUserToTeamByBatchV1WithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add users to a team by batch Operation to add users to a Team by batch. To get internal IDs for users, use “Get User Information in a Batch.” To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object to specify a list of add user to team request objects.</param>
        /// <returns>ApiResponse of AddUserToTeamByBatchResponse</returns>
        public ApiResponse< AddUserToTeamByBatchResponse > SecurityAddUserToTeamByBatchV1WithHttpInfo (AddUserToTeamByBatchRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling SecurityApi->SecurityAddUserToTeamByBatchV1");

            var localVarPath = "/api/V1/addusertoteambybatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityAddUserToTeamByBatchV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddUserToTeamByBatchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddUserToTeamByBatchResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddUserToTeamByBatchResponse)));
        }

        /// <summary>
        /// Add users to a team by batch Operation to add users to a Team by batch. To get internal IDs for users, use “Get User Information in a Batch.” To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object to specify a list of add user to team request objects.</param>
        /// <returns>Task of AddUserToTeamByBatchResponse</returns>
        public async System.Threading.Tasks.Task<AddUserToTeamByBatchResponse> SecurityAddUserToTeamByBatchV1Async (AddUserToTeamByBatchRequest request)
        {
             ApiResponse<AddUserToTeamByBatchResponse> localVarResponse = await SecurityAddUserToTeamByBatchV1AsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add users to a team by batch Operation to add users to a Team by batch. To get internal IDs for users, use “Get User Information in a Batch.” To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object to specify a list of add user to team request objects.</param>
        /// <returns>Task of ApiResponse (AddUserToTeamByBatchResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddUserToTeamByBatchResponse>> SecurityAddUserToTeamByBatchV1AsyncWithHttpInfo (AddUserToTeamByBatchRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling SecurityApi->SecurityAddUserToTeamByBatchV1");

            var localVarPath = "/api/V1/addusertoteambybatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityAddUserToTeamByBatchV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddUserToTeamByBatchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddUserToTeamByBatchResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddUserToTeamByBatchResponse)));
        }

        /// <summary>
        /// Add a user to a team Operation to add a user to a Team. To get the user&#39;s internal ID, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public ID.\&quot; To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequest">Request object to specify user and team values.</param>
        /// <returns></returns>
        public void SecurityAddUserToTeamV1 (AddUserToTeamRequest dataRequest)
        {
             SecurityAddUserToTeamV1WithHttpInfo(dataRequest);
        }

        /// <summary>
        /// Add a user to a team Operation to add a user to a Team. To get the user&#39;s internal ID, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public ID.\&quot; To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequest">Request object to specify user and team values.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SecurityAddUserToTeamV1WithHttpInfo (AddUserToTeamRequest dataRequest)
        {
            // verify the required parameter 'dataRequest' is set
            if (dataRequest == null)
                throw new ApiException(400, "Missing required parameter 'dataRequest' when calling SecurityApi->SecurityAddUserToTeamV1");

            var localVarPath = "/api/V1/addusertoteam";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataRequest != null && dataRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(dataRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dataRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityAddUserToTeamV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add a user to a team Operation to add a user to a Team. To get the user&#39;s internal ID, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public ID.\&quot; To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequest">Request object to specify user and team values.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SecurityAddUserToTeamV1Async (AddUserToTeamRequest dataRequest)
        {
             await SecurityAddUserToTeamV1AsyncWithHttpInfo(dataRequest);

        }

        /// <summary>
        /// Add a user to a team Operation to add a user to a Team. To get the user&#39;s internal ID, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public ID.\&quot; To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequest">Request object to specify user and team values.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SecurityAddUserToTeamV1AsyncWithHttpInfo (AddUserToTeamRequest dataRequest)
        {
            // verify the required parameter 'dataRequest' is set
            if (dataRequest == null)
                throw new ApiException(400, "Missing required parameter 'dataRequest' when calling SecurityApi->SecurityAddUserToTeamV1");

            var localVarPath = "/api/V1/addusertoteam";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataRequest != null && dataRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(dataRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dataRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityAddUserToTeamV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Add a user to a team Operation to add a user to a Team. To get the user&#39;s internal ID, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public ID.\&quot; To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequest">Request object to specify user and team values.</param>
        /// <returns>AddUserToTeamResponse</returns>
        public AddUserToTeamResponse SecurityAddUserToTeamV2 (AddUserToTeamRequest dataRequest)
        {
             ApiResponse<AddUserToTeamResponse> localVarResponse = SecurityAddUserToTeamV2WithHttpInfo(dataRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a user to a team Operation to add a user to a Team. To get the user&#39;s internal ID, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public ID.\&quot; To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequest">Request object to specify user and team values.</param>
        /// <returns>ApiResponse of AddUserToTeamResponse</returns>
        public ApiResponse< AddUserToTeamResponse > SecurityAddUserToTeamV2WithHttpInfo (AddUserToTeamRequest dataRequest)
        {
            // verify the required parameter 'dataRequest' is set
            if (dataRequest == null)
                throw new ApiException(400, "Missing required parameter 'dataRequest' when calling SecurityApi->SecurityAddUserToTeamV2");

            var localVarPath = "/api/V2/addusertoteam";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataRequest != null && dataRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(dataRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dataRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityAddUserToTeamV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddUserToTeamResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddUserToTeamResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddUserToTeamResponse)));
        }

        /// <summary>
        /// Add a user to a team Operation to add a user to a Team. To get the user&#39;s internal ID, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public ID.\&quot; To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequest">Request object to specify user and team values.</param>
        /// <returns>Task of AddUserToTeamResponse</returns>
        public async System.Threading.Tasks.Task<AddUserToTeamResponse> SecurityAddUserToTeamV2Async (AddUserToTeamRequest dataRequest)
        {
             ApiResponse<AddUserToTeamResponse> localVarResponse = await SecurityAddUserToTeamV2AsyncWithHttpInfo(dataRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a user to a team Operation to add a user to a Team. To get the user&#39;s internal ID, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public ID.\&quot; To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataRequest">Request object to specify user and team values.</param>
        /// <returns>Task of ApiResponse (AddUserToTeamResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddUserToTeamResponse>> SecurityAddUserToTeamV2AsyncWithHttpInfo (AddUserToTeamRequest dataRequest)
        {
            // verify the required parameter 'dataRequest' is set
            if (dataRequest == null)
                throw new ApiException(400, "Missing required parameter 'dataRequest' when calling SecurityApi->SecurityAddUserToTeamV2");

            var localVarPath = "/api/V2/addusertoteam";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataRequest != null && dataRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(dataRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = dataRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityAddUserToTeamV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddUserToTeamResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddUserToTeamResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddUserToTeamResponse)));
        }

        /// <summary>
        /// Delete a batch of users Operation to delete a batch of users. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object listing record IDs for users to be deleted and an error flag.</param>
        /// <returns>UserBatchDeleteResponse</returns>
        public UserBatchDeleteResponse SecurityDeleteUserBatchV1 (UserBatchDeleteRequest request)
        {
             ApiResponse<UserBatchDeleteResponse> localVarResponse = SecurityDeleteUserBatchV1WithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a batch of users Operation to delete a batch of users. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object listing record IDs for users to be deleted and an error flag.</param>
        /// <returns>ApiResponse of UserBatchDeleteResponse</returns>
        public ApiResponse< UserBatchDeleteResponse > SecurityDeleteUserBatchV1WithHttpInfo (UserBatchDeleteRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling SecurityApi->SecurityDeleteUserBatchV1");

            var localVarPath = "/api/V1/deleteuserbatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityDeleteUserBatchV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserBatchDeleteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserBatchDeleteResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserBatchDeleteResponse)));
        }

        /// <summary>
        /// Delete a batch of users Operation to delete a batch of users. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object listing record IDs for users to be deleted and an error flag.</param>
        /// <returns>Task of UserBatchDeleteResponse</returns>
        public async System.Threading.Tasks.Task<UserBatchDeleteResponse> SecurityDeleteUserBatchV1Async (UserBatchDeleteRequest request)
        {
             ApiResponse<UserBatchDeleteResponse> localVarResponse = await SecurityDeleteUserBatchV1AsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a batch of users Operation to delete a batch of users. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object listing record IDs for users to be deleted and an error flag.</param>
        /// <returns>Task of ApiResponse (UserBatchDeleteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserBatchDeleteResponse>> SecurityDeleteUserBatchV1AsyncWithHttpInfo (UserBatchDeleteRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling SecurityApi->SecurityDeleteUserBatchV1");

            var localVarPath = "/api/V1/deleteuserbatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityDeleteUserBatchV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserBatchDeleteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserBatchDeleteResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserBatchDeleteResponse)));
        }

        /// <summary>
        /// Delete a batch of users Operation to delete a batch of users. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object listing record IDs for users to be deleted and an error flag.</param>
        /// <returns>UserBatchDeleteV2Response</returns>
        public UserBatchDeleteV2Response SecurityDeleteUserBatchV2 (UserBatchDeleteRequest request)
        {
             ApiResponse<UserBatchDeleteV2Response> localVarResponse = SecurityDeleteUserBatchV2WithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a batch of users Operation to delete a batch of users. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object listing record IDs for users to be deleted and an error flag.</param>
        /// <returns>ApiResponse of UserBatchDeleteV2Response</returns>
        public ApiResponse< UserBatchDeleteV2Response > SecurityDeleteUserBatchV2WithHttpInfo (UserBatchDeleteRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling SecurityApi->SecurityDeleteUserBatchV2");

            var localVarPath = "/api/V2/deleteuserbatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityDeleteUserBatchV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserBatchDeleteV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserBatchDeleteV2Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserBatchDeleteV2Response)));
        }

        /// <summary>
        /// Delete a batch of users Operation to delete a batch of users. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object listing record IDs for users to be deleted and an error flag.</param>
        /// <returns>Task of UserBatchDeleteV2Response</returns>
        public async System.Threading.Tasks.Task<UserBatchDeleteV2Response> SecurityDeleteUserBatchV2Async (UserBatchDeleteRequest request)
        {
             ApiResponse<UserBatchDeleteV2Response> localVarResponse = await SecurityDeleteUserBatchV2AsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a batch of users Operation to delete a batch of users. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object listing record IDs for users to be deleted and an error flag.</param>
        /// <returns>Task of ApiResponse (UserBatchDeleteV2Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserBatchDeleteV2Response>> SecurityDeleteUserBatchV2AsyncWithHttpInfo (UserBatchDeleteRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling SecurityApi->SecurityDeleteUserBatchV2");

            var localVarPath = "/api/V2/deleteuserbatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityDeleteUserBatchV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserBatchDeleteV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserBatchDeleteV2Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserBatchDeleteV2Response)));
        }

        /// <summary>
        /// Delete a user by record ID Operation to delete a user by record ID. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userrecordid">Specify the record ID of the user you want to delete</param>
        /// <returns>UserDeleteResponse</returns>
        public UserDeleteResponse SecurityDeleteUserV1 (string userrecordid)
        {
             ApiResponse<UserDeleteResponse> localVarResponse = SecurityDeleteUserV1WithHttpInfo(userrecordid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a user by record ID Operation to delete a user by record ID. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userrecordid">Specify the record ID of the user you want to delete</param>
        /// <returns>ApiResponse of UserDeleteResponse</returns>
        public ApiResponse< UserDeleteResponse > SecurityDeleteUserV1WithHttpInfo (string userrecordid)
        {
            // verify the required parameter 'userrecordid' is set
            if (userrecordid == null)
                throw new ApiException(400, "Missing required parameter 'userrecordid' when calling SecurityApi->SecurityDeleteUserV1");

            var localVarPath = "/api/V1/deleteuser/userrecordid/{userrecordid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userrecordid != null) localVarPathParams.Add("userrecordid", Configuration.ApiClient.ParameterToString(userrecordid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityDeleteUserV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserDeleteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserDeleteResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserDeleteResponse)));
        }

        /// <summary>
        /// Delete a user by record ID Operation to delete a user by record ID. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userrecordid">Specify the record ID of the user you want to delete</param>
        /// <returns>Task of UserDeleteResponse</returns>
        public async System.Threading.Tasks.Task<UserDeleteResponse> SecurityDeleteUserV1Async (string userrecordid)
        {
             ApiResponse<UserDeleteResponse> localVarResponse = await SecurityDeleteUserV1AsyncWithHttpInfo(userrecordid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a user by record ID Operation to delete a user by record ID. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userrecordid">Specify the record ID of the user you want to delete</param>
        /// <returns>Task of ApiResponse (UserDeleteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserDeleteResponse>> SecurityDeleteUserV1AsyncWithHttpInfo (string userrecordid)
        {
            // verify the required parameter 'userrecordid' is set
            if (userrecordid == null)
                throw new ApiException(400, "Missing required parameter 'userrecordid' when calling SecurityApi->SecurityDeleteUserV1");

            var localVarPath = "/api/V1/deleteuser/userrecordid/{userrecordid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userrecordid != null) localVarPathParams.Add("userrecordid", Configuration.ApiClient.ParameterToString(userrecordid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityDeleteUserV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserDeleteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserDeleteResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserDeleteResponse)));
        }

        /// <summary>
        /// Delete a user by record ID Operation to delete a user by record ID. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userrecordid">Specify the record ID of the user you want to delete</param>
        /// <returns>UserDeleteV2Response</returns>
        public UserDeleteV2Response SecurityDeleteUserV2 (string userrecordid)
        {
             ApiResponse<UserDeleteV2Response> localVarResponse = SecurityDeleteUserV2WithHttpInfo(userrecordid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a user by record ID Operation to delete a user by record ID. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userrecordid">Specify the record ID of the user you want to delete</param>
        /// <returns>ApiResponse of UserDeleteV2Response</returns>
        public ApiResponse< UserDeleteV2Response > SecurityDeleteUserV2WithHttpInfo (string userrecordid)
        {
            // verify the required parameter 'userrecordid' is set
            if (userrecordid == null)
                throw new ApiException(400, "Missing required parameter 'userrecordid' when calling SecurityApi->SecurityDeleteUserV2");

            var localVarPath = "/api/V2/deleteuser/userrecordid/{userrecordid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userrecordid != null) localVarPathParams.Add("userrecordid", Configuration.ApiClient.ParameterToString(userrecordid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityDeleteUserV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserDeleteV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserDeleteV2Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserDeleteV2Response)));
        }

        /// <summary>
        /// Delete a user by record ID Operation to delete a user by record ID. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userrecordid">Specify the record ID of the user you want to delete</param>
        /// <returns>Task of UserDeleteV2Response</returns>
        public async System.Threading.Tasks.Task<UserDeleteV2Response> SecurityDeleteUserV2Async (string userrecordid)
        {
             ApiResponse<UserDeleteV2Response> localVarResponse = await SecurityDeleteUserV2AsyncWithHttpInfo(userrecordid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a user by record ID Operation to delete a user by record ID. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userrecordid">Specify the record ID of the user you want to delete</param>
        /// <returns>Task of ApiResponse (UserDeleteV2Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserDeleteV2Response>> SecurityDeleteUserV2AsyncWithHttpInfo (string userrecordid)
        {
            // verify the required parameter 'userrecordid' is set
            if (userrecordid == null)
                throw new ApiException(400, "Missing required parameter 'userrecordid' when calling SecurityApi->SecurityDeleteUserV2");

            var localVarPath = "/api/V2/deleteuser/userrecordid/{userrecordid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userrecordid != null) localVarPathParams.Add("userrecordid", Configuration.ApiClient.ParameterToString(userrecordid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityDeleteUserV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserDeleteV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserDeleteV2Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserDeleteV2Response)));
        }

        /// <summary>
        /// Get all available Roles Operation to get all available Roles.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RoleReadResponse</returns>
        public RoleReadResponse SecurityGetRolesV1 ()
        {
             ApiResponse<RoleReadResponse> localVarResponse = SecurityGetRolesV1WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all available Roles Operation to get all available Roles.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RoleReadResponse</returns>
        public ApiResponse< RoleReadResponse > SecurityGetRolesV1WithHttpInfo ()
        {

            var localVarPath = "/api/V1/getroles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetRolesV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RoleReadResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RoleReadResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RoleReadResponse)));
        }

        /// <summary>
        /// Get all available Roles Operation to get all available Roles.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of RoleReadResponse</returns>
        public async System.Threading.Tasks.Task<RoleReadResponse> SecurityGetRolesV1Async ()
        {
             ApiResponse<RoleReadResponse> localVarResponse = await SecurityGetRolesV1AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all available Roles Operation to get all available Roles.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (RoleReadResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RoleReadResponse>> SecurityGetRolesV1AsyncWithHttpInfo ()
        {

            var localVarPath = "/api/V1/getroles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetRolesV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RoleReadResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RoleReadResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RoleReadResponse)));
        }

        /// <summary>
        /// Get all available Roles Operation to get all available Roles.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RoleReadV2Response</returns>
        public RoleReadV2Response SecurityGetRolesV2 ()
        {
             ApiResponse<RoleReadV2Response> localVarResponse = SecurityGetRolesV2WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all available Roles Operation to get all available Roles.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RoleReadV2Response</returns>
        public ApiResponse< RoleReadV2Response > SecurityGetRolesV2WithHttpInfo ()
        {

            var localVarPath = "/api/V2/getroles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetRolesV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RoleReadV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RoleReadV2Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RoleReadV2Response)));
        }

        /// <summary>
        /// Get all available Roles Operation to get all available Roles.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of RoleReadV2Response</returns>
        public async System.Threading.Tasks.Task<RoleReadV2Response> SecurityGetRolesV2Async ()
        {
             ApiResponse<RoleReadV2Response> localVarResponse = await SecurityGetRolesV2AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all available Roles Operation to get all available Roles.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (RoleReadV2Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RoleReadV2Response>> SecurityGetRolesV2AsyncWithHttpInfo ()
        {

            var localVarPath = "/api/V2/getroles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetRolesV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RoleReadV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RoleReadV2Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RoleReadV2Response)));
        }

        /// <summary>
        /// Get Business Object permissions by Security Group Operation to get specific Business Object permissions for a Security Group. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID. </param>
        /// <param name="busObId">Specify the Business Object ID.</param>
        /// <returns>List&lt;BusinessObjectPermission&gt;</returns>
        public List<BusinessObjectPermission> SecurityGetSecurityGroupBusinessObjectPermissionsByBusObIdV1 (string groupid, string busObId)
        {
             ApiResponse<List<BusinessObjectPermission>> localVarResponse = SecurityGetSecurityGroupBusinessObjectPermissionsByBusObIdV1WithHttpInfo(groupid, busObId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Business Object permissions by Security Group Operation to get specific Business Object permissions for a Security Group. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID. </param>
        /// <param name="busObId">Specify the Business Object ID.</param>
        /// <returns>ApiResponse of List&lt;BusinessObjectPermission&gt;</returns>
        public ApiResponse< List<BusinessObjectPermission> > SecurityGetSecurityGroupBusinessObjectPermissionsByBusObIdV1WithHttpInfo (string groupid, string busObId)
        {
            // verify the required parameter 'groupid' is set
            if (groupid == null)
                throw new ApiException(400, "Missing required parameter 'groupid' when calling SecurityApi->SecurityGetSecurityGroupBusinessObjectPermissionsByBusObIdV1");
            // verify the required parameter 'busObId' is set
            if (busObId == null)
                throw new ApiException(400, "Missing required parameter 'busObId' when calling SecurityApi->SecurityGetSecurityGroupBusinessObjectPermissionsByBusObIdV1");

            var localVarPath = "/api/V1/getsecuritygroupbusinessobjectpermissions/groupid/{groupid}/busobid/{busObId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupid != null) localVarPathParams.Add("groupid", Configuration.ApiClient.ParameterToString(groupid)); // path parameter
            if (busObId != null) localVarPathParams.Add("busObId", Configuration.ApiClient.ParameterToString(busObId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetSecurityGroupBusinessObjectPermissionsByBusObIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BusinessObjectPermission>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BusinessObjectPermission>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BusinessObjectPermission>)));
        }

        /// <summary>
        /// Get Business Object permissions by Security Group Operation to get specific Business Object permissions for a Security Group. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID. </param>
        /// <param name="busObId">Specify the Business Object ID.</param>
        /// <returns>Task of List&lt;BusinessObjectPermission&gt;</returns>
        public async System.Threading.Tasks.Task<List<BusinessObjectPermission>> SecurityGetSecurityGroupBusinessObjectPermissionsByBusObIdV1Async (string groupid, string busObId)
        {
             ApiResponse<List<BusinessObjectPermission>> localVarResponse = await SecurityGetSecurityGroupBusinessObjectPermissionsByBusObIdV1AsyncWithHttpInfo(groupid, busObId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Business Object permissions by Security Group Operation to get specific Business Object permissions for a Security Group. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID. </param>
        /// <param name="busObId">Specify the Business Object ID.</param>
        /// <returns>Task of ApiResponse (List&lt;BusinessObjectPermission&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BusinessObjectPermission>>> SecurityGetSecurityGroupBusinessObjectPermissionsByBusObIdV1AsyncWithHttpInfo (string groupid, string busObId)
        {
            // verify the required parameter 'groupid' is set
            if (groupid == null)
                throw new ApiException(400, "Missing required parameter 'groupid' when calling SecurityApi->SecurityGetSecurityGroupBusinessObjectPermissionsByBusObIdV1");
            // verify the required parameter 'busObId' is set
            if (busObId == null)
                throw new ApiException(400, "Missing required parameter 'busObId' when calling SecurityApi->SecurityGetSecurityGroupBusinessObjectPermissionsByBusObIdV1");

            var localVarPath = "/api/V1/getsecuritygroupbusinessobjectpermissions/groupid/{groupid}/busobid/{busObId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupid != null) localVarPathParams.Add("groupid", Configuration.ApiClient.ParameterToString(groupid)); // path parameter
            if (busObId != null) localVarPathParams.Add("busObId", Configuration.ApiClient.ParameterToString(busObId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetSecurityGroupBusinessObjectPermissionsByBusObIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BusinessObjectPermission>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BusinessObjectPermission>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BusinessObjectPermission>)));
        }

        /// <summary>
        /// Get Business Object permissions by Security Group Operation to get specific Business Object permissions for a Security Group. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID. </param>
        /// <param name="busObId">Specify the Business Object ID.</param>
        /// <returns>GetSecurityGroupBusinessObjectPermissionsResponse</returns>
        public GetSecurityGroupBusinessObjectPermissionsResponse SecurityGetSecurityGroupBusinessObjectPermissionsByBusObIdV2 (string groupid, string busObId)
        {
             ApiResponse<GetSecurityGroupBusinessObjectPermissionsResponse> localVarResponse = SecurityGetSecurityGroupBusinessObjectPermissionsByBusObIdV2WithHttpInfo(groupid, busObId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Business Object permissions by Security Group Operation to get specific Business Object permissions for a Security Group. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID. </param>
        /// <param name="busObId">Specify the Business Object ID.</param>
        /// <returns>ApiResponse of GetSecurityGroupBusinessObjectPermissionsResponse</returns>
        public ApiResponse< GetSecurityGroupBusinessObjectPermissionsResponse > SecurityGetSecurityGroupBusinessObjectPermissionsByBusObIdV2WithHttpInfo (string groupid, string busObId)
        {
            // verify the required parameter 'groupid' is set
            if (groupid == null)
                throw new ApiException(400, "Missing required parameter 'groupid' when calling SecurityApi->SecurityGetSecurityGroupBusinessObjectPermissionsByBusObIdV2");
            // verify the required parameter 'busObId' is set
            if (busObId == null)
                throw new ApiException(400, "Missing required parameter 'busObId' when calling SecurityApi->SecurityGetSecurityGroupBusinessObjectPermissionsByBusObIdV2");

            var localVarPath = "/api/V2/getsecuritygroupbusinessobjectpermissions/groupid/{groupid}/busobid/{busObId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupid != null) localVarPathParams.Add("groupid", Configuration.ApiClient.ParameterToString(groupid)); // path parameter
            if (busObId != null) localVarPathParams.Add("busObId", Configuration.ApiClient.ParameterToString(busObId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetSecurityGroupBusinessObjectPermissionsByBusObIdV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSecurityGroupBusinessObjectPermissionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSecurityGroupBusinessObjectPermissionsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSecurityGroupBusinessObjectPermissionsResponse)));
        }

        /// <summary>
        /// Get Business Object permissions by Security Group Operation to get specific Business Object permissions for a Security Group. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID. </param>
        /// <param name="busObId">Specify the Business Object ID.</param>
        /// <returns>Task of GetSecurityGroupBusinessObjectPermissionsResponse</returns>
        public async System.Threading.Tasks.Task<GetSecurityGroupBusinessObjectPermissionsResponse> SecurityGetSecurityGroupBusinessObjectPermissionsByBusObIdV2Async (string groupid, string busObId)
        {
             ApiResponse<GetSecurityGroupBusinessObjectPermissionsResponse> localVarResponse = await SecurityGetSecurityGroupBusinessObjectPermissionsByBusObIdV2AsyncWithHttpInfo(groupid, busObId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Business Object permissions by Security Group Operation to get specific Business Object permissions for a Security Group. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID. </param>
        /// <param name="busObId">Specify the Business Object ID.</param>
        /// <returns>Task of ApiResponse (GetSecurityGroupBusinessObjectPermissionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSecurityGroupBusinessObjectPermissionsResponse>> SecurityGetSecurityGroupBusinessObjectPermissionsByBusObIdV2AsyncWithHttpInfo (string groupid, string busObId)
        {
            // verify the required parameter 'groupid' is set
            if (groupid == null)
                throw new ApiException(400, "Missing required parameter 'groupid' when calling SecurityApi->SecurityGetSecurityGroupBusinessObjectPermissionsByBusObIdV2");
            // verify the required parameter 'busObId' is set
            if (busObId == null)
                throw new ApiException(400, "Missing required parameter 'busObId' when calling SecurityApi->SecurityGetSecurityGroupBusinessObjectPermissionsByBusObIdV2");

            var localVarPath = "/api/V2/getsecuritygroupbusinessobjectpermissions/groupid/{groupid}/busobid/{busObId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupid != null) localVarPathParams.Add("groupid", Configuration.ApiClient.ParameterToString(groupid)); // path parameter
            if (busObId != null) localVarPathParams.Add("busObId", Configuration.ApiClient.ParameterToString(busObId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetSecurityGroupBusinessObjectPermissionsByBusObIdV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSecurityGroupBusinessObjectPermissionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSecurityGroupBusinessObjectPermissionsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSecurityGroupBusinessObjectPermissionsResponse)));
        }

        /// <summary>
        /// Get Business Object permissions by Security Group Operation to get specific Business Object permissions for a Security Group. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupname">Specify the Security Group name. </param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <returns>List&lt;BusinessObjectPermission&gt;</returns>
        public List<BusinessObjectPermission> SecurityGetSecurityGroupBusinessObjectPermissionsByBusObNameV1 (string groupname, string busobname)
        {
             ApiResponse<List<BusinessObjectPermission>> localVarResponse = SecurityGetSecurityGroupBusinessObjectPermissionsByBusObNameV1WithHttpInfo(groupname, busobname);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Business Object permissions by Security Group Operation to get specific Business Object permissions for a Security Group. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupname">Specify the Security Group name. </param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <returns>ApiResponse of List&lt;BusinessObjectPermission&gt;</returns>
        public ApiResponse< List<BusinessObjectPermission> > SecurityGetSecurityGroupBusinessObjectPermissionsByBusObNameV1WithHttpInfo (string groupname, string busobname)
        {
            // verify the required parameter 'groupname' is set
            if (groupname == null)
                throw new ApiException(400, "Missing required parameter 'groupname' when calling SecurityApi->SecurityGetSecurityGroupBusinessObjectPermissionsByBusObNameV1");
            // verify the required parameter 'busobname' is set
            if (busobname == null)
                throw new ApiException(400, "Missing required parameter 'busobname' when calling SecurityApi->SecurityGetSecurityGroupBusinessObjectPermissionsByBusObNameV1");

            var localVarPath = "/api/V1/getsecuritygroupbusinessobjectpermissions/groupname/{groupname}/busobname/{busobname}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupname != null) localVarPathParams.Add("groupname", Configuration.ApiClient.ParameterToString(groupname)); // path parameter
            if (busobname != null) localVarPathParams.Add("busobname", Configuration.ApiClient.ParameterToString(busobname)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetSecurityGroupBusinessObjectPermissionsByBusObNameV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BusinessObjectPermission>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BusinessObjectPermission>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BusinessObjectPermission>)));
        }

        /// <summary>
        /// Get Business Object permissions by Security Group Operation to get specific Business Object permissions for a Security Group. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupname">Specify the Security Group name. </param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <returns>Task of List&lt;BusinessObjectPermission&gt;</returns>
        public async System.Threading.Tasks.Task<List<BusinessObjectPermission>> SecurityGetSecurityGroupBusinessObjectPermissionsByBusObNameV1Async (string groupname, string busobname)
        {
             ApiResponse<List<BusinessObjectPermission>> localVarResponse = await SecurityGetSecurityGroupBusinessObjectPermissionsByBusObNameV1AsyncWithHttpInfo(groupname, busobname);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Business Object permissions by Security Group Operation to get specific Business Object permissions for a Security Group. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupname">Specify the Security Group name. </param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <returns>Task of ApiResponse (List&lt;BusinessObjectPermission&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BusinessObjectPermission>>> SecurityGetSecurityGroupBusinessObjectPermissionsByBusObNameV1AsyncWithHttpInfo (string groupname, string busobname)
        {
            // verify the required parameter 'groupname' is set
            if (groupname == null)
                throw new ApiException(400, "Missing required parameter 'groupname' when calling SecurityApi->SecurityGetSecurityGroupBusinessObjectPermissionsByBusObNameV1");
            // verify the required parameter 'busobname' is set
            if (busobname == null)
                throw new ApiException(400, "Missing required parameter 'busobname' when calling SecurityApi->SecurityGetSecurityGroupBusinessObjectPermissionsByBusObNameV1");

            var localVarPath = "/api/V1/getsecuritygroupbusinessobjectpermissions/groupname/{groupname}/busobname/{busobname}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupname != null) localVarPathParams.Add("groupname", Configuration.ApiClient.ParameterToString(groupname)); // path parameter
            if (busobname != null) localVarPathParams.Add("busobname", Configuration.ApiClient.ParameterToString(busobname)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetSecurityGroupBusinessObjectPermissionsByBusObNameV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BusinessObjectPermission>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BusinessObjectPermission>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BusinessObjectPermission>)));
        }

        /// <summary>
        /// Get Business Object permissions by Security Group Operation to get specific Business Object permissions for a Security Group. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupname">Specify the Security Group name. </param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <returns>GetSecurityGroupBusinessObjectPermissionsResponse</returns>
        public GetSecurityGroupBusinessObjectPermissionsResponse SecurityGetSecurityGroupBusinessObjectPermissionsByBusObNameV2 (string groupname, string busobname)
        {
             ApiResponse<GetSecurityGroupBusinessObjectPermissionsResponse> localVarResponse = SecurityGetSecurityGroupBusinessObjectPermissionsByBusObNameV2WithHttpInfo(groupname, busobname);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Business Object permissions by Security Group Operation to get specific Business Object permissions for a Security Group. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupname">Specify the Security Group name. </param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <returns>ApiResponse of GetSecurityGroupBusinessObjectPermissionsResponse</returns>
        public ApiResponse< GetSecurityGroupBusinessObjectPermissionsResponse > SecurityGetSecurityGroupBusinessObjectPermissionsByBusObNameV2WithHttpInfo (string groupname, string busobname)
        {
            // verify the required parameter 'groupname' is set
            if (groupname == null)
                throw new ApiException(400, "Missing required parameter 'groupname' when calling SecurityApi->SecurityGetSecurityGroupBusinessObjectPermissionsByBusObNameV2");
            // verify the required parameter 'busobname' is set
            if (busobname == null)
                throw new ApiException(400, "Missing required parameter 'busobname' when calling SecurityApi->SecurityGetSecurityGroupBusinessObjectPermissionsByBusObNameV2");

            var localVarPath = "/api/V2/getsecuritygroupbusinessobjectpermissions/groupname/{groupname}/busobname/{busobname}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupname != null) localVarPathParams.Add("groupname", Configuration.ApiClient.ParameterToString(groupname)); // path parameter
            if (busobname != null) localVarPathParams.Add("busobname", Configuration.ApiClient.ParameterToString(busobname)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetSecurityGroupBusinessObjectPermissionsByBusObNameV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSecurityGroupBusinessObjectPermissionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSecurityGroupBusinessObjectPermissionsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSecurityGroupBusinessObjectPermissionsResponse)));
        }

        /// <summary>
        /// Get Business Object permissions by Security Group Operation to get specific Business Object permissions for a Security Group. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupname">Specify the Security Group name. </param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <returns>Task of GetSecurityGroupBusinessObjectPermissionsResponse</returns>
        public async System.Threading.Tasks.Task<GetSecurityGroupBusinessObjectPermissionsResponse> SecurityGetSecurityGroupBusinessObjectPermissionsByBusObNameV2Async (string groupname, string busobname)
        {
             ApiResponse<GetSecurityGroupBusinessObjectPermissionsResponse> localVarResponse = await SecurityGetSecurityGroupBusinessObjectPermissionsByBusObNameV2AsyncWithHttpInfo(groupname, busobname);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Business Object permissions by Security Group Operation to get specific Business Object permissions for a Security Group. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupname">Specify the Security Group name. </param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <returns>Task of ApiResponse (GetSecurityGroupBusinessObjectPermissionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSecurityGroupBusinessObjectPermissionsResponse>> SecurityGetSecurityGroupBusinessObjectPermissionsByBusObNameV2AsyncWithHttpInfo (string groupname, string busobname)
        {
            // verify the required parameter 'groupname' is set
            if (groupname == null)
                throw new ApiException(400, "Missing required parameter 'groupname' when calling SecurityApi->SecurityGetSecurityGroupBusinessObjectPermissionsByBusObNameV2");
            // verify the required parameter 'busobname' is set
            if (busobname == null)
                throw new ApiException(400, "Missing required parameter 'busobname' when calling SecurityApi->SecurityGetSecurityGroupBusinessObjectPermissionsByBusObNameV2");

            var localVarPath = "/api/V2/getsecuritygroupbusinessobjectpermissions/groupname/{groupname}/busobname/{busobname}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupname != null) localVarPathParams.Add("groupname", Configuration.ApiClient.ParameterToString(groupname)); // path parameter
            if (busobname != null) localVarPathParams.Add("busobname", Configuration.ApiClient.ParameterToString(busobname)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetSecurityGroupBusinessObjectPermissionsByBusObNameV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSecurityGroupBusinessObjectPermissionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSecurityGroupBusinessObjectPermissionsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSecurityGroupBusinessObjectPermissionsResponse)));
        }

        /// <summary>
        /// Get Business Object permission for current user Operation to get Business Object permissions for the currently logged-in user&#39;s Security Group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busObId">Specify the Business Object ID.</param>
        /// <returns>List&lt;BusinessObjectPermission&gt;</returns>
        public List<BusinessObjectPermission> SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObIdV1 (string busObId)
        {
             ApiResponse<List<BusinessObjectPermission>> localVarResponse = SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObIdV1WithHttpInfo(busObId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Business Object permission for current user Operation to get Business Object permissions for the currently logged-in user&#39;s Security Group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busObId">Specify the Business Object ID.</param>
        /// <returns>ApiResponse of List&lt;BusinessObjectPermission&gt;</returns>
        public ApiResponse< List<BusinessObjectPermission> > SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObIdV1WithHttpInfo (string busObId)
        {
            // verify the required parameter 'busObId' is set
            if (busObId == null)
                throw new ApiException(400, "Missing required parameter 'busObId' when calling SecurityApi->SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObIdV1");

            var localVarPath = "/api/V1/getsecuritygroupbusinessobjectpermissionsforcurrentuserbybusobid/busobid/{busObId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (busObId != null) localVarPathParams.Add("busObId", Configuration.ApiClient.ParameterToString(busObId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BusinessObjectPermission>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BusinessObjectPermission>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BusinessObjectPermission>)));
        }

        /// <summary>
        /// Get Business Object permission for current user Operation to get Business Object permissions for the currently logged-in user&#39;s Security Group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busObId">Specify the Business Object ID.</param>
        /// <returns>Task of List&lt;BusinessObjectPermission&gt;</returns>
        public async System.Threading.Tasks.Task<List<BusinessObjectPermission>> SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObIdV1Async (string busObId)
        {
             ApiResponse<List<BusinessObjectPermission>> localVarResponse = await SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObIdV1AsyncWithHttpInfo(busObId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Business Object permission for current user Operation to get Business Object permissions for the currently logged-in user&#39;s Security Group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busObId">Specify the Business Object ID.</param>
        /// <returns>Task of ApiResponse (List&lt;BusinessObjectPermission&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BusinessObjectPermission>>> SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObIdV1AsyncWithHttpInfo (string busObId)
        {
            // verify the required parameter 'busObId' is set
            if (busObId == null)
                throw new ApiException(400, "Missing required parameter 'busObId' when calling SecurityApi->SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObIdV1");

            var localVarPath = "/api/V1/getsecuritygroupbusinessobjectpermissionsforcurrentuserbybusobid/busobid/{busObId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (busObId != null) localVarPathParams.Add("busObId", Configuration.ApiClient.ParameterToString(busObId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BusinessObjectPermission>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BusinessObjectPermission>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BusinessObjectPermission>)));
        }

        /// <summary>
        /// Get Business Object permission for current user Operation to get Business Object permissions for the currently logged-in user&#39;s Security Group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busObId">Specify the Business Object ID.</param>
        /// <returns>GetSecurityGroupBusinessObjectPermissionsResponse</returns>
        public GetSecurityGroupBusinessObjectPermissionsResponse SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObIdV2 (string busObId)
        {
             ApiResponse<GetSecurityGroupBusinessObjectPermissionsResponse> localVarResponse = SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObIdV2WithHttpInfo(busObId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Business Object permission for current user Operation to get Business Object permissions for the currently logged-in user&#39;s Security Group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busObId">Specify the Business Object ID.</param>
        /// <returns>ApiResponse of GetSecurityGroupBusinessObjectPermissionsResponse</returns>
        public ApiResponse< GetSecurityGroupBusinessObjectPermissionsResponse > SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObIdV2WithHttpInfo (string busObId)
        {
            // verify the required parameter 'busObId' is set
            if (busObId == null)
                throw new ApiException(400, "Missing required parameter 'busObId' when calling SecurityApi->SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObIdV2");

            var localVarPath = "/api/V2/getsecuritygroupbusinessobjectpermissionsforcurrentuserbybusobid/busobid/{busObId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (busObId != null) localVarPathParams.Add("busObId", Configuration.ApiClient.ParameterToString(busObId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObIdV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSecurityGroupBusinessObjectPermissionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSecurityGroupBusinessObjectPermissionsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSecurityGroupBusinessObjectPermissionsResponse)));
        }

        /// <summary>
        /// Get Business Object permission for current user Operation to get Business Object permissions for the currently logged-in user&#39;s Security Group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busObId">Specify the Business Object ID.</param>
        /// <returns>Task of GetSecurityGroupBusinessObjectPermissionsResponse</returns>
        public async System.Threading.Tasks.Task<GetSecurityGroupBusinessObjectPermissionsResponse> SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObIdV2Async (string busObId)
        {
             ApiResponse<GetSecurityGroupBusinessObjectPermissionsResponse> localVarResponse = await SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObIdV2AsyncWithHttpInfo(busObId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Business Object permission for current user Operation to get Business Object permissions for the currently logged-in user&#39;s Security Group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busObId">Specify the Business Object ID.</param>
        /// <returns>Task of ApiResponse (GetSecurityGroupBusinessObjectPermissionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSecurityGroupBusinessObjectPermissionsResponse>> SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObIdV2AsyncWithHttpInfo (string busObId)
        {
            // verify the required parameter 'busObId' is set
            if (busObId == null)
                throw new ApiException(400, "Missing required parameter 'busObId' when calling SecurityApi->SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObIdV2");

            var localVarPath = "/api/V2/getsecuritygroupbusinessobjectpermissionsforcurrentuserbybusobid/busobid/{busObId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (busObId != null) localVarPathParams.Add("busObId", Configuration.ApiClient.ParameterToString(busObId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObIdV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSecurityGroupBusinessObjectPermissionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSecurityGroupBusinessObjectPermissionsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSecurityGroupBusinessObjectPermissionsResponse)));
        }

        /// <summary>
        /// Get Business Object permissions for current user Operation to get Business Object permissions for currently logged in user&#39;s Security Group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <returns>List&lt;BusinessObjectPermission&gt;</returns>
        public List<BusinessObjectPermission> SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObNameV1 (string busobname)
        {
             ApiResponse<List<BusinessObjectPermission>> localVarResponse = SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObNameV1WithHttpInfo(busobname);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Business Object permissions for current user Operation to get Business Object permissions for currently logged in user&#39;s Security Group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <returns>ApiResponse of List&lt;BusinessObjectPermission&gt;</returns>
        public ApiResponse< List<BusinessObjectPermission> > SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObNameV1WithHttpInfo (string busobname)
        {
            // verify the required parameter 'busobname' is set
            if (busobname == null)
                throw new ApiException(400, "Missing required parameter 'busobname' when calling SecurityApi->SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObNameV1");

            var localVarPath = "/api/V1/getsecuritygroupbusinessobjectpermissionsforcurrentuserbybusobname/busobname/{busobname}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (busobname != null) localVarPathParams.Add("busobname", Configuration.ApiClient.ParameterToString(busobname)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObNameV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BusinessObjectPermission>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BusinessObjectPermission>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BusinessObjectPermission>)));
        }

        /// <summary>
        /// Get Business Object permissions for current user Operation to get Business Object permissions for currently logged in user&#39;s Security Group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <returns>Task of List&lt;BusinessObjectPermission&gt;</returns>
        public async System.Threading.Tasks.Task<List<BusinessObjectPermission>> SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObNameV1Async (string busobname)
        {
             ApiResponse<List<BusinessObjectPermission>> localVarResponse = await SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObNameV1AsyncWithHttpInfo(busobname);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Business Object permissions for current user Operation to get Business Object permissions for currently logged in user&#39;s Security Group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <returns>Task of ApiResponse (List&lt;BusinessObjectPermission&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BusinessObjectPermission>>> SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObNameV1AsyncWithHttpInfo (string busobname)
        {
            // verify the required parameter 'busobname' is set
            if (busobname == null)
                throw new ApiException(400, "Missing required parameter 'busobname' when calling SecurityApi->SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObNameV1");

            var localVarPath = "/api/V1/getsecuritygroupbusinessobjectpermissionsforcurrentuserbybusobname/busobname/{busobname}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (busobname != null) localVarPathParams.Add("busobname", Configuration.ApiClient.ParameterToString(busobname)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObNameV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BusinessObjectPermission>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BusinessObjectPermission>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BusinessObjectPermission>)));
        }

        /// <summary>
        /// Get Business Object permissions for current user Operation to get Business Object permissions for currently logged in user&#39;s Security Group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <returns>GetSecurityGroupBusinessObjectPermissionsResponse</returns>
        public GetSecurityGroupBusinessObjectPermissionsResponse SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObNameV2 (string busobname)
        {
             ApiResponse<GetSecurityGroupBusinessObjectPermissionsResponse> localVarResponse = SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObNameV2WithHttpInfo(busobname);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Business Object permissions for current user Operation to get Business Object permissions for currently logged in user&#39;s Security Group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <returns>ApiResponse of GetSecurityGroupBusinessObjectPermissionsResponse</returns>
        public ApiResponse< GetSecurityGroupBusinessObjectPermissionsResponse > SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObNameV2WithHttpInfo (string busobname)
        {
            // verify the required parameter 'busobname' is set
            if (busobname == null)
                throw new ApiException(400, "Missing required parameter 'busobname' when calling SecurityApi->SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObNameV2");

            var localVarPath = "/api/V2/getsecuritygroupbusinessobjectpermissionsforcurrentuserbybusobname/busobname/{busobname}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (busobname != null) localVarPathParams.Add("busobname", Configuration.ApiClient.ParameterToString(busobname)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObNameV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSecurityGroupBusinessObjectPermissionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSecurityGroupBusinessObjectPermissionsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSecurityGroupBusinessObjectPermissionsResponse)));
        }

        /// <summary>
        /// Get Business Object permissions for current user Operation to get Business Object permissions for currently logged in user&#39;s Security Group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <returns>Task of GetSecurityGroupBusinessObjectPermissionsResponse</returns>
        public async System.Threading.Tasks.Task<GetSecurityGroupBusinessObjectPermissionsResponse> SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObNameV2Async (string busobname)
        {
             ApiResponse<GetSecurityGroupBusinessObjectPermissionsResponse> localVarResponse = await SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObNameV2AsyncWithHttpInfo(busobname);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Business Object permissions for current user Operation to get Business Object permissions for currently logged in user&#39;s Security Group.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <returns>Task of ApiResponse (GetSecurityGroupBusinessObjectPermissionsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSecurityGroupBusinessObjectPermissionsResponse>> SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObNameV2AsyncWithHttpInfo (string busobname)
        {
            // verify the required parameter 'busobname' is set
            if (busobname == null)
                throw new ApiException(400, "Missing required parameter 'busobname' when calling SecurityApi->SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObNameV2");

            var localVarPath = "/api/V2/getsecuritygroupbusinessobjectpermissionsforcurrentuserbybusobname/busobname/{busobname}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (busobname != null) localVarPathParams.Add("busobname", Configuration.ApiClient.ParameterToString(busobname)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObNameV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSecurityGroupBusinessObjectPermissionsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSecurityGroupBusinessObjectPermissionsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSecurityGroupBusinessObjectPermissionsResponse)));
        }

        /// <summary>
        /// Get all Security Group categories Operation to get IDs and names for all available Security Group categories. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;RightCategory&gt;</returns>
        public List<RightCategory> SecurityGetSecurityGroupCategoriesV1 ()
        {
             ApiResponse<List<RightCategory>> localVarResponse = SecurityGetSecurityGroupCategoriesV1WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all Security Group categories Operation to get IDs and names for all available Security Group categories. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;RightCategory&gt;</returns>
        public ApiResponse< List<RightCategory> > SecurityGetSecurityGroupCategoriesV1WithHttpInfo ()
        {

            var localVarPath = "/api/V1/getsecuritygroupcategories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetSecurityGroupCategoriesV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RightCategory>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RightCategory>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RightCategory>)));
        }

        /// <summary>
        /// Get all Security Group categories Operation to get IDs and names for all available Security Group categories. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;RightCategory&gt;</returns>
        public async System.Threading.Tasks.Task<List<RightCategory>> SecurityGetSecurityGroupCategoriesV1Async ()
        {
             ApiResponse<List<RightCategory>> localVarResponse = await SecurityGetSecurityGroupCategoriesV1AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all Security Group categories Operation to get IDs and names for all available Security Group categories. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;RightCategory&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RightCategory>>> SecurityGetSecurityGroupCategoriesV1AsyncWithHttpInfo ()
        {

            var localVarPath = "/api/V1/getsecuritygroupcategories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetSecurityGroupCategoriesV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RightCategory>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RightCategory>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RightCategory>)));
        }

        /// <summary>
        /// Get all Security Group categories Operation to get IDs and names for all available Security Group categories. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SecurityRightCategoriesResponse</returns>
        public SecurityRightCategoriesResponse SecurityGetSecurityGroupCategoriesV2 ()
        {
             ApiResponse<SecurityRightCategoriesResponse> localVarResponse = SecurityGetSecurityGroupCategoriesV2WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all Security Group categories Operation to get IDs and names for all available Security Group categories. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SecurityRightCategoriesResponse</returns>
        public ApiResponse< SecurityRightCategoriesResponse > SecurityGetSecurityGroupCategoriesV2WithHttpInfo ()
        {

            var localVarPath = "/api/V2/getsecuritygroupcategories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetSecurityGroupCategoriesV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecurityRightCategoriesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SecurityRightCategoriesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecurityRightCategoriesResponse)));
        }

        /// <summary>
        /// Get all Security Group categories Operation to get IDs and names for all available Security Group categories. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SecurityRightCategoriesResponse</returns>
        public async System.Threading.Tasks.Task<SecurityRightCategoriesResponse> SecurityGetSecurityGroupCategoriesV2Async ()
        {
             ApiResponse<SecurityRightCategoriesResponse> localVarResponse = await SecurityGetSecurityGroupCategoriesV2AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all Security Group categories Operation to get IDs and names for all available Security Group categories. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SecurityRightCategoriesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SecurityRightCategoriesResponse>> SecurityGetSecurityGroupCategoriesV2AsyncWithHttpInfo ()
        {

            var localVarPath = "/api/V2/getsecuritygroupcategories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetSecurityGroupCategoriesV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecurityRightCategoriesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SecurityRightCategoriesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecurityRightCategoriesResponse)));
        }

        /// <summary>
        /// Get permissions for a Security Group by category Operation to get permissions for a Security Group by category. To get Security Group IDs, use \&quot;Get all available Security Groups.\&quot; To get Security Group category IDs, use \&quot;Get all Security Group categories.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID</param>
        /// <param name="categoryid">Specify the Security Group category ID</param>
        /// <returns>List&lt;Right&gt;</returns>
        public List<Right> SecurityGetSecurityGroupRightsByGroupIdAndCategoryIdV1 (string groupid, string categoryid)
        {
             ApiResponse<List<Right>> localVarResponse = SecurityGetSecurityGroupRightsByGroupIdAndCategoryIdV1WithHttpInfo(groupid, categoryid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get permissions for a Security Group by category Operation to get permissions for a Security Group by category. To get Security Group IDs, use \&quot;Get all available Security Groups.\&quot; To get Security Group category IDs, use \&quot;Get all Security Group categories.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID</param>
        /// <param name="categoryid">Specify the Security Group category ID</param>
        /// <returns>ApiResponse of List&lt;Right&gt;</returns>
        public ApiResponse< List<Right> > SecurityGetSecurityGroupRightsByGroupIdAndCategoryIdV1WithHttpInfo (string groupid, string categoryid)
        {
            // verify the required parameter 'groupid' is set
            if (groupid == null)
                throw new ApiException(400, "Missing required parameter 'groupid' when calling SecurityApi->SecurityGetSecurityGroupRightsByGroupIdAndCategoryIdV1");
            // verify the required parameter 'categoryid' is set
            if (categoryid == null)
                throw new ApiException(400, "Missing required parameter 'categoryid' when calling SecurityApi->SecurityGetSecurityGroupRightsByGroupIdAndCategoryIdV1");

            var localVarPath = "/api/V1/getsecuritygrouprights/groupid/{groupid}/categoryid/{categoryid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupid != null) localVarPathParams.Add("groupid", Configuration.ApiClient.ParameterToString(groupid)); // path parameter
            if (categoryid != null) localVarPathParams.Add("categoryid", Configuration.ApiClient.ParameterToString(categoryid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetSecurityGroupRightsByGroupIdAndCategoryIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Right>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Right>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Right>)));
        }

        /// <summary>
        /// Get permissions for a Security Group by category Operation to get permissions for a Security Group by category. To get Security Group IDs, use \&quot;Get all available Security Groups.\&quot; To get Security Group category IDs, use \&quot;Get all Security Group categories.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID</param>
        /// <param name="categoryid">Specify the Security Group category ID</param>
        /// <returns>Task of List&lt;Right&gt;</returns>
        public async System.Threading.Tasks.Task<List<Right>> SecurityGetSecurityGroupRightsByGroupIdAndCategoryIdV1Async (string groupid, string categoryid)
        {
             ApiResponse<List<Right>> localVarResponse = await SecurityGetSecurityGroupRightsByGroupIdAndCategoryIdV1AsyncWithHttpInfo(groupid, categoryid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get permissions for a Security Group by category Operation to get permissions for a Security Group by category. To get Security Group IDs, use \&quot;Get all available Security Groups.\&quot; To get Security Group category IDs, use \&quot;Get all Security Group categories.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID</param>
        /// <param name="categoryid">Specify the Security Group category ID</param>
        /// <returns>Task of ApiResponse (List&lt;Right&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Right>>> SecurityGetSecurityGroupRightsByGroupIdAndCategoryIdV1AsyncWithHttpInfo (string groupid, string categoryid)
        {
            // verify the required parameter 'groupid' is set
            if (groupid == null)
                throw new ApiException(400, "Missing required parameter 'groupid' when calling SecurityApi->SecurityGetSecurityGroupRightsByGroupIdAndCategoryIdV1");
            // verify the required parameter 'categoryid' is set
            if (categoryid == null)
                throw new ApiException(400, "Missing required parameter 'categoryid' when calling SecurityApi->SecurityGetSecurityGroupRightsByGroupIdAndCategoryIdV1");

            var localVarPath = "/api/V1/getsecuritygrouprights/groupid/{groupid}/categoryid/{categoryid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupid != null) localVarPathParams.Add("groupid", Configuration.ApiClient.ParameterToString(groupid)); // path parameter
            if (categoryid != null) localVarPathParams.Add("categoryid", Configuration.ApiClient.ParameterToString(categoryid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetSecurityGroupRightsByGroupIdAndCategoryIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Right>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Right>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Right>)));
        }

        /// <summary>
        /// Get permissions for a Security Group by category Operation to get permissions for a Security Group by category. To get Security Group IDs, use \&quot;Get all available Security Groups.\&quot; To get Security Group category IDs, use \&quot;Get all Security Group categories.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID</param>
        /// <param name="categoryid">Specify the Security Group category ID</param>
        /// <returns>SecurityRightsResponse</returns>
        public SecurityRightsResponse SecurityGetSecurityGroupRightsByGroupIdAndCategoryIdV2 (string groupid, string categoryid)
        {
             ApiResponse<SecurityRightsResponse> localVarResponse = SecurityGetSecurityGroupRightsByGroupIdAndCategoryIdV2WithHttpInfo(groupid, categoryid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get permissions for a Security Group by category Operation to get permissions for a Security Group by category. To get Security Group IDs, use \&quot;Get all available Security Groups.\&quot; To get Security Group category IDs, use \&quot;Get all Security Group categories.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID</param>
        /// <param name="categoryid">Specify the Security Group category ID</param>
        /// <returns>ApiResponse of SecurityRightsResponse</returns>
        public ApiResponse< SecurityRightsResponse > SecurityGetSecurityGroupRightsByGroupIdAndCategoryIdV2WithHttpInfo (string groupid, string categoryid)
        {
            // verify the required parameter 'groupid' is set
            if (groupid == null)
                throw new ApiException(400, "Missing required parameter 'groupid' when calling SecurityApi->SecurityGetSecurityGroupRightsByGroupIdAndCategoryIdV2");
            // verify the required parameter 'categoryid' is set
            if (categoryid == null)
                throw new ApiException(400, "Missing required parameter 'categoryid' when calling SecurityApi->SecurityGetSecurityGroupRightsByGroupIdAndCategoryIdV2");

            var localVarPath = "/api/V2/getsecuritygrouprights/groupid/{groupid}/categoryid/{categoryid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupid != null) localVarPathParams.Add("groupid", Configuration.ApiClient.ParameterToString(groupid)); // path parameter
            if (categoryid != null) localVarPathParams.Add("categoryid", Configuration.ApiClient.ParameterToString(categoryid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetSecurityGroupRightsByGroupIdAndCategoryIdV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecurityRightsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SecurityRightsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecurityRightsResponse)));
        }

        /// <summary>
        /// Get permissions for a Security Group by category Operation to get permissions for a Security Group by category. To get Security Group IDs, use \&quot;Get all available Security Groups.\&quot; To get Security Group category IDs, use \&quot;Get all Security Group categories.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID</param>
        /// <param name="categoryid">Specify the Security Group category ID</param>
        /// <returns>Task of SecurityRightsResponse</returns>
        public async System.Threading.Tasks.Task<SecurityRightsResponse> SecurityGetSecurityGroupRightsByGroupIdAndCategoryIdV2Async (string groupid, string categoryid)
        {
             ApiResponse<SecurityRightsResponse> localVarResponse = await SecurityGetSecurityGroupRightsByGroupIdAndCategoryIdV2AsyncWithHttpInfo(groupid, categoryid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get permissions for a Security Group by category Operation to get permissions for a Security Group by category. To get Security Group IDs, use \&quot;Get all available Security Groups.\&quot; To get Security Group category IDs, use \&quot;Get all Security Group categories.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID</param>
        /// <param name="categoryid">Specify the Security Group category ID</param>
        /// <returns>Task of ApiResponse (SecurityRightsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SecurityRightsResponse>> SecurityGetSecurityGroupRightsByGroupIdAndCategoryIdV2AsyncWithHttpInfo (string groupid, string categoryid)
        {
            // verify the required parameter 'groupid' is set
            if (groupid == null)
                throw new ApiException(400, "Missing required parameter 'groupid' when calling SecurityApi->SecurityGetSecurityGroupRightsByGroupIdAndCategoryIdV2");
            // verify the required parameter 'categoryid' is set
            if (categoryid == null)
                throw new ApiException(400, "Missing required parameter 'categoryid' when calling SecurityApi->SecurityGetSecurityGroupRightsByGroupIdAndCategoryIdV2");

            var localVarPath = "/api/V2/getsecuritygrouprights/groupid/{groupid}/categoryid/{categoryid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupid != null) localVarPathParams.Add("groupid", Configuration.ApiClient.ParameterToString(groupid)); // path parameter
            if (categoryid != null) localVarPathParams.Add("categoryid", Configuration.ApiClient.ParameterToString(categoryid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetSecurityGroupRightsByGroupIdAndCategoryIdV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecurityRightsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SecurityRightsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecurityRightsResponse)));
        }

        /// <summary>
        /// Get permissions for a Security Group by category Operation to get permissions for a Security Group by category.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupname">Specify the Security Group name.</param>
        /// <param name="categoryname">Specify the Security Group category name.</param>
        /// <returns>List&lt;Right&gt;</returns>
        public List<Right> SecurityGetSecurityGroupRightsByGroupNameAndCategoryNameV1 (string groupname, string categoryname)
        {
             ApiResponse<List<Right>> localVarResponse = SecurityGetSecurityGroupRightsByGroupNameAndCategoryNameV1WithHttpInfo(groupname, categoryname);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get permissions for a Security Group by category Operation to get permissions for a Security Group by category.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupname">Specify the Security Group name.</param>
        /// <param name="categoryname">Specify the Security Group category name.</param>
        /// <returns>ApiResponse of List&lt;Right&gt;</returns>
        public ApiResponse< List<Right> > SecurityGetSecurityGroupRightsByGroupNameAndCategoryNameV1WithHttpInfo (string groupname, string categoryname)
        {
            // verify the required parameter 'groupname' is set
            if (groupname == null)
                throw new ApiException(400, "Missing required parameter 'groupname' when calling SecurityApi->SecurityGetSecurityGroupRightsByGroupNameAndCategoryNameV1");
            // verify the required parameter 'categoryname' is set
            if (categoryname == null)
                throw new ApiException(400, "Missing required parameter 'categoryname' when calling SecurityApi->SecurityGetSecurityGroupRightsByGroupNameAndCategoryNameV1");

            var localVarPath = "/api/V1/getsecuritygrouprights/groupname/{groupname}/categoryname/{categoryname}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupname != null) localVarPathParams.Add("groupname", Configuration.ApiClient.ParameterToString(groupname)); // path parameter
            if (categoryname != null) localVarPathParams.Add("categoryname", Configuration.ApiClient.ParameterToString(categoryname)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetSecurityGroupRightsByGroupNameAndCategoryNameV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Right>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Right>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Right>)));
        }

        /// <summary>
        /// Get permissions for a Security Group by category Operation to get permissions for a Security Group by category.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupname">Specify the Security Group name.</param>
        /// <param name="categoryname">Specify the Security Group category name.</param>
        /// <returns>Task of List&lt;Right&gt;</returns>
        public async System.Threading.Tasks.Task<List<Right>> SecurityGetSecurityGroupRightsByGroupNameAndCategoryNameV1Async (string groupname, string categoryname)
        {
             ApiResponse<List<Right>> localVarResponse = await SecurityGetSecurityGroupRightsByGroupNameAndCategoryNameV1AsyncWithHttpInfo(groupname, categoryname);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get permissions for a Security Group by category Operation to get permissions for a Security Group by category.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupname">Specify the Security Group name.</param>
        /// <param name="categoryname">Specify the Security Group category name.</param>
        /// <returns>Task of ApiResponse (List&lt;Right&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Right>>> SecurityGetSecurityGroupRightsByGroupNameAndCategoryNameV1AsyncWithHttpInfo (string groupname, string categoryname)
        {
            // verify the required parameter 'groupname' is set
            if (groupname == null)
                throw new ApiException(400, "Missing required parameter 'groupname' when calling SecurityApi->SecurityGetSecurityGroupRightsByGroupNameAndCategoryNameV1");
            // verify the required parameter 'categoryname' is set
            if (categoryname == null)
                throw new ApiException(400, "Missing required parameter 'categoryname' when calling SecurityApi->SecurityGetSecurityGroupRightsByGroupNameAndCategoryNameV1");

            var localVarPath = "/api/V1/getsecuritygrouprights/groupname/{groupname}/categoryname/{categoryname}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupname != null) localVarPathParams.Add("groupname", Configuration.ApiClient.ParameterToString(groupname)); // path parameter
            if (categoryname != null) localVarPathParams.Add("categoryname", Configuration.ApiClient.ParameterToString(categoryname)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetSecurityGroupRightsByGroupNameAndCategoryNameV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Right>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Right>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Right>)));
        }

        /// <summary>
        /// Get permissions for a Security Group by category Operation to get permissions for a Security Group by category.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupname">Specify the Security Group name.</param>
        /// <param name="categoryname">Specify the Security Group category name.</param>
        /// <returns>SecurityRightsResponse</returns>
        public SecurityRightsResponse SecurityGetSecurityGroupRightsByGroupNameAndCategoryNameV2 (string groupname, string categoryname)
        {
             ApiResponse<SecurityRightsResponse> localVarResponse = SecurityGetSecurityGroupRightsByGroupNameAndCategoryNameV2WithHttpInfo(groupname, categoryname);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get permissions for a Security Group by category Operation to get permissions for a Security Group by category.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupname">Specify the Security Group name.</param>
        /// <param name="categoryname">Specify the Security Group category name.</param>
        /// <returns>ApiResponse of SecurityRightsResponse</returns>
        public ApiResponse< SecurityRightsResponse > SecurityGetSecurityGroupRightsByGroupNameAndCategoryNameV2WithHttpInfo (string groupname, string categoryname)
        {
            // verify the required parameter 'groupname' is set
            if (groupname == null)
                throw new ApiException(400, "Missing required parameter 'groupname' when calling SecurityApi->SecurityGetSecurityGroupRightsByGroupNameAndCategoryNameV2");
            // verify the required parameter 'categoryname' is set
            if (categoryname == null)
                throw new ApiException(400, "Missing required parameter 'categoryname' when calling SecurityApi->SecurityGetSecurityGroupRightsByGroupNameAndCategoryNameV2");

            var localVarPath = "/api/V2/getsecuritygrouprights/groupname/{groupname}/categoryname/{categoryname}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupname != null) localVarPathParams.Add("groupname", Configuration.ApiClient.ParameterToString(groupname)); // path parameter
            if (categoryname != null) localVarPathParams.Add("categoryname", Configuration.ApiClient.ParameterToString(categoryname)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetSecurityGroupRightsByGroupNameAndCategoryNameV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecurityRightsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SecurityRightsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecurityRightsResponse)));
        }

        /// <summary>
        /// Get permissions for a Security Group by category Operation to get permissions for a Security Group by category.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupname">Specify the Security Group name.</param>
        /// <param name="categoryname">Specify the Security Group category name.</param>
        /// <returns>Task of SecurityRightsResponse</returns>
        public async System.Threading.Tasks.Task<SecurityRightsResponse> SecurityGetSecurityGroupRightsByGroupNameAndCategoryNameV2Async (string groupname, string categoryname)
        {
             ApiResponse<SecurityRightsResponse> localVarResponse = await SecurityGetSecurityGroupRightsByGroupNameAndCategoryNameV2AsyncWithHttpInfo(groupname, categoryname);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get permissions for a Security Group by category Operation to get permissions for a Security Group by category.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupname">Specify the Security Group name.</param>
        /// <param name="categoryname">Specify the Security Group category name.</param>
        /// <returns>Task of ApiResponse (SecurityRightsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SecurityRightsResponse>> SecurityGetSecurityGroupRightsByGroupNameAndCategoryNameV2AsyncWithHttpInfo (string groupname, string categoryname)
        {
            // verify the required parameter 'groupname' is set
            if (groupname == null)
                throw new ApiException(400, "Missing required parameter 'groupname' when calling SecurityApi->SecurityGetSecurityGroupRightsByGroupNameAndCategoryNameV2");
            // verify the required parameter 'categoryname' is set
            if (categoryname == null)
                throw new ApiException(400, "Missing required parameter 'categoryname' when calling SecurityApi->SecurityGetSecurityGroupRightsByGroupNameAndCategoryNameV2");

            var localVarPath = "/api/V2/getsecuritygrouprights/groupname/{groupname}/categoryname/{categoryname}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupname != null) localVarPathParams.Add("groupname", Configuration.ApiClient.ParameterToString(groupname)); // path parameter
            if (categoryname != null) localVarPathParams.Add("categoryname", Configuration.ApiClient.ParameterToString(categoryname)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetSecurityGroupRightsByGroupNameAndCategoryNameV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecurityRightsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SecurityRightsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecurityRightsResponse)));
        }

        /// <summary>
        /// Get current user&#39;s permissions by Security Group category by ID Operation to get permissions for the current user&#39;s Security Group by category. To get Security Group category IDs, use \&quot;Get all Security Group categories.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryid">Specify the Security Group category ID.</param>
        /// <returns>List&lt;Right&gt;</returns>
        public List<Right> SecurityGetSecurityGroupRightsForCurrentUserByCategoryIdV1 (string categoryid)
        {
             ApiResponse<List<Right>> localVarResponse = SecurityGetSecurityGroupRightsForCurrentUserByCategoryIdV1WithHttpInfo(categoryid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get current user&#39;s permissions by Security Group category by ID Operation to get permissions for the current user&#39;s Security Group by category. To get Security Group category IDs, use \&quot;Get all Security Group categories.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryid">Specify the Security Group category ID.</param>
        /// <returns>ApiResponse of List&lt;Right&gt;</returns>
        public ApiResponse< List<Right> > SecurityGetSecurityGroupRightsForCurrentUserByCategoryIdV1WithHttpInfo (string categoryid)
        {
            // verify the required parameter 'categoryid' is set
            if (categoryid == null)
                throw new ApiException(400, "Missing required parameter 'categoryid' when calling SecurityApi->SecurityGetSecurityGroupRightsForCurrentUserByCategoryIdV1");

            var localVarPath = "/api/V1/getsecuritygrouprightsforcurrentuserbycategoryid/categoryid/{categoryid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (categoryid != null) localVarPathParams.Add("categoryid", Configuration.ApiClient.ParameterToString(categoryid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetSecurityGroupRightsForCurrentUserByCategoryIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Right>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Right>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Right>)));
        }

        /// <summary>
        /// Get current user&#39;s permissions by Security Group category by ID Operation to get permissions for the current user&#39;s Security Group by category. To get Security Group category IDs, use \&quot;Get all Security Group categories.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryid">Specify the Security Group category ID.</param>
        /// <returns>Task of List&lt;Right&gt;</returns>
        public async System.Threading.Tasks.Task<List<Right>> SecurityGetSecurityGroupRightsForCurrentUserByCategoryIdV1Async (string categoryid)
        {
             ApiResponse<List<Right>> localVarResponse = await SecurityGetSecurityGroupRightsForCurrentUserByCategoryIdV1AsyncWithHttpInfo(categoryid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get current user&#39;s permissions by Security Group category by ID Operation to get permissions for the current user&#39;s Security Group by category. To get Security Group category IDs, use \&quot;Get all Security Group categories.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryid">Specify the Security Group category ID.</param>
        /// <returns>Task of ApiResponse (List&lt;Right&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Right>>> SecurityGetSecurityGroupRightsForCurrentUserByCategoryIdV1AsyncWithHttpInfo (string categoryid)
        {
            // verify the required parameter 'categoryid' is set
            if (categoryid == null)
                throw new ApiException(400, "Missing required parameter 'categoryid' when calling SecurityApi->SecurityGetSecurityGroupRightsForCurrentUserByCategoryIdV1");

            var localVarPath = "/api/V1/getsecuritygrouprightsforcurrentuserbycategoryid/categoryid/{categoryid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (categoryid != null) localVarPathParams.Add("categoryid", Configuration.ApiClient.ParameterToString(categoryid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetSecurityGroupRightsForCurrentUserByCategoryIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Right>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Right>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Right>)));
        }

        /// <summary>
        /// Get current user&#39;s permissions by Security Group category by ID Operation to get permissions for the current user&#39;s Security Group by category. To get Security Group category IDs, use \&quot;Get all Security Group categories.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryid">Specify the Security Group category ID.</param>
        /// <returns>SecurityRightsResponse</returns>
        public SecurityRightsResponse SecurityGetSecurityGroupRightsForCurrentUserByCategoryIdV2 (string categoryid)
        {
             ApiResponse<SecurityRightsResponse> localVarResponse = SecurityGetSecurityGroupRightsForCurrentUserByCategoryIdV2WithHttpInfo(categoryid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get current user&#39;s permissions by Security Group category by ID Operation to get permissions for the current user&#39;s Security Group by category. To get Security Group category IDs, use \&quot;Get all Security Group categories.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryid">Specify the Security Group category ID.</param>
        /// <returns>ApiResponse of SecurityRightsResponse</returns>
        public ApiResponse< SecurityRightsResponse > SecurityGetSecurityGroupRightsForCurrentUserByCategoryIdV2WithHttpInfo (string categoryid)
        {
            // verify the required parameter 'categoryid' is set
            if (categoryid == null)
                throw new ApiException(400, "Missing required parameter 'categoryid' when calling SecurityApi->SecurityGetSecurityGroupRightsForCurrentUserByCategoryIdV2");

            var localVarPath = "/api/V2/getsecuritygrouprightsforcurrentuserbycategoryid/categoryid/{categoryid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (categoryid != null) localVarPathParams.Add("categoryid", Configuration.ApiClient.ParameterToString(categoryid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetSecurityGroupRightsForCurrentUserByCategoryIdV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecurityRightsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SecurityRightsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecurityRightsResponse)));
        }

        /// <summary>
        /// Get current user&#39;s permissions by Security Group category by ID Operation to get permissions for the current user&#39;s Security Group by category. To get Security Group category IDs, use \&quot;Get all Security Group categories.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryid">Specify the Security Group category ID.</param>
        /// <returns>Task of SecurityRightsResponse</returns>
        public async System.Threading.Tasks.Task<SecurityRightsResponse> SecurityGetSecurityGroupRightsForCurrentUserByCategoryIdV2Async (string categoryid)
        {
             ApiResponse<SecurityRightsResponse> localVarResponse = await SecurityGetSecurityGroupRightsForCurrentUserByCategoryIdV2AsyncWithHttpInfo(categoryid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get current user&#39;s permissions by Security Group category by ID Operation to get permissions for the current user&#39;s Security Group by category. To get Security Group category IDs, use \&quot;Get all Security Group categories.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryid">Specify the Security Group category ID.</param>
        /// <returns>Task of ApiResponse (SecurityRightsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SecurityRightsResponse>> SecurityGetSecurityGroupRightsForCurrentUserByCategoryIdV2AsyncWithHttpInfo (string categoryid)
        {
            // verify the required parameter 'categoryid' is set
            if (categoryid == null)
                throw new ApiException(400, "Missing required parameter 'categoryid' when calling SecurityApi->SecurityGetSecurityGroupRightsForCurrentUserByCategoryIdV2");

            var localVarPath = "/api/V2/getsecuritygrouprightsforcurrentuserbycategoryid/categoryid/{categoryid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (categoryid != null) localVarPathParams.Add("categoryid", Configuration.ApiClient.ParameterToString(categoryid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetSecurityGroupRightsForCurrentUserByCategoryIdV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecurityRightsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SecurityRightsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecurityRightsResponse)));
        }

        /// <summary>
        /// Get current user&#39;s permissions by Security Group category by name Operation to get permissions for the current user&#39;s Security Group by category.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryname">Specify the Security Group category name.</param>
        /// <returns>List&lt;Right&gt;</returns>
        public List<Right> SecurityGetSecurityGroupRightsForCurrentUserByCategoryNameV1 (string categoryname)
        {
             ApiResponse<List<Right>> localVarResponse = SecurityGetSecurityGroupRightsForCurrentUserByCategoryNameV1WithHttpInfo(categoryname);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get current user&#39;s permissions by Security Group category by name Operation to get permissions for the current user&#39;s Security Group by category.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryname">Specify the Security Group category name.</param>
        /// <returns>ApiResponse of List&lt;Right&gt;</returns>
        public ApiResponse< List<Right> > SecurityGetSecurityGroupRightsForCurrentUserByCategoryNameV1WithHttpInfo (string categoryname)
        {
            // verify the required parameter 'categoryname' is set
            if (categoryname == null)
                throw new ApiException(400, "Missing required parameter 'categoryname' when calling SecurityApi->SecurityGetSecurityGroupRightsForCurrentUserByCategoryNameV1");

            var localVarPath = "/api/V1/getsecuritygrouprightsforcurrentuserbycategoryname/categoryname/{categoryname}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (categoryname != null) localVarPathParams.Add("categoryname", Configuration.ApiClient.ParameterToString(categoryname)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetSecurityGroupRightsForCurrentUserByCategoryNameV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Right>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Right>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Right>)));
        }

        /// <summary>
        /// Get current user&#39;s permissions by Security Group category by name Operation to get permissions for the current user&#39;s Security Group by category.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryname">Specify the Security Group category name.</param>
        /// <returns>Task of List&lt;Right&gt;</returns>
        public async System.Threading.Tasks.Task<List<Right>> SecurityGetSecurityGroupRightsForCurrentUserByCategoryNameV1Async (string categoryname)
        {
             ApiResponse<List<Right>> localVarResponse = await SecurityGetSecurityGroupRightsForCurrentUserByCategoryNameV1AsyncWithHttpInfo(categoryname);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get current user&#39;s permissions by Security Group category by name Operation to get permissions for the current user&#39;s Security Group by category.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryname">Specify the Security Group category name.</param>
        /// <returns>Task of ApiResponse (List&lt;Right&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Right>>> SecurityGetSecurityGroupRightsForCurrentUserByCategoryNameV1AsyncWithHttpInfo (string categoryname)
        {
            // verify the required parameter 'categoryname' is set
            if (categoryname == null)
                throw new ApiException(400, "Missing required parameter 'categoryname' when calling SecurityApi->SecurityGetSecurityGroupRightsForCurrentUserByCategoryNameV1");

            var localVarPath = "/api/V1/getsecuritygrouprightsforcurrentuserbycategoryname/categoryname/{categoryname}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (categoryname != null) localVarPathParams.Add("categoryname", Configuration.ApiClient.ParameterToString(categoryname)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetSecurityGroupRightsForCurrentUserByCategoryNameV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Right>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Right>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Right>)));
        }

        /// <summary>
        /// Get current user&#39;s permissions by Security Group category by name Operation to get permissions for the current user&#39;s Security Group by category.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryname">Specify the Security Group category name.</param>
        /// <returns>SecurityRightsResponse</returns>
        public SecurityRightsResponse SecurityGetSecurityGroupRightsForCurrentUserByCategoryNameV2 (string categoryname)
        {
             ApiResponse<SecurityRightsResponse> localVarResponse = SecurityGetSecurityGroupRightsForCurrentUserByCategoryNameV2WithHttpInfo(categoryname);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get current user&#39;s permissions by Security Group category by name Operation to get permissions for the current user&#39;s Security Group by category.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryname">Specify the Security Group category name.</param>
        /// <returns>ApiResponse of SecurityRightsResponse</returns>
        public ApiResponse< SecurityRightsResponse > SecurityGetSecurityGroupRightsForCurrentUserByCategoryNameV2WithHttpInfo (string categoryname)
        {
            // verify the required parameter 'categoryname' is set
            if (categoryname == null)
                throw new ApiException(400, "Missing required parameter 'categoryname' when calling SecurityApi->SecurityGetSecurityGroupRightsForCurrentUserByCategoryNameV2");

            var localVarPath = "/api/V2/getsecuritygrouprightsforcurrentuserbycategoryname/categoryname/{categoryname}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (categoryname != null) localVarPathParams.Add("categoryname", Configuration.ApiClient.ParameterToString(categoryname)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetSecurityGroupRightsForCurrentUserByCategoryNameV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecurityRightsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SecurityRightsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecurityRightsResponse)));
        }

        /// <summary>
        /// Get current user&#39;s permissions by Security Group category by name Operation to get permissions for the current user&#39;s Security Group by category.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryname">Specify the Security Group category name.</param>
        /// <returns>Task of SecurityRightsResponse</returns>
        public async System.Threading.Tasks.Task<SecurityRightsResponse> SecurityGetSecurityGroupRightsForCurrentUserByCategoryNameV2Async (string categoryname)
        {
             ApiResponse<SecurityRightsResponse> localVarResponse = await SecurityGetSecurityGroupRightsForCurrentUserByCategoryNameV2AsyncWithHttpInfo(categoryname);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get current user&#39;s permissions by Security Group category by name Operation to get permissions for the current user&#39;s Security Group by category.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryname">Specify the Security Group category name.</param>
        /// <returns>Task of ApiResponse (SecurityRightsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SecurityRightsResponse>> SecurityGetSecurityGroupRightsForCurrentUserByCategoryNameV2AsyncWithHttpInfo (string categoryname)
        {
            // verify the required parameter 'categoryname' is set
            if (categoryname == null)
                throw new ApiException(400, "Missing required parameter 'categoryname' when calling SecurityApi->SecurityGetSecurityGroupRightsForCurrentUserByCategoryNameV2");

            var localVarPath = "/api/V2/getsecuritygrouprightsforcurrentuserbycategoryname/categoryname/{categoryname}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (categoryname != null) localVarPathParams.Add("categoryname", Configuration.ApiClient.ParameterToString(categoryname)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetSecurityGroupRightsForCurrentUserByCategoryNameV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecurityRightsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SecurityRightsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecurityRightsResponse)));
        }

        /// <summary>
        /// Get all available Security Groups Operation to get IDs, names, and descriptions for all available Security Groups.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SecurityGroupResponse</returns>
        public SecurityGroupResponse SecurityGetSecurityGroupsV1 ()
        {
             ApiResponse<SecurityGroupResponse> localVarResponse = SecurityGetSecurityGroupsV1WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all available Security Groups Operation to get IDs, names, and descriptions for all available Security Groups.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SecurityGroupResponse</returns>
        public ApiResponse< SecurityGroupResponse > SecurityGetSecurityGroupsV1WithHttpInfo ()
        {

            var localVarPath = "/api/V1/getsecuritygroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetSecurityGroupsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecurityGroupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SecurityGroupResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecurityGroupResponse)));
        }

        /// <summary>
        /// Get all available Security Groups Operation to get IDs, names, and descriptions for all available Security Groups.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SecurityGroupResponse</returns>
        public async System.Threading.Tasks.Task<SecurityGroupResponse> SecurityGetSecurityGroupsV1Async ()
        {
             ApiResponse<SecurityGroupResponse> localVarResponse = await SecurityGetSecurityGroupsV1AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all available Security Groups Operation to get IDs, names, and descriptions for all available Security Groups.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SecurityGroupResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SecurityGroupResponse>> SecurityGetSecurityGroupsV1AsyncWithHttpInfo ()
        {

            var localVarPath = "/api/V1/getsecuritygroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetSecurityGroupsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecurityGroupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SecurityGroupResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecurityGroupResponse)));
        }

        /// <summary>
        /// Get all available Security Groups Operation to get IDs, names, and descriptions for all available Security Groups.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SecurityGroupV2Response</returns>
        public SecurityGroupV2Response SecurityGetSecurityGroupsV2 ()
        {
             ApiResponse<SecurityGroupV2Response> localVarResponse = SecurityGetSecurityGroupsV2WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all available Security Groups Operation to get IDs, names, and descriptions for all available Security Groups.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SecurityGroupV2Response</returns>
        public ApiResponse< SecurityGroupV2Response > SecurityGetSecurityGroupsV2WithHttpInfo ()
        {

            var localVarPath = "/api/V2/getsecuritygroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetSecurityGroupsV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecurityGroupV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SecurityGroupV2Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecurityGroupV2Response)));
        }

        /// <summary>
        /// Get all available Security Groups Operation to get IDs, names, and descriptions for all available Security Groups.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SecurityGroupV2Response</returns>
        public async System.Threading.Tasks.Task<SecurityGroupV2Response> SecurityGetSecurityGroupsV2Async ()
        {
             ApiResponse<SecurityGroupV2Response> localVarResponse = await SecurityGetSecurityGroupsV2AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all available Security Groups Operation to get IDs, names, and descriptions for all available Security Groups.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SecurityGroupV2Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SecurityGroupV2Response>> SecurityGetSecurityGroupsV2AsyncWithHttpInfo ()
        {

            var localVarPath = "/api/V2/getsecuritygroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetSecurityGroupsV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SecurityGroupV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SecurityGroupV2Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SecurityGroupV2Response)));
        }

        /// <summary>
        /// Get all available Teams Operation to get IDs and names for all available Teams.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TeamsResponse</returns>
        public TeamsResponse SecurityGetTeamsV1 ()
        {
             ApiResponse<TeamsResponse> localVarResponse = SecurityGetTeamsV1WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all available Teams Operation to get IDs and names for all available Teams.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TeamsResponse</returns>
        public ApiResponse< TeamsResponse > SecurityGetTeamsV1WithHttpInfo ()
        {

            var localVarPath = "/api/V1/getteams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetTeamsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamsResponse)));
        }

        /// <summary>
        /// Get all available Teams Operation to get IDs and names for all available Teams.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TeamsResponse</returns>
        public async System.Threading.Tasks.Task<TeamsResponse> SecurityGetTeamsV1Async ()
        {
             ApiResponse<TeamsResponse> localVarResponse = await SecurityGetTeamsV1AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all available Teams Operation to get IDs and names for all available Teams.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TeamsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamsResponse>> SecurityGetTeamsV1AsyncWithHttpInfo ()
        {

            var localVarPath = "/api/V1/getteams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetTeamsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamsResponse)));
        }

        /// <summary>
        /// Get all available Teams Operation to get IDs and names for all available Teams.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TeamsV2Response</returns>
        public TeamsV2Response SecurityGetTeamsV2 ()
        {
             ApiResponse<TeamsV2Response> localVarResponse = SecurityGetTeamsV2WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all available Teams Operation to get IDs and names for all available Teams.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TeamsV2Response</returns>
        public ApiResponse< TeamsV2Response > SecurityGetTeamsV2WithHttpInfo ()
        {

            var localVarPath = "/api/V2/getteams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetTeamsV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamsV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamsV2Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamsV2Response)));
        }

        /// <summary>
        /// Get all available Teams Operation to get IDs and names for all available Teams.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TeamsV2Response</returns>
        public async System.Threading.Tasks.Task<TeamsV2Response> SecurityGetTeamsV2Async ()
        {
             ApiResponse<TeamsV2Response> localVarResponse = await SecurityGetTeamsV2AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all available Teams Operation to get IDs and names for all available Teams.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TeamsV2Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamsV2Response>> SecurityGetTeamsV2AsyncWithHttpInfo ()
        {

            var localVarPath = "/api/V2/getteams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetTeamsV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamsV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamsV2Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamsV2Response)));
        }

        /// <summary>
        /// Get user information in a batch Operation to get user information in a batch. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object that lists user record IDs or public IDs of users and an error flag.</param>
        /// <returns>UserBatchReadResponse</returns>
        public UserBatchReadResponse SecurityGetUserBatchV1 (UserBatchReadRequest request)
        {
             ApiResponse<UserBatchReadResponse> localVarResponse = SecurityGetUserBatchV1WithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get user information in a batch Operation to get user information in a batch. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object that lists user record IDs or public IDs of users and an error flag.</param>
        /// <returns>ApiResponse of UserBatchReadResponse</returns>
        public ApiResponse< UserBatchReadResponse > SecurityGetUserBatchV1WithHttpInfo (UserBatchReadRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling SecurityApi->SecurityGetUserBatchV1");

            var localVarPath = "/api/V1/getuserbatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetUserBatchV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserBatchReadResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserBatchReadResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserBatchReadResponse)));
        }

        /// <summary>
        /// Get user information in a batch Operation to get user information in a batch. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object that lists user record IDs or public IDs of users and an error flag.</param>
        /// <returns>Task of UserBatchReadResponse</returns>
        public async System.Threading.Tasks.Task<UserBatchReadResponse> SecurityGetUserBatchV1Async (UserBatchReadRequest request)
        {
             ApiResponse<UserBatchReadResponse> localVarResponse = await SecurityGetUserBatchV1AsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get user information in a batch Operation to get user information in a batch. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object that lists user record IDs or public IDs of users and an error flag.</param>
        /// <returns>Task of ApiResponse (UserBatchReadResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserBatchReadResponse>> SecurityGetUserBatchV1AsyncWithHttpInfo (UserBatchReadRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling SecurityApi->SecurityGetUserBatchV1");

            var localVarPath = "/api/V1/getuserbatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetUserBatchV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserBatchReadResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserBatchReadResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserBatchReadResponse)));
        }

        /// <summary>
        /// Get a user by login ID Operation to get detailed user information by login ID. Use to get user record IDs and account settings, for example. This operation has been deprecated by a V2 operation of the same name, but with query string parameters.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginid">Specify the user&#39;s login ID.</param>
        /// <returns>User</returns>
        public User SecurityGetUserByLoginIdV1 (string loginid)
        {
             ApiResponse<User> localVarResponse = SecurityGetUserByLoginIdV1WithHttpInfo(loginid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a user by login ID Operation to get detailed user information by login ID. Use to get user record IDs and account settings, for example. This operation has been deprecated by a V2 operation of the same name, but with query string parameters.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginid">Specify the user&#39;s login ID.</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > SecurityGetUserByLoginIdV1WithHttpInfo (string loginid)
        {
            // verify the required parameter 'loginid' is set
            if (loginid == null)
                throw new ApiException(400, "Missing required parameter 'loginid' when calling SecurityApi->SecurityGetUserByLoginIdV1");

            var localVarPath = "/api/V1/getuserbyloginid/loginid/{loginid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loginid != null) localVarPathParams.Add("loginid", Configuration.ApiClient.ParameterToString(loginid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetUserByLoginIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Get a user by login ID Operation to get detailed user information by login ID. Use to get user record IDs and account settings, for example. This operation has been deprecated by a V2 operation of the same name, but with query string parameters.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginid">Specify the user&#39;s login ID.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> SecurityGetUserByLoginIdV1Async (string loginid)
        {
             ApiResponse<User> localVarResponse = await SecurityGetUserByLoginIdV1AsyncWithHttpInfo(loginid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a user by login ID Operation to get detailed user information by login ID. Use to get user record IDs and account settings, for example. This operation has been deprecated by a V2 operation of the same name, but with query string parameters.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginid">Specify the user&#39;s login ID.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> SecurityGetUserByLoginIdV1AsyncWithHttpInfo (string loginid)
        {
            // verify the required parameter 'loginid' is set
            if (loginid == null)
                throw new ApiException(400, "Missing required parameter 'loginid' when calling SecurityApi->SecurityGetUserByLoginIdV1");

            var localVarPath = "/api/V1/getuserbyloginid/loginid/{loginid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loginid != null) localVarPathParams.Add("loginid", Configuration.ApiClient.ParameterToString(loginid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetUserByLoginIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Get a user by login ID and login ID type Operation to get detailed user information by login ID. Use to get user record IDs and account settings, for example.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginid">Specify the user&#39;s login ID.</param>
        /// <param name="loginidtype">Specify the login ID type.</param>
        /// <returns>User</returns>
        public User SecurityGetUserByLoginIdV2 (string loginid, string loginidtype)
        {
             ApiResponse<User> localVarResponse = SecurityGetUserByLoginIdV2WithHttpInfo(loginid, loginidtype);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a user by login ID and login ID type Operation to get detailed user information by login ID. Use to get user record IDs and account settings, for example.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginid">Specify the user&#39;s login ID.</param>
        /// <param name="loginidtype">Specify the login ID type.</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > SecurityGetUserByLoginIdV2WithHttpInfo (string loginid, string loginidtype)
        {
            // verify the required parameter 'loginid' is set
            if (loginid == null)
                throw new ApiException(400, "Missing required parameter 'loginid' when calling SecurityApi->SecurityGetUserByLoginIdV2");
            // verify the required parameter 'loginidtype' is set
            if (loginidtype == null)
                throw new ApiException(400, "Missing required parameter 'loginidtype' when calling SecurityApi->SecurityGetUserByLoginIdV2");

            var localVarPath = "/api/V2/getuserbyloginid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loginid != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "loginid", loginid)); // query parameter
            if (loginidtype != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "loginidtype", loginidtype)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetUserByLoginIdV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Get a user by login ID and login ID type Operation to get detailed user information by login ID. Use to get user record IDs and account settings, for example.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginid">Specify the user&#39;s login ID.</param>
        /// <param name="loginidtype">Specify the login ID type.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> SecurityGetUserByLoginIdV2Async (string loginid, string loginidtype)
        {
             ApiResponse<User> localVarResponse = await SecurityGetUserByLoginIdV2AsyncWithHttpInfo(loginid, loginidtype);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a user by login ID and login ID type Operation to get detailed user information by login ID. Use to get user record IDs and account settings, for example.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginid">Specify the user&#39;s login ID.</param>
        /// <param name="loginidtype">Specify the login ID type.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> SecurityGetUserByLoginIdV2AsyncWithHttpInfo (string loginid, string loginidtype)
        {
            // verify the required parameter 'loginid' is set
            if (loginid == null)
                throw new ApiException(400, "Missing required parameter 'loginid' when calling SecurityApi->SecurityGetUserByLoginIdV2");
            // verify the required parameter 'loginidtype' is set
            if (loginidtype == null)
                throw new ApiException(400, "Missing required parameter 'loginidtype' when calling SecurityApi->SecurityGetUserByLoginIdV2");

            var localVarPath = "/api/V2/getuserbyloginid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loginid != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "loginid", loginid)); // query parameter
            if (loginidtype != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "loginidtype", loginidtype)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetUserByLoginIdV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Get a user by login ID and login ID type Operation to get detailed user information by login ID. Use to get user record IDs and account settings, for example.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginid">Specify the user&#39;s login ID.</param>
        /// <param name="loginidtype">Specify the login ID type.</param>
        /// <returns>UserV2</returns>
        public UserV2 SecurityGetUserByLoginIdV3 (string loginid, string loginidtype)
        {
             ApiResponse<UserV2> localVarResponse = SecurityGetUserByLoginIdV3WithHttpInfo(loginid, loginidtype);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a user by login ID and login ID type Operation to get detailed user information by login ID. Use to get user record IDs and account settings, for example.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginid">Specify the user&#39;s login ID.</param>
        /// <param name="loginidtype">Specify the login ID type.</param>
        /// <returns>ApiResponse of UserV2</returns>
        public ApiResponse< UserV2 > SecurityGetUserByLoginIdV3WithHttpInfo (string loginid, string loginidtype)
        {
            // verify the required parameter 'loginid' is set
            if (loginid == null)
                throw new ApiException(400, "Missing required parameter 'loginid' when calling SecurityApi->SecurityGetUserByLoginIdV3");
            // verify the required parameter 'loginidtype' is set
            if (loginidtype == null)
                throw new ApiException(400, "Missing required parameter 'loginidtype' when calling SecurityApi->SecurityGetUserByLoginIdV3");

            var localVarPath = "/api/V3/getuserbyloginid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loginid != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "loginid", loginid)); // query parameter
            if (loginidtype != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "loginidtype", loginidtype)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetUserByLoginIdV3", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserV2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserV2) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserV2)));
        }

        /// <summary>
        /// Get a user by login ID and login ID type Operation to get detailed user information by login ID. Use to get user record IDs and account settings, for example.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginid">Specify the user&#39;s login ID.</param>
        /// <param name="loginidtype">Specify the login ID type.</param>
        /// <returns>Task of UserV2</returns>
        public async System.Threading.Tasks.Task<UserV2> SecurityGetUserByLoginIdV3Async (string loginid, string loginidtype)
        {
             ApiResponse<UserV2> localVarResponse = await SecurityGetUserByLoginIdV3AsyncWithHttpInfo(loginid, loginidtype);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a user by login ID and login ID type Operation to get detailed user information by login ID. Use to get user record IDs and account settings, for example.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginid">Specify the user&#39;s login ID.</param>
        /// <param name="loginidtype">Specify the login ID type.</param>
        /// <returns>Task of ApiResponse (UserV2)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserV2>> SecurityGetUserByLoginIdV3AsyncWithHttpInfo (string loginid, string loginidtype)
        {
            // verify the required parameter 'loginid' is set
            if (loginid == null)
                throw new ApiException(400, "Missing required parameter 'loginid' when calling SecurityApi->SecurityGetUserByLoginIdV3");
            // verify the required parameter 'loginidtype' is set
            if (loginidtype == null)
                throw new ApiException(400, "Missing required parameter 'loginidtype' when calling SecurityApi->SecurityGetUserByLoginIdV3");

            var localVarPath = "/api/V3/getuserbyloginid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loginid != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "loginid", loginid)); // query parameter
            if (loginidtype != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "loginidtype", loginidtype)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetUserByLoginIdV3", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserV2>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserV2) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserV2)));
        }

        /// <summary>
        /// Get a user by public ID Operation to get a user by public ID. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicid">Specify the user&#39;s public ID.</param>
        /// <returns>UserReadResponse</returns>
        public UserReadResponse SecurityGetUserByPublicIdV1 (string publicid)
        {
             ApiResponse<UserReadResponse> localVarResponse = SecurityGetUserByPublicIdV1WithHttpInfo(publicid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a user by public ID Operation to get a user by public ID. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicid">Specify the user&#39;s public ID.</param>
        /// <returns>ApiResponse of UserReadResponse</returns>
        public ApiResponse< UserReadResponse > SecurityGetUserByPublicIdV1WithHttpInfo (string publicid)
        {
            // verify the required parameter 'publicid' is set
            if (publicid == null)
                throw new ApiException(400, "Missing required parameter 'publicid' when calling SecurityApi->SecurityGetUserByPublicIdV1");

            var localVarPath = "/api/V1/getuserbypublicid/publicid/{publicid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (publicid != null) localVarPathParams.Add("publicid", Configuration.ApiClient.ParameterToString(publicid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetUserByPublicIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserReadResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserReadResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserReadResponse)));
        }

        /// <summary>
        /// Get a user by public ID Operation to get a user by public ID. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicid">Specify the user&#39;s public ID.</param>
        /// <returns>Task of UserReadResponse</returns>
        public async System.Threading.Tasks.Task<UserReadResponse> SecurityGetUserByPublicIdV1Async (string publicid)
        {
             ApiResponse<UserReadResponse> localVarResponse = await SecurityGetUserByPublicIdV1AsyncWithHttpInfo(publicid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a user by public ID Operation to get a user by public ID. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicid">Specify the user&#39;s public ID.</param>
        /// <returns>Task of ApiResponse (UserReadResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserReadResponse>> SecurityGetUserByPublicIdV1AsyncWithHttpInfo (string publicid)
        {
            // verify the required parameter 'publicid' is set
            if (publicid == null)
                throw new ApiException(400, "Missing required parameter 'publicid' when calling SecurityApi->SecurityGetUserByPublicIdV1");

            var localVarPath = "/api/V1/getuserbypublicid/publicid/{publicid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (publicid != null) localVarPathParams.Add("publicid", Configuration.ApiClient.ParameterToString(publicid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetUserByPublicIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserReadResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserReadResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserReadResponse)));
        }

        /// <summary>
        /// Get a user by public ID Operation to get a user by public ID. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicid">Specify the user&#39;s public ID.</param>
        /// <returns>UserReadV2Response</returns>
        public UserReadV2Response SecurityGetUserByPublicIdV2 (string publicid)
        {
             ApiResponse<UserReadV2Response> localVarResponse = SecurityGetUserByPublicIdV2WithHttpInfo(publicid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a user by public ID Operation to get a user by public ID. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicid">Specify the user&#39;s public ID.</param>
        /// <returns>ApiResponse of UserReadV2Response</returns>
        public ApiResponse< UserReadV2Response > SecurityGetUserByPublicIdV2WithHttpInfo (string publicid)
        {
            // verify the required parameter 'publicid' is set
            if (publicid == null)
                throw new ApiException(400, "Missing required parameter 'publicid' when calling SecurityApi->SecurityGetUserByPublicIdV2");

            var localVarPath = "/api/V2/getuserbypublicid/publicid/{publicid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (publicid != null) localVarPathParams.Add("publicid", Configuration.ApiClient.ParameterToString(publicid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetUserByPublicIdV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserReadV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserReadV2Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserReadV2Response)));
        }

        /// <summary>
        /// Get a user by public ID Operation to get a user by public ID. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicid">Specify the user&#39;s public ID.</param>
        /// <returns>Task of UserReadV2Response</returns>
        public async System.Threading.Tasks.Task<UserReadV2Response> SecurityGetUserByPublicIdV2Async (string publicid)
        {
             ApiResponse<UserReadV2Response> localVarResponse = await SecurityGetUserByPublicIdV2AsyncWithHttpInfo(publicid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a user by public ID Operation to get a user by public ID. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicid">Specify the user&#39;s public ID.</param>
        /// <returns>Task of ApiResponse (UserReadV2Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserReadV2Response>> SecurityGetUserByPublicIdV2AsyncWithHttpInfo (string publicid)
        {
            // verify the required parameter 'publicid' is set
            if (publicid == null)
                throw new ApiException(400, "Missing required parameter 'publicid' when calling SecurityApi->SecurityGetUserByPublicIdV2");

            var localVarPath = "/api/V2/getuserbypublicid/publicid/{publicid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (publicid != null) localVarPathParams.Add("publicid", Configuration.ApiClient.ParameterToString(publicid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetUserByPublicIdV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserReadV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserReadV2Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserReadV2Response)));
        }

        /// <summary>
        /// Get users in a Security Group Operation to get the users in a specified Security Group. Use \&quot;Get all available Security Groups\&quot; to get Security Group record IDs. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID.</param>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> SecurityGetUsersInSecurityGroupV1 (string groupid)
        {
             ApiResponse<List<User>> localVarResponse = SecurityGetUsersInSecurityGroupV1WithHttpInfo(groupid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get users in a Security Group Operation to get the users in a specified Security Group. Use \&quot;Get all available Security Groups\&quot; to get Security Group record IDs. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID.</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public ApiResponse< List<User> > SecurityGetUsersInSecurityGroupV1WithHttpInfo (string groupid)
        {
            // verify the required parameter 'groupid' is set
            if (groupid == null)
                throw new ApiException(400, "Missing required parameter 'groupid' when calling SecurityApi->SecurityGetUsersInSecurityGroupV1");

            var localVarPath = "/api/V1/getusersinsecuritygroup/groupid/{groupid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupid != null) localVarPathParams.Add("groupid", Configuration.ApiClient.ParameterToString(groupid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetUsersInSecurityGroupV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<User>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<User>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<User>)));
        }

        /// <summary>
        /// Get users in a Security Group Operation to get the users in a specified Security Group. Use \&quot;Get all available Security Groups\&quot; to get Security Group record IDs. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID.</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> SecurityGetUsersInSecurityGroupV1Async (string groupid)
        {
             ApiResponse<List<User>> localVarResponse = await SecurityGetUsersInSecurityGroupV1AsyncWithHttpInfo(groupid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get users in a Security Group Operation to get the users in a specified Security Group. Use \&quot;Get all available Security Groups\&quot; to get Security Group record IDs. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID.</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<User>>> SecurityGetUsersInSecurityGroupV1AsyncWithHttpInfo (string groupid)
        {
            // verify the required parameter 'groupid' is set
            if (groupid == null)
                throw new ApiException(400, "Missing required parameter 'groupid' when calling SecurityApi->SecurityGetUsersInSecurityGroupV1");

            var localVarPath = "/api/V1/getusersinsecuritygroup/groupid/{groupid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupid != null) localVarPathParams.Add("groupid", Configuration.ApiClient.ParameterToString(groupid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetUsersInSecurityGroupV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<User>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<User>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<User>)));
        }

        /// <summary>
        /// Get users in a Security Group Operation to get the users in a specified Security Group. Use \&quot;Get all available Security Groups\&quot; to get Security Group record IDs. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID.</param>
        /// <returns>UserReadV2Response</returns>
        public UserReadV2Response SecurityGetUsersInSecurityGroupV2 (string groupid)
        {
             ApiResponse<UserReadV2Response> localVarResponse = SecurityGetUsersInSecurityGroupV2WithHttpInfo(groupid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get users in a Security Group Operation to get the users in a specified Security Group. Use \&quot;Get all available Security Groups\&quot; to get Security Group record IDs. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID.</param>
        /// <returns>ApiResponse of UserReadV2Response</returns>
        public ApiResponse< UserReadV2Response > SecurityGetUsersInSecurityGroupV2WithHttpInfo (string groupid)
        {
            // verify the required parameter 'groupid' is set
            if (groupid == null)
                throw new ApiException(400, "Missing required parameter 'groupid' when calling SecurityApi->SecurityGetUsersInSecurityGroupV2");

            var localVarPath = "/api/V2/getusersinsecuritygroup/groupid/{groupid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupid != null) localVarPathParams.Add("groupid", Configuration.ApiClient.ParameterToString(groupid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetUsersInSecurityGroupV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserReadV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserReadV2Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserReadV2Response)));
        }

        /// <summary>
        /// Get users in a Security Group Operation to get the users in a specified Security Group. Use \&quot;Get all available Security Groups\&quot; to get Security Group record IDs. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID.</param>
        /// <returns>Task of UserReadV2Response</returns>
        public async System.Threading.Tasks.Task<UserReadV2Response> SecurityGetUsersInSecurityGroupV2Async (string groupid)
        {
             ApiResponse<UserReadV2Response> localVarResponse = await SecurityGetUsersInSecurityGroupV2AsyncWithHttpInfo(groupid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get users in a Security Group Operation to get the users in a specified Security Group. Use \&quot;Get all available Security Groups\&quot; to get Security Group record IDs. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupid">Specify the Security Group ID.</param>
        /// <returns>Task of ApiResponse (UserReadV2Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserReadV2Response>> SecurityGetUsersInSecurityGroupV2AsyncWithHttpInfo (string groupid)
        {
            // verify the required parameter 'groupid' is set
            if (groupid == null)
                throw new ApiException(400, "Missing required parameter 'groupid' when calling SecurityApi->SecurityGetUsersInSecurityGroupV2");

            var localVarPath = "/api/V2/getusersinsecuritygroup/groupid/{groupid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupid != null) localVarPathParams.Add("groupid", Configuration.ApiClient.ParameterToString(groupid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetUsersInSecurityGroupV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserReadV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserReadV2Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserReadV2Response)));
        }

        /// <summary>
        /// Get Team assignments for a user Operation to get Team assignments for a user. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userRecordId">Specify the user record ID.</param>
        /// <returns>TeamsResponse</returns>
        public TeamsResponse SecurityGetUsersTeamsV1 (string userRecordId)
        {
             ApiResponse<TeamsResponse> localVarResponse = SecurityGetUsersTeamsV1WithHttpInfo(userRecordId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Team assignments for a user Operation to get Team assignments for a user. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userRecordId">Specify the user record ID.</param>
        /// <returns>ApiResponse of TeamsResponse</returns>
        public ApiResponse< TeamsResponse > SecurityGetUsersTeamsV1WithHttpInfo (string userRecordId)
        {
            // verify the required parameter 'userRecordId' is set
            if (userRecordId == null)
                throw new ApiException(400, "Missing required parameter 'userRecordId' when calling SecurityApi->SecurityGetUsersTeamsV1");

            var localVarPath = "/api/V1/getusersteams/userrecordid/{userRecordId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userRecordId != null) localVarPathParams.Add("userRecordId", Configuration.ApiClient.ParameterToString(userRecordId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetUsersTeamsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamsResponse)));
        }

        /// <summary>
        /// Get Team assignments for a user Operation to get Team assignments for a user. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userRecordId">Specify the user record ID.</param>
        /// <returns>Task of TeamsResponse</returns>
        public async System.Threading.Tasks.Task<TeamsResponse> SecurityGetUsersTeamsV1Async (string userRecordId)
        {
             ApiResponse<TeamsResponse> localVarResponse = await SecurityGetUsersTeamsV1AsyncWithHttpInfo(userRecordId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Team assignments for a user Operation to get Team assignments for a user. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userRecordId">Specify the user record ID.</param>
        /// <returns>Task of ApiResponse (TeamsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamsResponse>> SecurityGetUsersTeamsV1AsyncWithHttpInfo (string userRecordId)
        {
            // verify the required parameter 'userRecordId' is set
            if (userRecordId == null)
                throw new ApiException(400, "Missing required parameter 'userRecordId' when calling SecurityApi->SecurityGetUsersTeamsV1");

            var localVarPath = "/api/V1/getusersteams/userrecordid/{userRecordId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userRecordId != null) localVarPathParams.Add("userRecordId", Configuration.ApiClient.ParameterToString(userRecordId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetUsersTeamsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamsResponse)));
        }

        /// <summary>
        /// Get Team assignments for a user Operation to get Team assignments for a user. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userRecordId">Specify the user record ID.</param>
        /// <returns>TeamsV2Response</returns>
        public TeamsV2Response SecurityGetUsersTeamsV2 (string userRecordId)
        {
             ApiResponse<TeamsV2Response> localVarResponse = SecurityGetUsersTeamsV2WithHttpInfo(userRecordId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Team assignments for a user Operation to get Team assignments for a user. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userRecordId">Specify the user record ID.</param>
        /// <returns>ApiResponse of TeamsV2Response</returns>
        public ApiResponse< TeamsV2Response > SecurityGetUsersTeamsV2WithHttpInfo (string userRecordId)
        {
            // verify the required parameter 'userRecordId' is set
            if (userRecordId == null)
                throw new ApiException(400, "Missing required parameter 'userRecordId' when calling SecurityApi->SecurityGetUsersTeamsV2");

            var localVarPath = "/api/V2/getusersteams/userrecordid/{userRecordId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userRecordId != null) localVarPathParams.Add("userRecordId", Configuration.ApiClient.ParameterToString(userRecordId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetUsersTeamsV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamsV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamsV2Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamsV2Response)));
        }

        /// <summary>
        /// Get Team assignments for a user Operation to get Team assignments for a user. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userRecordId">Specify the user record ID.</param>
        /// <returns>Task of TeamsV2Response</returns>
        public async System.Threading.Tasks.Task<TeamsV2Response> SecurityGetUsersTeamsV2Async (string userRecordId)
        {
             ApiResponse<TeamsV2Response> localVarResponse = await SecurityGetUsersTeamsV2AsyncWithHttpInfo(userRecordId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Team assignments for a user Operation to get Team assignments for a user. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userRecordId">Specify the user record ID.</param>
        /// <returns>Task of ApiResponse (TeamsV2Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamsV2Response>> SecurityGetUsersTeamsV2AsyncWithHttpInfo (string userRecordId)
        {
            // verify the required parameter 'userRecordId' is set
            if (userRecordId == null)
                throw new ApiException(400, "Missing required parameter 'userRecordId' when calling SecurityApi->SecurityGetUsersTeamsV2");

            var localVarPath = "/api/V2/getusersteams/userrecordid/{userRecordId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userRecordId != null) localVarPathParams.Add("userRecordId", Configuration.ApiClient.ParameterToString(userRecordId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetUsersTeamsV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamsV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamsV2Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamsV2Response)));
        }

        /// <summary>
        /// Get all available Workgroups Operation to get IDs and names for all available Workgroups.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TeamsResponse</returns>
        public TeamsResponse SecurityGetWorkgroupsV1 ()
        {
             ApiResponse<TeamsResponse> localVarResponse = SecurityGetWorkgroupsV1WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all available Workgroups Operation to get IDs and names for all available Workgroups.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TeamsResponse</returns>
        public ApiResponse< TeamsResponse > SecurityGetWorkgroupsV1WithHttpInfo ()
        {

            var localVarPath = "/api/V1/getworkgroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetWorkgroupsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamsResponse)));
        }

        /// <summary>
        /// Get all available Workgroups Operation to get IDs and names for all available Workgroups.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TeamsResponse</returns>
        public async System.Threading.Tasks.Task<TeamsResponse> SecurityGetWorkgroupsV1Async ()
        {
             ApiResponse<TeamsResponse> localVarResponse = await SecurityGetWorkgroupsV1AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all available Workgroups Operation to get IDs and names for all available Workgroups.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TeamsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamsResponse>> SecurityGetWorkgroupsV1AsyncWithHttpInfo ()
        {

            var localVarPath = "/api/V1/getworkgroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetWorkgroupsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamsResponse)));
        }

        /// <summary>
        /// Get all available Workgroups Operation to get IDs and names for all available Workgroups.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>TeamsV2Response</returns>
        public TeamsV2Response SecurityGetWorkgroupsV2 ()
        {
             ApiResponse<TeamsV2Response> localVarResponse = SecurityGetWorkgroupsV2WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all available Workgroups Operation to get IDs and names for all available Workgroups.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of TeamsV2Response</returns>
        public ApiResponse< TeamsV2Response > SecurityGetWorkgroupsV2WithHttpInfo ()
        {

            var localVarPath = "/api/V2/getworkgroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetWorkgroupsV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamsV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamsV2Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamsV2Response)));
        }

        /// <summary>
        /// Get all available Workgroups Operation to get IDs and names for all available Workgroups.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of TeamsV2Response</returns>
        public async System.Threading.Tasks.Task<TeamsV2Response> SecurityGetWorkgroupsV2Async ()
        {
             ApiResponse<TeamsV2Response> localVarResponse = await SecurityGetWorkgroupsV2AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all available Workgroups Operation to get IDs and names for all available Workgroups.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (TeamsV2Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamsV2Response>> SecurityGetWorkgroupsV2AsyncWithHttpInfo ()
        {

            var localVarPath = "/api/V2/getworkgroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityGetWorkgroupsV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamsV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamsV2Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamsV2Response)));
        }

        /// <summary>
        /// Remove a user from a team Operation to remove a user from a Team. To get the user&#39;s record ID, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public ID.\&quot; To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Specify the internal ID of the Team you want to remove the user from</param>
        /// <param name="userrecordid">Specify the record ID of the user you want to remove from the Team.</param>
        /// <returns></returns>
        public void SecurityRemoveUserFromTeamV1 (string teamId, string userrecordid)
        {
             SecurityRemoveUserFromTeamV1WithHttpInfo(teamId, userrecordid);
        }

        /// <summary>
        /// Remove a user from a team Operation to remove a user from a Team. To get the user&#39;s record ID, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public ID.\&quot; To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Specify the internal ID of the Team you want to remove the user from</param>
        /// <param name="userrecordid">Specify the record ID of the user you want to remove from the Team.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SecurityRemoveUserFromTeamV1WithHttpInfo (string teamId, string userrecordid)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling SecurityApi->SecurityRemoveUserFromTeamV1");
            // verify the required parameter 'userrecordid' is set
            if (userrecordid == null)
                throw new ApiException(400, "Missing required parameter 'userrecordid' when calling SecurityApi->SecurityRemoveUserFromTeamV1");

            var localVarPath = "/api/V1/removeuserfromteam/teamid/{teamId}/userrecordid/{userrecordid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamId != null) localVarPathParams.Add("teamId", Configuration.ApiClient.ParameterToString(teamId)); // path parameter
            if (userrecordid != null) localVarPathParams.Add("userrecordid", Configuration.ApiClient.ParameterToString(userrecordid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityRemoveUserFromTeamV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove a user from a team Operation to remove a user from a Team. To get the user&#39;s record ID, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public ID.\&quot; To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Specify the internal ID of the Team you want to remove the user from</param>
        /// <param name="userrecordid">Specify the record ID of the user you want to remove from the Team.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SecurityRemoveUserFromTeamV1Async (string teamId, string userrecordid)
        {
             await SecurityRemoveUserFromTeamV1AsyncWithHttpInfo(teamId, userrecordid);

        }

        /// <summary>
        /// Remove a user from a team Operation to remove a user from a Team. To get the user&#39;s record ID, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public ID.\&quot; To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Specify the internal ID of the Team you want to remove the user from</param>
        /// <param name="userrecordid">Specify the record ID of the user you want to remove from the Team.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SecurityRemoveUserFromTeamV1AsyncWithHttpInfo (string teamId, string userrecordid)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling SecurityApi->SecurityRemoveUserFromTeamV1");
            // verify the required parameter 'userrecordid' is set
            if (userrecordid == null)
                throw new ApiException(400, "Missing required parameter 'userrecordid' when calling SecurityApi->SecurityRemoveUserFromTeamV1");

            var localVarPath = "/api/V1/removeuserfromteam/teamid/{teamId}/userrecordid/{userrecordid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamId != null) localVarPathParams.Add("teamId", Configuration.ApiClient.ParameterToString(teamId)); // path parameter
            if (userrecordid != null) localVarPathParams.Add("userrecordid", Configuration.ApiClient.ParameterToString(userrecordid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityRemoveUserFromTeamV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove a user from a team Operation to remove a user from a Team. To get the user&#39;s record ID, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public ID.\&quot; To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Specify the internal ID of the Team you want to remove the user from</param>
        /// <param name="userrecordid">Specify the record ID of the user you want to remove from the Team.</param>
        /// <returns>RemoveUserFromTeamResponse</returns>
        public RemoveUserFromTeamResponse SecurityRemoveUserFromTeamV2 (string teamId, string userrecordid)
        {
             ApiResponse<RemoveUserFromTeamResponse> localVarResponse = SecurityRemoveUserFromTeamV2WithHttpInfo(teamId, userrecordid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a user from a team Operation to remove a user from a Team. To get the user&#39;s record ID, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public ID.\&quot; To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Specify the internal ID of the Team you want to remove the user from</param>
        /// <param name="userrecordid">Specify the record ID of the user you want to remove from the Team.</param>
        /// <returns>ApiResponse of RemoveUserFromTeamResponse</returns>
        public ApiResponse< RemoveUserFromTeamResponse > SecurityRemoveUserFromTeamV2WithHttpInfo (string teamId, string userrecordid)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling SecurityApi->SecurityRemoveUserFromTeamV2");
            // verify the required parameter 'userrecordid' is set
            if (userrecordid == null)
                throw new ApiException(400, "Missing required parameter 'userrecordid' when calling SecurityApi->SecurityRemoveUserFromTeamV2");

            var localVarPath = "/api/V2/removeuserfromteam/teamid/{teamId}/userrecordid/{userrecordid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamId != null) localVarPathParams.Add("teamId", Configuration.ApiClient.ParameterToString(teamId)); // path parameter
            if (userrecordid != null) localVarPathParams.Add("userrecordid", Configuration.ApiClient.ParameterToString(userrecordid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityRemoveUserFromTeamV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveUserFromTeamResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoveUserFromTeamResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoveUserFromTeamResponse)));
        }

        /// <summary>
        /// Remove a user from a team Operation to remove a user from a Team. To get the user&#39;s record ID, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public ID.\&quot; To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Specify the internal ID of the Team you want to remove the user from</param>
        /// <param name="userrecordid">Specify the record ID of the user you want to remove from the Team.</param>
        /// <returns>Task of RemoveUserFromTeamResponse</returns>
        public async System.Threading.Tasks.Task<RemoveUserFromTeamResponse> SecurityRemoveUserFromTeamV2Async (string teamId, string userrecordid)
        {
             ApiResponse<RemoveUserFromTeamResponse> localVarResponse = await SecurityRemoveUserFromTeamV2AsyncWithHttpInfo(teamId, userrecordid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove a user from a team Operation to remove a user from a Team. To get the user&#39;s record ID, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public ID.\&quot; To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Specify the internal ID of the Team you want to remove the user from</param>
        /// <param name="userrecordid">Specify the record ID of the user you want to remove from the Team.</param>
        /// <returns>Task of ApiResponse (RemoveUserFromTeamResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RemoveUserFromTeamResponse>> SecurityRemoveUserFromTeamV2AsyncWithHttpInfo (string teamId, string userrecordid)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new ApiException(400, "Missing required parameter 'teamId' when calling SecurityApi->SecurityRemoveUserFromTeamV2");
            // verify the required parameter 'userrecordid' is set
            if (userrecordid == null)
                throw new ApiException(400, "Missing required parameter 'userrecordid' when calling SecurityApi->SecurityRemoveUserFromTeamV2");

            var localVarPath = "/api/V2/removeuserfromteam/teamid/{teamId}/userrecordid/{userrecordid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (teamId != null) localVarPathParams.Add("teamId", Configuration.ApiClient.ParameterToString(teamId)); // path parameter
            if (userrecordid != null) localVarPathParams.Add("userrecordid", Configuration.ApiClient.ParameterToString(userrecordid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecurityRemoveUserFromTeamV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoveUserFromTeamResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoveUserFromTeamResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoveUserFromTeamResponse)));
        }

        /// <summary>
        /// Create or update a team Operation to create or update a Team or Workgroup. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object to create Teams or Workgroups. To create a Team, use teamType and teamName. To update a team, use teamID. Team type values must be User or CustomerWorkgroup. The teamType cannot be changed for existing Teams or Workgroups.</param>
        /// <returns>TeamSaveResponse</returns>
        public TeamSaveResponse SecuritySaveTeamV1 (TeamSaveRequest request)
        {
             ApiResponse<TeamSaveResponse> localVarResponse = SecuritySaveTeamV1WithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create or update a team Operation to create or update a Team or Workgroup. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object to create Teams or Workgroups. To create a Team, use teamType and teamName. To update a team, use teamID. Team type values must be User or CustomerWorkgroup. The teamType cannot be changed for existing Teams or Workgroups.</param>
        /// <returns>ApiResponse of TeamSaveResponse</returns>
        public ApiResponse< TeamSaveResponse > SecuritySaveTeamV1WithHttpInfo (TeamSaveRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling SecurityApi->SecuritySaveTeamV1");

            var localVarPath = "/api/V1/saveteam";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecuritySaveTeamV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamSaveResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamSaveResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamSaveResponse)));
        }

        /// <summary>
        /// Create or update a team Operation to create or update a Team or Workgroup. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object to create Teams or Workgroups. To create a Team, use teamType and teamName. To update a team, use teamID. Team type values must be User or CustomerWorkgroup. The teamType cannot be changed for existing Teams or Workgroups.</param>
        /// <returns>Task of TeamSaveResponse</returns>
        public async System.Threading.Tasks.Task<TeamSaveResponse> SecuritySaveTeamV1Async (TeamSaveRequest request)
        {
             ApiResponse<TeamSaveResponse> localVarResponse = await SecuritySaveTeamV1AsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create or update a team Operation to create or update a Team or Workgroup. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object to create Teams or Workgroups. To create a Team, use teamType and teamName. To update a team, use teamID. Team type values must be User or CustomerWorkgroup. The teamType cannot be changed for existing Teams or Workgroups.</param>
        /// <returns>Task of ApiResponse (TeamSaveResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamSaveResponse>> SecuritySaveTeamV1AsyncWithHttpInfo (TeamSaveRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling SecurityApi->SecuritySaveTeamV1");

            var localVarPath = "/api/V1/saveteam";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecuritySaveTeamV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamSaveResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TeamSaveResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamSaveResponse)));
        }

        /// <summary>
        /// Create or update users in a batch Operation to create or update users in a batch. To update, specify record ID. To create, leave record ID empty.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object listing user record IDs and an error flag.</param>
        /// <returns>UserBatchSaveResponse</returns>
        public UserBatchSaveResponse SecuritySaveUserBatchV1 (UserBatchSaveRequest request)
        {
             ApiResponse<UserBatchSaveResponse> localVarResponse = SecuritySaveUserBatchV1WithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create or update users in a batch Operation to create or update users in a batch. To update, specify record ID. To create, leave record ID empty.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object listing user record IDs and an error flag.</param>
        /// <returns>ApiResponse of UserBatchSaveResponse</returns>
        public ApiResponse< UserBatchSaveResponse > SecuritySaveUserBatchV1WithHttpInfo (UserBatchSaveRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling SecurityApi->SecuritySaveUserBatchV1");

            var localVarPath = "/api/V1/saveuserbatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecuritySaveUserBatchV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserBatchSaveResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserBatchSaveResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserBatchSaveResponse)));
        }

        /// <summary>
        /// Create or update users in a batch Operation to create or update users in a batch. To update, specify record ID. To create, leave record ID empty.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object listing user record IDs and an error flag.</param>
        /// <returns>Task of UserBatchSaveResponse</returns>
        public async System.Threading.Tasks.Task<UserBatchSaveResponse> SecuritySaveUserBatchV1Async (UserBatchSaveRequest request)
        {
             ApiResponse<UserBatchSaveResponse> localVarResponse = await SecuritySaveUserBatchV1AsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create or update users in a batch Operation to create or update users in a batch. To update, specify record ID. To create, leave record ID empty.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object listing user record IDs and an error flag.</param>
        /// <returns>Task of ApiResponse (UserBatchSaveResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserBatchSaveResponse>> SecuritySaveUserBatchV1AsyncWithHttpInfo (UserBatchSaveRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling SecurityApi->SecuritySaveUserBatchV1");

            var localVarPath = "/api/V1/saveuserbatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecuritySaveUserBatchV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserBatchSaveResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserBatchSaveResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserBatchSaveResponse)));
        }

        /// <summary>
        /// Create or update users in a batch Operation to create or update users in a batch. To update, specify record ID. To create, leave record ID empty.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object listing user record IDs and an error flag.</param>
        /// <returns>UserBatchSaveV2Response</returns>
        public UserBatchSaveV2Response SecuritySaveUserBatchV2 (UserBatchSaveV2Request request)
        {
             ApiResponse<UserBatchSaveV2Response> localVarResponse = SecuritySaveUserBatchV2WithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create or update users in a batch Operation to create or update users in a batch. To update, specify record ID. To create, leave record ID empty.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object listing user record IDs and an error flag.</param>
        /// <returns>ApiResponse of UserBatchSaveV2Response</returns>
        public ApiResponse< UserBatchSaveV2Response > SecuritySaveUserBatchV2WithHttpInfo (UserBatchSaveV2Request request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling SecurityApi->SecuritySaveUserBatchV2");

            var localVarPath = "/api/V2/saveuserbatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecuritySaveUserBatchV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserBatchSaveV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserBatchSaveV2Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserBatchSaveV2Response)));
        }

        /// <summary>
        /// Create or update users in a batch Operation to create or update users in a batch. To update, specify record ID. To create, leave record ID empty.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object listing user record IDs and an error flag.</param>
        /// <returns>Task of UserBatchSaveV2Response</returns>
        public async System.Threading.Tasks.Task<UserBatchSaveV2Response> SecuritySaveUserBatchV2Async (UserBatchSaveV2Request request)
        {
             ApiResponse<UserBatchSaveV2Response> localVarResponse = await SecuritySaveUserBatchV2AsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create or update users in a batch Operation to create or update users in a batch. To update, specify record ID. To create, leave record ID empty.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object listing user record IDs and an error flag.</param>
        /// <returns>Task of ApiResponse (UserBatchSaveV2Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserBatchSaveV2Response>> SecuritySaveUserBatchV2AsyncWithHttpInfo (UserBatchSaveV2Request request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling SecurityApi->SecuritySaveUserBatchV2");

            var localVarPath = "/api/V2/saveuserbatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecuritySaveUserBatchV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserBatchSaveV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserBatchSaveV2Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserBatchSaveV2Response)));
        }

        /// <summary>
        /// Create or update a user Operation to create or update a user.  The response is a collection because if you use a public ID, more than one user could be updated since public IDs may not be unique. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object to specify user parameters and fields with values to be created or updated. The loginId and either the busObRecId or busObPublicId are required.</param>
        /// <returns>UserSaveResponse</returns>
        public UserSaveResponse SecuritySaveUserV1 (UserSaveRequest request)
        {
             ApiResponse<UserSaveResponse> localVarResponse = SecuritySaveUserV1WithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create or update a user Operation to create or update a user.  The response is a collection because if you use a public ID, more than one user could be updated since public IDs may not be unique. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object to specify user parameters and fields with values to be created or updated. The loginId and either the busObRecId or busObPublicId are required.</param>
        /// <returns>ApiResponse of UserSaveResponse</returns>
        public ApiResponse< UserSaveResponse > SecuritySaveUserV1WithHttpInfo (UserSaveRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling SecurityApi->SecuritySaveUserV1");

            var localVarPath = "/api/V1/saveuser";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecuritySaveUserV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserSaveResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserSaveResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSaveResponse)));
        }

        /// <summary>
        /// Create or update a user Operation to create or update a user.  The response is a collection because if you use a public ID, more than one user could be updated since public IDs may not be unique. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object to specify user parameters and fields with values to be created or updated. The loginId and either the busObRecId or busObPublicId are required.</param>
        /// <returns>Task of UserSaveResponse</returns>
        public async System.Threading.Tasks.Task<UserSaveResponse> SecuritySaveUserV1Async (UserSaveRequest request)
        {
             ApiResponse<UserSaveResponse> localVarResponse = await SecuritySaveUserV1AsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create or update a user Operation to create or update a user.  The response is a collection because if you use a public ID, more than one user could be updated since public IDs may not be unique. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object to specify user parameters and fields with values to be created or updated. The loginId and either the busObRecId or busObPublicId are required.</param>
        /// <returns>Task of ApiResponse (UserSaveResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserSaveResponse>> SecuritySaveUserV1AsyncWithHttpInfo (UserSaveRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling SecurityApi->SecuritySaveUserV1");

            var localVarPath = "/api/V1/saveuser";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecuritySaveUserV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserSaveResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserSaveResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSaveResponse)));
        }

        /// <summary>
        /// Create or update a user Operation to create or update a user.  The response is a collection because if you use a public ID, more than one user could be updated since public IDs may not be unique. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object to specify user parameters and fields with values to be created or updated. The loginId and either the busObRecId or busObPublicId are required.</param>
        /// <returns>UserSaveV2Response</returns>
        public UserSaveV2Response SecuritySaveUserV2 (UserSaveV2Request request)
        {
             ApiResponse<UserSaveV2Response> localVarResponse = SecuritySaveUserV2WithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create or update a user Operation to create or update a user.  The response is a collection because if you use a public ID, more than one user could be updated since public IDs may not be unique. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object to specify user parameters and fields with values to be created or updated. The loginId and either the busObRecId or busObPublicId are required.</param>
        /// <returns>ApiResponse of UserSaveV2Response</returns>
        public ApiResponse< UserSaveV2Response > SecuritySaveUserV2WithHttpInfo (UserSaveV2Request request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling SecurityApi->SecuritySaveUserV2");

            var localVarPath = "/api/V2/saveuser";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecuritySaveUserV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserSaveV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserSaveV2Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSaveV2Response)));
        }

        /// <summary>
        /// Create or update a user Operation to create or update a user.  The response is a collection because if you use a public ID, more than one user could be updated since public IDs may not be unique. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object to specify user parameters and fields with values to be created or updated. The loginId and either the busObRecId or busObPublicId are required.</param>
        /// <returns>Task of UserSaveV2Response</returns>
        public async System.Threading.Tasks.Task<UserSaveV2Response> SecuritySaveUserV2Async (UserSaveV2Request request)
        {
             ApiResponse<UserSaveV2Response> localVarResponse = await SecuritySaveUserV2AsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create or update a user Operation to create or update a user.  The response is a collection because if you use a public ID, more than one user could be updated since public IDs may not be unique. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object to specify user parameters and fields with values to be created or updated. The loginId and either the busObRecId or busObPublicId are required.</param>
        /// <returns>Task of ApiResponse (UserSaveV2Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserSaveV2Response>> SecuritySaveUserV2AsyncWithHttpInfo (UserSaveV2Request request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling SecurityApi->SecuritySaveUserV2");

            var localVarPath = "/api/V2/saveuser";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SecuritySaveUserV2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserSaveV2Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserSaveV2Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserSaveV2Response)));
        }

    }
}
