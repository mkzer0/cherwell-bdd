/* 
 * Cherwell Rest API
 *
 * <a href=\"../../index.html\">Cherwell Rest API Documentation</a><br>Select version options from the header drop-down list (to the left of the Client Key box). Then, click Explore to view different versions of operations.
 *
 * OpenAPI spec version: 9.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBusinessObjectApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete Business Objects in a batch
        /// </summary>
        /// <remarks>
        /// Operation to delete a batch of Business Objects.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Specify an array of Business Object IDs and record IDs or public IDs. Use a flag to stop on error or continue on error.</param>
        /// <returns>BatchDeleteResponse</returns>
        BatchDeleteResponse BusinessObjectDeleteBusinessObjectBatchV1 (BatchDeleteRequest request);

        /// <summary>
        /// Delete Business Objects in a batch
        /// </summary>
        /// <remarks>
        /// Operation to delete a batch of Business Objects.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Specify an array of Business Object IDs and record IDs or public IDs. Use a flag to stop on error or continue on error.</param>
        /// <returns>ApiResponse of BatchDeleteResponse</returns>
        ApiResponse<BatchDeleteResponse> BusinessObjectDeleteBusinessObjectBatchV1WithHttpInfo (BatchDeleteRequest request);
        /// <summary>
        /// Delete a Business Object by public ID
        /// </summary>
        /// <remarks>
        /// Operation to delete a Business Object by Business Object ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="publicid">Specify the Business Object public ID.</param>
        /// <returns>DeleteResponse</returns>
        DeleteResponse BusinessObjectDeleteBusinessObjectByPublicIdV1 (string busobid, string publicid);

        /// <summary>
        /// Delete a Business Object by public ID
        /// </summary>
        /// <remarks>
        /// Operation to delete a Business Object by Business Object ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="publicid">Specify the Business Object public ID.</param>
        /// <returns>ApiResponse of DeleteResponse</returns>
        ApiResponse<DeleteResponse> BusinessObjectDeleteBusinessObjectByPublicIdV1WithHttpInfo (string busobid, string publicid);
        /// <summary>
        /// Delete a Business Object by record ID
        /// </summary>
        /// <remarks>
        /// Operation to delete a single Business Object.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid"> Specify the Business Object record ID.</param>
        /// <returns>DeleteResponse</returns>
        DeleteResponse BusinessObjectDeleteBusinessObjectByRecIdV1 (string busobid, string busobrecid);

        /// <summary>
        /// Delete a Business Object by record ID
        /// </summary>
        /// <remarks>
        /// Operation to delete a single Business Object.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid"> Specify the Business Object record ID.</param>
        /// <returns>ApiResponse of DeleteResponse</returns>
        ApiResponse<DeleteResponse> BusinessObjectDeleteBusinessObjectByRecIdV1WithHttpInfo (string busobid, string busobrecid);
        /// <summary>
        /// Delete a related Business Object by public ID
        /// </summary>
        /// <remarks>
        /// Operation to delete a related Business Object. (Use \&quot;Unlink Related Business Object\&quot; to unlink two Business Objects rather that deleting the related Business Object.)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to delete.</param>
        /// <param name="publicid">Specify the public ID for the related Business Object you want to delete. Use only for Business Objects with unique public IDs. Use \&quot;Delete a related Business Object by record ID\&quot; when public IDs are not unique.</param>
        /// <returns>RelatedBusinessObjectResponse</returns>
        RelatedBusinessObjectResponse BusinessObjectDeleteRelatedBusinessObjectByPublicIdV1 (string parentbusobid, string parentbusobrecid, string relationshipid, string publicid);

        /// <summary>
        /// Delete a related Business Object by public ID
        /// </summary>
        /// <remarks>
        /// Operation to delete a related Business Object. (Use \&quot;Unlink Related Business Object\&quot; to unlink two Business Objects rather that deleting the related Business Object.)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to delete.</param>
        /// <param name="publicid">Specify the public ID for the related Business Object you want to delete. Use only for Business Objects with unique public IDs. Use \&quot;Delete a related Business Object by record ID\&quot; when public IDs are not unique.</param>
        /// <returns>ApiResponse of RelatedBusinessObjectResponse</returns>
        ApiResponse<RelatedBusinessObjectResponse> BusinessObjectDeleteRelatedBusinessObjectByPublicIdV1WithHttpInfo (string parentbusobid, string parentbusobrecid, string relationshipid, string publicid);
        /// <summary>
        /// Delete a related Business Object by record ID
        /// </summary>
        /// <remarks>
        /// Operation to delete a related Business Object. (Use \&quot;Unlink Related Business Object\&quot; to unlink two Business Objects rather that deleting the related Business Object.)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to delete.</param>
        /// <param name="busobrecid">Specify the record ID for the related Business Object you want to delete.</param>
        /// <returns>RelatedBusinessObjectResponse</returns>
        RelatedBusinessObjectResponse BusinessObjectDeleteRelatedBusinessObjectByRecIdV1 (string parentbusobid, string parentbusobrecid, string relationshipid, string busobrecid);

        /// <summary>
        /// Delete a related Business Object by record ID
        /// </summary>
        /// <remarks>
        /// Operation to delete a related Business Object. (Use \&quot;Unlink Related Business Object\&quot; to unlink two Business Objects rather that deleting the related Business Object.)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to delete.</param>
        /// <param name="busobrecid">Specify the record ID for the related Business Object you want to delete.</param>
        /// <returns>ApiResponse of RelatedBusinessObjectResponse</returns>
        ApiResponse<RelatedBusinessObjectResponse> BusinessObjectDeleteRelatedBusinessObjectByRecIdV1WithHttpInfo (string parentbusobid, string parentbusobrecid, string relationshipid, string busobrecid);
        /// <summary>
        /// Get lookup values for fields
        /// </summary>
        /// <remarks>
        /// Operation to get potentially valid values for Business Object fields.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object that specifies the Business Object and fields for which values are to be returned.</param>
        /// <returns>FieldValuesLookupResponse</returns>
        FieldValuesLookupResponse BusinessObjectFieldValuesLookupV1 (FieldValuesLookupRequest request);

        /// <summary>
        /// Get lookup values for fields
        /// </summary>
        /// <remarks>
        /// Operation to get potentially valid values for Business Object fields.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object that specifies the Business Object and fields for which values are to be returned.</param>
        /// <returns>ApiResponse of FieldValuesLookupResponse</returns>
        ApiResponse<FieldValuesLookupResponse> BusinessObjectFieldValuesLookupV1WithHttpInfo (FieldValuesLookupRequest request);
        /// <summary>
        /// Get an imported Business Object attachment
        /// </summary>
        /// <remarks>
        /// Operation to get a Business Object attachment that has been imported into the system.  HTTP Range Header can be used but is optional.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentid">Specify the internal ID of the attachment record that contains information about the imported file.</param>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <returns>byte[]</returns>
        byte[] BusinessObjectGetBusinessObjectAttachmentByAttachmentIdV1 (string attachmentid, string busobid, string busobrecid);

        /// <summary>
        /// Get an imported Business Object attachment
        /// </summary>
        /// <remarks>
        /// Operation to get a Business Object attachment that has been imported into the system.  HTTP Range Header can be used but is optional.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentid">Specify the internal ID of the attachment record that contains information about the imported file.</param>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> BusinessObjectGetBusinessObjectAttachmentByAttachmentIdV1WithHttpInfo (string attachmentid, string busobid, string busobrecid);
        /// <summary>
        /// Get attachments by Business Object public ID
        /// </summary>
        /// <remarks>
        /// Operation to get attachments for a Business Object by Business Object ID and public ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="publicid">Specify the Business Object public ID for the record that contains the attachments.</param>
        /// <param name="type">Record attachment type: &lt;/br&gt;None - Not applicable to the REST API. &lt;/br&gt;File - Linked files. &lt;/br&gt;FileManagerFile - Imported files.&lt;/br&gt;BusOb - Attached Business Objects. &lt;/br&gt;History - Information about the attachment, if any is available. For example, an e-mail message may store the name of an attachment sent.&lt;/br&gt;Other - Not applicable to the REST API. &lt;/br&gt;</param>
        /// <param name="attachmenttype">For file types, select the type of attachment: &lt;/br&gt;Imported - Attachment was imported into database. &lt;/br&gt;Linked - Attachment is linked to an external file. &lt;/br&gt;URL - Attachment is a URL.</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>AttachmentsResponse</returns>
        AttachmentsResponse BusinessObjectGetBusinessObjectAttachmentsByIdAndPublicIdV1 (string busobid, string publicid, string type, string attachmenttype, bool? includelinks = null);

        /// <summary>
        /// Get attachments by Business Object public ID
        /// </summary>
        /// <remarks>
        /// Operation to get attachments for a Business Object by Business Object ID and public ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="publicid">Specify the Business Object public ID for the record that contains the attachments.</param>
        /// <param name="type">Record attachment type: &lt;/br&gt;None - Not applicable to the REST API. &lt;/br&gt;File - Linked files. &lt;/br&gt;FileManagerFile - Imported files.&lt;/br&gt;BusOb - Attached Business Objects. &lt;/br&gt;History - Information about the attachment, if any is available. For example, an e-mail message may store the name of an attachment sent.&lt;/br&gt;Other - Not applicable to the REST API. &lt;/br&gt;</param>
        /// <param name="attachmenttype">For file types, select the type of attachment: &lt;/br&gt;Imported - Attachment was imported into database. &lt;/br&gt;Linked - Attachment is linked to an external file. &lt;/br&gt;URL - Attachment is a URL.</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>ApiResponse of AttachmentsResponse</returns>
        ApiResponse<AttachmentsResponse> BusinessObjectGetBusinessObjectAttachmentsByIdAndPublicIdV1WithHttpInfo (string busobid, string publicid, string type, string attachmenttype, bool? includelinks = null);
        /// <summary>
        /// Get attachments by Business Object record ID
        /// </summary>
        /// <remarks>
        /// Operation to get attachments for a Business Object by Business Object ID and record ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <param name="type">Record attachment type: &lt;/br&gt;None - Not applicable to the REST API. &lt;/br&gt;File - Linked files. &lt;/br&gt;FileManagerFile - Imported files.&lt;/br&gt;BusOb - Attached Business Objects. &lt;/br&gt;History - Information about the attachment, if any is available. For example, an e-mail message may store the name of an attachment sent.&lt;/br&gt;Other - Not applicable to the REST API. &lt;/br&gt;</param>
        /// <param name="attachmenttype">For file types, select the type of attachment: &lt;/br&gt;Imported - Attachment was imported into database. &lt;/br&gt;Linked - Attachment is linked to an external file. &lt;/br&gt;URL - Attachment is a URL.</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>AttachmentsResponse</returns>
        AttachmentsResponse BusinessObjectGetBusinessObjectAttachmentsByIdAndRecIdV1 (string busobid, string busobrecid, string type, string attachmenttype, bool? includelinks = null);

        /// <summary>
        /// Get attachments by Business Object record ID
        /// </summary>
        /// <remarks>
        /// Operation to get attachments for a Business Object by Business Object ID and record ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <param name="type">Record attachment type: &lt;/br&gt;None - Not applicable to the REST API. &lt;/br&gt;File - Linked files. &lt;/br&gt;FileManagerFile - Imported files.&lt;/br&gt;BusOb - Attached Business Objects. &lt;/br&gt;History - Information about the attachment, if any is available. For example, an e-mail message may store the name of an attachment sent.&lt;/br&gt;Other - Not applicable to the REST API. &lt;/br&gt;</param>
        /// <param name="attachmenttype">For file types, select the type of attachment: &lt;/br&gt;Imported - Attachment was imported into database. &lt;/br&gt;Linked - Attachment is linked to an external file. &lt;/br&gt;URL - Attachment is a URL.</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>ApiResponse of AttachmentsResponse</returns>
        ApiResponse<AttachmentsResponse> BusinessObjectGetBusinessObjectAttachmentsByIdAndRecIdV1WithHttpInfo (string busobid, string busobrecid, string type, string attachmenttype, bool? includelinks = null);
        /// <summary>
        /// Get attachments by Business Object name and public ID
        /// </summary>
        /// <remarks>
        /// Operation to get attachments for a Business Object by Business Object Name and public ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="publicid">Specify the Business Object public ID for the record that contains the attachments.</param>
        /// <param name="type">Record attachment type: &lt;/br&gt;None - Not applicable to the REST API. &lt;/br&gt;File - Linked files. &lt;/br&gt;FileManagerFile - Imported files.&lt;/br&gt;BusOb - Attached Business Objects. &lt;/br&gt;History - Information about the attachment, if any is available. For example, an e-mail message may store the name of an attachment sent.&lt;/br&gt;Other - Not applicable to the REST API. &lt;/br&gt;</param>
        /// <param name="attachmenttype">For file types, select the type of attachment: &lt;/br&gt;Imported - Attachment was imported into database. &lt;/br&gt;Linked - Attachment is linked to an external file. &lt;/br&gt;URL - Attachment is a URL.</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>AttachmentsResponse</returns>
        AttachmentsResponse BusinessObjectGetBusinessObjectAttachmentsByNameAndPublicIdV1 (string busobname, string publicid, string type, string attachmenttype, bool? includelinks = null);

        /// <summary>
        /// Get attachments by Business Object name and public ID
        /// </summary>
        /// <remarks>
        /// Operation to get attachments for a Business Object by Business Object Name and public ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="publicid">Specify the Business Object public ID for the record that contains the attachments.</param>
        /// <param name="type">Record attachment type: &lt;/br&gt;None - Not applicable to the REST API. &lt;/br&gt;File - Linked files. &lt;/br&gt;FileManagerFile - Imported files.&lt;/br&gt;BusOb - Attached Business Objects. &lt;/br&gt;History - Information about the attachment, if any is available. For example, an e-mail message may store the name of an attachment sent.&lt;/br&gt;Other - Not applicable to the REST API. &lt;/br&gt;</param>
        /// <param name="attachmenttype">For file types, select the type of attachment: &lt;/br&gt;Imported - Attachment was imported into database. &lt;/br&gt;Linked - Attachment is linked to an external file. &lt;/br&gt;URL - Attachment is a URL.</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>ApiResponse of AttachmentsResponse</returns>
        ApiResponse<AttachmentsResponse> BusinessObjectGetBusinessObjectAttachmentsByNameAndPublicIdV1WithHttpInfo (string busobname, string publicid, string type, string attachmenttype, bool? includelinks = null);
        /// <summary>
        /// Get attachments by Business Object name and record ID
        /// </summary>
        /// <remarks>
        /// Operation to get attachments for a Business Object by name and record ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <param name="type">Record attachment type: &lt;/br&gt;None - Not applicable to the REST API. &lt;/br&gt;File - Linked files. &lt;/br&gt;FileManagerFile - Imported files.&lt;/br&gt;BusOb - Attached Business Objects. &lt;/br&gt;History - Information about the attachment, if any is available. For example, an e-mail message may store the name of an attachment sent.&lt;/br&gt;Other - Not applicable to the REST API. &lt;/br&gt;</param>
        /// <param name="attachmenttype">For file types, select the type of attachment: &lt;/br&gt;Imported - Attachment was imported into database. &lt;/br&gt;Linked - Attachment is linked to an external file. &lt;/br&gt;URL - Attachment is a URL.</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>AttachmentsResponse</returns>
        AttachmentsResponse BusinessObjectGetBusinessObjectAttachmentsByNameAndRecIdV1 (string busobname, string busobrecid, string type, string attachmenttype, bool? includelinks = null);

        /// <summary>
        /// Get attachments by Business Object name and record ID
        /// </summary>
        /// <remarks>
        /// Operation to get attachments for a Business Object by name and record ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <param name="type">Record attachment type: &lt;/br&gt;None - Not applicable to the REST API. &lt;/br&gt;File - Linked files. &lt;/br&gt;FileManagerFile - Imported files.&lt;/br&gt;BusOb - Attached Business Objects. &lt;/br&gt;History - Information about the attachment, if any is available. For example, an e-mail message may store the name of an attachment sent.&lt;/br&gt;Other - Not applicable to the REST API. &lt;/br&gt;</param>
        /// <param name="attachmenttype">For file types, select the type of attachment: &lt;/br&gt;Imported - Attachment was imported into database. &lt;/br&gt;Linked - Attachment is linked to an external file. &lt;/br&gt;URL - Attachment is a URL.</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>ApiResponse of AttachmentsResponse</returns>
        ApiResponse<AttachmentsResponse> BusinessObjectGetBusinessObjectAttachmentsByNameAndRecIdV1WithHttpInfo (string busobname, string busobrecid, string type, string attachmenttype, bool? includelinks = null);
        /// <summary>
        /// Get Business Object attachments by request object
        /// </summary>
        /// <remarks>
        /// Operation to get attachments for a Business Object by attachments request object.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentsRequest">Object with all the parameters to request an attachments list. You can also request a list of types to get more than just one type at a time.</param>
        /// <returns>AttachmentsResponse</returns>
        AttachmentsResponse BusinessObjectGetBusinessObjectAttachmentsV1 (AttachmentsRequest attachmentsRequest);

        /// <summary>
        /// Get Business Object attachments by request object
        /// </summary>
        /// <remarks>
        /// Operation to get attachments for a Business Object by attachments request object.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentsRequest">Object with all the parameters to request an attachments list. You can also request a list of types to get more than just one type at a time.</param>
        /// <returns>ApiResponse of AttachmentsResponse</returns>
        ApiResponse<AttachmentsResponse> BusinessObjectGetBusinessObjectAttachmentsV1WithHttpInfo (AttachmentsRequest attachmentsRequest);
        /// <summary>
        /// Get a batch of Business Object records
        /// </summary>
        /// <remarks>
        /// Operation that returns a batch of Business Object records that includes a list of field record IDs, display names, and values for each record.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Specify an array of Business Object IDs, record IDs, or public IDs. Use a flag to stop on error or continue on error.</param>
        /// <returns>BatchReadResponse</returns>
        BatchReadResponse BusinessObjectGetBusinessObjectBatchV1 (BatchReadRequest request);

        /// <summary>
        /// Get a batch of Business Object records
        /// </summary>
        /// <remarks>
        /// Operation that returns a batch of Business Object records that includes a list of field record IDs, display names, and values for each record.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Specify an array of Business Object IDs, record IDs, or public IDs. Use a flag to stop on error or continue on error.</param>
        /// <returns>ApiResponse of BatchReadResponse</returns>
        ApiResponse<BatchReadResponse> BusinessObjectGetBusinessObjectBatchV1WithHttpInfo (BatchReadRequest request);
        /// <summary>
        /// Get a Business Object record
        /// </summary>
        /// <remarks>
        /// Operation that returns a Business Object record that includes a list of fields and their record IDs, names, and set values.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="publicid">Specify the Business Object public ID.</param>
        /// <returns>ReadResponse</returns>
        ReadResponse BusinessObjectGetBusinessObjectByPublicIdV1 (string busobid, string publicid);

        /// <summary>
        /// Get a Business Object record
        /// </summary>
        /// <remarks>
        /// Operation that returns a Business Object record that includes a list of fields and their record IDs, names, and set values.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="publicid">Specify the Business Object public ID.</param>
        /// <returns>ApiResponse of ReadResponse</returns>
        ApiResponse<ReadResponse> BusinessObjectGetBusinessObjectByPublicIdV1WithHttpInfo (string busobid, string publicid);
        /// <summary>
        /// Get a Business Object record
        /// </summary>
        /// <remarks>
        /// Operation that returns a Business Object record that includes a list of fields and their record IDs, names, and set values.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <returns>ReadResponse</returns>
        ReadResponse BusinessObjectGetBusinessObjectByRecIdV1 (string busobid, string busobrecid);

        /// <summary>
        /// Get a Business Object record
        /// </summary>
        /// <remarks>
        /// Operation that returns a Business Object record that includes a list of fields and their record IDs, names, and set values.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <returns>ApiResponse of ReadResponse</returns>
        ApiResponse<ReadResponse> BusinessObjectGetBusinessObjectByRecIdV1WithHttpInfo (string busobid, string busobrecid);
        /// <summary>
        /// Get a Business Object by its scan code and Business Object ID.
        /// </summary>
        /// <remarks>
        /// Operation to get a Business Object based on its associated scan code and Business Object ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanCode">The scan code for a Business Object record.</param>
        /// <param name="busobid">The Business Object ID.</param>
        /// <returns>BarcodeLookupResponse</returns>
        BarcodeLookupResponse BusinessObjectGetBusinessObjectByScanCodeBusObIdV1 (string scanCode, string busobid);

        /// <summary>
        /// Get a Business Object by its scan code and Business Object ID.
        /// </summary>
        /// <remarks>
        /// Operation to get a Business Object based on its associated scan code and Business Object ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanCode">The scan code for a Business Object record.</param>
        /// <param name="busobid">The Business Object ID.</param>
        /// <returns>ApiResponse of BarcodeLookupResponse</returns>
        ApiResponse<BarcodeLookupResponse> BusinessObjectGetBusinessObjectByScanCodeBusObIdV1WithHttpInfo (string scanCode, string busobid);
        /// <summary>
        /// Get a Business Object by its scan code and Business Object name.
        /// </summary>
        /// <remarks>
        /// Operation to get a Business Object based on its associated scan code and Business Object name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanCode">The scan code for a Business Object record.</param>
        /// <param name="busobname">The Business Bbject name.</param>
        /// <returns>BarcodeLookupResponse</returns>
        BarcodeLookupResponse BusinessObjectGetBusinessObjectByScanCodeBusObNameV1 (string scanCode, string busobname);

        /// <summary>
        /// Get a Business Object by its scan code and Business Object name.
        /// </summary>
        /// <remarks>
        /// Operation to get a Business Object based on its associated scan code and Business Object name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanCode">The scan code for a Business Object record.</param>
        /// <param name="busobname">The Business Bbject name.</param>
        /// <returns>ApiResponse of BarcodeLookupResponse</returns>
        ApiResponse<BarcodeLookupResponse> BusinessObjectGetBusinessObjectByScanCodeBusObNameV1WithHttpInfo (string scanCode, string busobname);
        /// <summary>
        /// Get a Business Object schema
        /// </summary>
        /// <remarks>
        /// Operation that returns the schema for a Business Object and, optionally, its related Business Objects.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobId">Specify the Business Object ID.</param>
        /// <param name="includerelationships">Flag to include schemas for related Business Object. Default is false. (optional)</param>
        /// <returns>SchemaResponse</returns>
        SchemaResponse BusinessObjectGetBusinessObjectSchemaV1 (string busobId, bool? includerelationships = null);

        /// <summary>
        /// Get a Business Object schema
        /// </summary>
        /// <remarks>
        /// Operation that returns the schema for a Business Object and, optionally, its related Business Objects.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobId">Specify the Business Object ID.</param>
        /// <param name="includerelationships">Flag to include schemas for related Business Object. Default is false. (optional)</param>
        /// <returns>ApiResponse of SchemaResponse</returns>
        ApiResponse<SchemaResponse> BusinessObjectGetBusinessObjectSchemaV1WithHttpInfo (string busobId, bool? includerelationships = null);
        /// <summary>
        /// Get Business Object summaries by type
        /// </summary>
        /// <remarks>
        /// Operation that returns a list of Business Object summaries by type (Major, Supporting, Lookup, Groups, and All). 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Use to show:&lt;br /&gt;All - All objects&lt;br /&gt;Major - Major objects only&lt;br /&gt;Supporting - Supporting objects only&lt;br /&gt;Lookup - Lookup objects only&lt;br /&gt;Groups - Groups only</param>
        /// <returns>List&lt;Summary&gt;</returns>
        List<Summary> BusinessObjectGetBusinessObjectSummariesV1 (string type);

        /// <summary>
        /// Get Business Object summaries by type
        /// </summary>
        /// <remarks>
        /// Operation that returns a list of Business Object summaries by type (Major, Supporting, Lookup, Groups, and All). 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Use to show:&lt;br /&gt;All - All objects&lt;br /&gt;Major - Major objects only&lt;br /&gt;Supporting - Supporting objects only&lt;br /&gt;Lookup - Lookup objects only&lt;br /&gt;Groups - Groups only</param>
        /// <returns>ApiResponse of List&lt;Summary&gt;</returns>
        ApiResponse<List<Summary>> BusinessObjectGetBusinessObjectSummariesV1WithHttpInfo (string type);
        /// <summary>
        /// Get a Business Object summary by ID
        /// </summary>
        /// <remarks>
        /// Operation that returns a single Business Object summary by ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify a Business Object ID to get its summary.</param>
        /// <returns>List&lt;Summary&gt;</returns>
        List<Summary> BusinessObjectGetBusinessObjectSummaryByIdV1 (string busobid);

        /// <summary>
        /// Get a Business Object summary by ID
        /// </summary>
        /// <remarks>
        /// Operation that returns a single Business Object summary by ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify a Business Object ID to get its summary.</param>
        /// <returns>ApiResponse of List&lt;Summary&gt;</returns>
        ApiResponse<List<Summary>> BusinessObjectGetBusinessObjectSummaryByIdV1WithHttpInfo (string busobid);
        /// <summary>
        /// Get a Business Object summary by name
        /// </summary>
        /// <remarks>
        /// Operation that returns a single Business Object summary by name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobname">Specify a Business Object name to get its summary.</param>
        /// <returns>List&lt;Summary&gt;</returns>
        List<Summary> BusinessObjectGetBusinessObjectSummaryByNameV1 (string busobname);

        /// <summary>
        /// Get a Business Object summary by name
        /// </summary>
        /// <remarks>
        /// Operation that returns a single Business Object summary by name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobname">Specify a Business Object name to get its summary.</param>
        /// <returns>ApiResponse of List&lt;Summary&gt;</returns>
        ApiResponse<List<Summary>> BusinessObjectGetBusinessObjectSummaryByNameV1WithHttpInfo (string busobname);
        /// <summary>
        /// Get Business Object templates for create
        /// </summary>
        /// <remarks>
        /// Operation that returns a template to create Business Objects.  The template includes placeholders for field values. You can then send the template with these values to the Business Object Save operation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Specify the Business Object ID. Use true to include all required fields or all fields. Specify an optional fields list by adding field names in a comma-delimited list [\&quot;field1\&quot;, \&quot;field2\&quot;]. </param>
        /// <returns>TemplateResponse</returns>
        TemplateResponse BusinessObjectGetBusinessObjectTemplateV1 (TemplateRequest request);

        /// <summary>
        /// Get Business Object templates for create
        /// </summary>
        /// <remarks>
        /// Operation that returns a template to create Business Objects.  The template includes placeholders for field values. You can then send the template with these values to the Business Object Save operation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Specify the Business Object ID. Use true to include all required fields or all fields. Specify an optional fields list by adding field names in a comma-delimited list [\&quot;field1\&quot;, \&quot;field2\&quot;]. </param>
        /// <returns>ApiResponse of TemplateResponse</returns>
        ApiResponse<TemplateResponse> BusinessObjectGetBusinessObjectTemplateV1WithHttpInfo (TemplateRequest request);
        /// <summary>
        /// Get related Business Objects using a request object
        /// </summary>
        /// <remarks>
        /// Operation to get related Business Objects for a specific relationship. Specify a list of fields to include in the response. The order of parameter usage and overrides is: all fields set to true overrides default overrides;  custom grid overrides field list settings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relatedBusinessObjectRequest">Request object containing all the possible parameters to get related Business Objects.</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>RelatedBusinessObjectResponse</returns>
        RelatedBusinessObjectResponse BusinessObjectGetRelatedBusinessObjectByRequestV1 (RelatedBusinessObjectRequest relatedBusinessObjectRequest, bool? includelinks = null);

        /// <summary>
        /// Get related Business Objects using a request object
        /// </summary>
        /// <remarks>
        /// Operation to get related Business Objects for a specific relationship. Specify a list of fields to include in the response. The order of parameter usage and overrides is: all fields set to true overrides default overrides;  custom grid overrides field list settings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relatedBusinessObjectRequest">Request object containing all the possible parameters to get related Business Objects.</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>ApiResponse of RelatedBusinessObjectResponse</returns>
        ApiResponse<RelatedBusinessObjectResponse> BusinessObjectGetRelatedBusinessObjectByRequestV1WithHttpInfo (RelatedBusinessObjectRequest relatedBusinessObjectRequest, bool? includelinks = null);
        /// <summary>
        /// Get related Business Objects by ID
        /// </summary>
        /// <remarks>
        /// Operation to get the related objects for a Business Object relationship specifying all fields or default grid as the field to return.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object.</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to return.</param>
        /// <param name="pageNumber">Specify the page number of the result set to return. (optional)</param>
        /// <param name="pageSize">Specify the number of rows to return per page. (optional)</param>
        /// <param name="allfields">Flag to include all related Business Object fields.  Default is true if not supplied.  If true, then UseDefaultGrid is not used. (optional)</param>
        /// <param name="usedefaultgrid">Flag to trigger the use of the related Business Objects default grid for the list of fields to return. (optional)</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>RelatedBusinessObjectResponse</returns>
        RelatedBusinessObjectResponse BusinessObjectGetRelatedBusinessObjectV1 (string parentbusobid, string parentbusobrecid, string relationshipid, int? pageNumber = null, int? pageSize = null, bool? allfields = null, bool? usedefaultgrid = null, bool? includelinks = null);

        /// <summary>
        /// Get related Business Objects by ID
        /// </summary>
        /// <remarks>
        /// Operation to get the related objects for a Business Object relationship specifying all fields or default grid as the field to return.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object.</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to return.</param>
        /// <param name="pageNumber">Specify the page number of the result set to return. (optional)</param>
        /// <param name="pageSize">Specify the number of rows to return per page. (optional)</param>
        /// <param name="allfields">Flag to include all related Business Object fields.  Default is true if not supplied.  If true, then UseDefaultGrid is not used. (optional)</param>
        /// <param name="usedefaultgrid">Flag to trigger the use of the related Business Objects default grid for the list of fields to return. (optional)</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>ApiResponse of RelatedBusinessObjectResponse</returns>
        ApiResponse<RelatedBusinessObjectResponse> BusinessObjectGetRelatedBusinessObjectV1WithHttpInfo (string parentbusobid, string parentbusobrecid, string relationshipid, int? pageNumber = null, int? pageSize = null, bool? allfields = null, bool? usedefaultgrid = null, bool? includelinks = null);
        /// <summary>
        /// Get related Business Objects custom grid
        /// </summary>
        /// <remarks>
        /// Operation to get related Business Objects for a specific relationship. Specify a custom grid ID as the fields to return.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object.</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to return.</param>
        /// <param name="gridid">Specify the ID for the custom grid that contains the field list.</param>
        /// <param name="pageNumber">Specify the page number of the result set to return. (optional)</param>
        /// <param name="pageSize">Specify the number of rows to return per page. (optional)</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>RelatedBusinessObjectResponse</returns>
        RelatedBusinessObjectResponse BusinessObjectGetRelatedBusinessObjectWithCustomGridV1 (string parentbusobid, string parentbusobrecid, string relationshipid, string gridid, int? pageNumber = null, int? pageSize = null, bool? includelinks = null);

        /// <summary>
        /// Get related Business Objects custom grid
        /// </summary>
        /// <remarks>
        /// Operation to get related Business Objects for a specific relationship. Specify a custom grid ID as the fields to return.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object.</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to return.</param>
        /// <param name="gridid">Specify the ID for the custom grid that contains the field list.</param>
        /// <param name="pageNumber">Specify the page number of the result set to return. (optional)</param>
        /// <param name="pageSize">Specify the number of rows to return per page. (optional)</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>ApiResponse of RelatedBusinessObjectResponse</returns>
        ApiResponse<RelatedBusinessObjectResponse> BusinessObjectGetRelatedBusinessObjectWithCustomGridV1WithHttpInfo (string parentbusobid, string parentbusobrecid, string relationshipid, string gridid, int? pageNumber = null, int? pageSize = null, bool? includelinks = null);
        /// <summary>
        /// Link related Business Objects
        /// </summary>
        /// <remarks>
        /// Operation to link related Business Objects. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object.</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to link.</param>
        /// <param name="busobid">Specify the Business Object ID of the Business Object to be linked.</param>
        /// <param name="busobrecid">Specify the Business Object record ID of the Business Object to be linked.</param>
        /// <returns>RelatedBusinessObjectResponse</returns>
        RelatedBusinessObjectResponse BusinessObjectLinkRelatedBusinessObjectByRecIdV1 (string parentbusobid, string parentbusobrecid, string relationshipid, string busobid, string busobrecid);

        /// <summary>
        /// Link related Business Objects
        /// </summary>
        /// <remarks>
        /// Operation to link related Business Objects. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object.</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to link.</param>
        /// <param name="busobid">Specify the Business Object ID of the Business Object to be linked.</param>
        /// <param name="busobrecid">Specify the Business Object record ID of the Business Object to be linked.</param>
        /// <returns>ApiResponse of RelatedBusinessObjectResponse</returns>
        ApiResponse<RelatedBusinessObjectResponse> BusinessObjectLinkRelatedBusinessObjectByRecIdV1WithHttpInfo (string parentbusobid, string parentbusobrecid, string relationshipid, string busobid, string busobrecid);
        /// <summary>
        /// Remove an attachment by Business Object ID and public ID
        /// </summary>
        /// <remarks>
        /// Operation to remove an attachment from a Business Object using the attachment record ID, Business Object ID, and Business Object public ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentid">Specify the internal ID of the attachment record.</param>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="publicid">Specify the Business Object public ID.</param>
        /// <returns></returns>
        void BusinessObjectRemoveBusinessObjectAttachmentByIdAndPublicIdV1 (string attachmentid, string busobid, string publicid);

        /// <summary>
        /// Remove an attachment by Business Object ID and public ID
        /// </summary>
        /// <remarks>
        /// Operation to remove an attachment from a Business Object using the attachment record ID, Business Object ID, and Business Object public ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentid">Specify the internal ID of the attachment record.</param>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="publicid">Specify the Business Object public ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BusinessObjectRemoveBusinessObjectAttachmentByIdAndPublicIdV1WithHttpInfo (string attachmentid, string busobid, string publicid);
        /// <summary>
        /// Remove an attachment by Business Object ID and record ID
        /// </summary>
        /// <remarks>
        /// Operation to remove an attachment from a Business Object using the attachment record ID, Business Object ID, and Business Object record ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentid">Specify the internal ID of the attachment record.</param>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <returns></returns>
        void BusinessObjectRemoveBusinessObjectAttachmentByIdAndRecIdV1 (string attachmentid, string busobid, string busobrecid);

        /// <summary>
        /// Remove an attachment by Business Object ID and record ID
        /// </summary>
        /// <remarks>
        /// Operation to remove an attachment from a Business Object using the attachment record ID, Business Object ID, and Business Object record ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentid">Specify the internal ID of the attachment record.</param>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BusinessObjectRemoveBusinessObjectAttachmentByIdAndRecIdV1WithHttpInfo (string attachmentid, string busobid, string busobrecid);
        /// <summary>
        /// Remove an attachment by Business Object name and public ID
        /// </summary>
        /// <remarks>
        /// Operation to remove an attachment from a Business Object using the attachment record ID, Business Object name, and Business Object record ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentid">Specify the internal ID of the attachment record.</param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="publicid">Specify the Business Object public ID.</param>
        /// <returns></returns>
        void BusinessObjectRemoveBusinessObjectAttachmentByNameAndPublicIdV1 (string attachmentid, string busobname, string publicid);

        /// <summary>
        /// Remove an attachment by Business Object name and public ID
        /// </summary>
        /// <remarks>
        /// Operation to remove an attachment from a Business Object using the attachment record ID, Business Object name, and Business Object record ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentid">Specify the internal ID of the attachment record.</param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="publicid">Specify the Business Object public ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BusinessObjectRemoveBusinessObjectAttachmentByNameAndPublicIdV1WithHttpInfo (string attachmentid, string busobname, string publicid);
        /// <summary>
        /// Remove an attachment by Business Object name and record ID
        /// </summary>
        /// <remarks>
        /// Operation to remove an attachment from a Business Object using the attachment record ID, Business Object name, and Business Object public ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentid">Specify the internal ID of the attachment record.</param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <returns></returns>
        void BusinessObjectRemoveBusinessObjectAttachmentByNameAndRecIdV1 (string attachmentid, string busobname, string busobrecid);

        /// <summary>
        /// Remove an attachment by Business Object name and record ID
        /// </summary>
        /// <remarks>
        /// Operation to remove an attachment from a Business Object using the attachment record ID, Business Object name, and Business Object public ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentid">Specify the internal ID of the attachment record.</param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BusinessObjectRemoveBusinessObjectAttachmentByNameAndRecIdV1WithHttpInfo (string attachmentid, string busobname, string busobrecid);
        /// <summary>
        /// Attach a Business Object to a Business Object
        /// </summary>
        /// <remarks>
        /// Operation to attach a Business Object to a Business Object. This links the Business Object but does not create a relationship between the two. (Use \&quot;Link Related Business Objects\&quot; to create a relationship.)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object used to specify the Business Objects to attach. You can use Business Object name or ID and Business Object record ID or public ID.</param>
        /// <returns>AttachmentsResponse</returns>
        AttachmentsResponse BusinessObjectSaveBusinessObjectAttachmentBusObV1 (SaveBusObAttachmentRequest request);

        /// <summary>
        /// Attach a Business Object to a Business Object
        /// </summary>
        /// <remarks>
        /// Operation to attach a Business Object to a Business Object. This links the Business Object but does not create a relationship between the two. (Use \&quot;Link Related Business Objects\&quot; to create a relationship.)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object used to specify the Business Objects to attach. You can use Business Object name or ID and Business Object record ID or public ID.</param>
        /// <returns>ApiResponse of AttachmentsResponse</returns>
        ApiResponse<AttachmentsResponse> BusinessObjectSaveBusinessObjectAttachmentBusObV1WithHttpInfo (SaveBusObAttachmentRequest request);
        /// <summary>
        /// Attach a file via UNC
        /// </summary>
        /// <remarks>
        /// Operation to attach a file to a Business Object via a path (UNC recommended).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object used to specify the file path (UNC recommended) and the Business Object. You can use Business Object name or ID and Business Object record ID or public ID.</param>
        /// <returns>AttachmentsResponse</returns>
        AttachmentsResponse BusinessObjectSaveBusinessObjectAttachmentLinkV1 (SaveLinkAttachmentRequest request);

        /// <summary>
        /// Attach a file via UNC
        /// </summary>
        /// <remarks>
        /// Operation to attach a file to a Business Object via a path (UNC recommended).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object used to specify the file path (UNC recommended) and the Business Object. You can use Business Object name or ID and Business Object record ID or public ID.</param>
        /// <returns>ApiResponse of AttachmentsResponse</returns>
        ApiResponse<AttachmentsResponse> BusinessObjectSaveBusinessObjectAttachmentLinkV1WithHttpInfo (SaveLinkAttachmentRequest request);
        /// <summary>
        /// Attach a URL path
        /// </summary>
        /// <remarks>
        /// Operation to attach a URL path to a Business Object.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object used to specify the URL path and Business Object. You can use Business Object name or ID and Business Object record ID or public ID.</param>
        /// <returns>AttachmentsResponse</returns>
        AttachmentsResponse BusinessObjectSaveBusinessObjectAttachmentUrlV1 (SaveUrlAttachmentRequest request);

        /// <summary>
        /// Attach a URL path
        /// </summary>
        /// <remarks>
        /// Operation to attach a URL path to a Business Object.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object used to specify the URL path and Business Object. You can use Business Object name or ID and Business Object record ID or public ID.</param>
        /// <returns>ApiResponse of AttachmentsResponse</returns>
        ApiResponse<AttachmentsResponse> BusinessObjectSaveBusinessObjectAttachmentUrlV1WithHttpInfo (SaveUrlAttachmentRequest request);
        /// <summary>
        /// Create or update a batch of Business Objects
        /// </summary>
        /// <remarks>
        /// Operation that creates or updates an array of Business Objects in a batch. To update, specify record ID or public ID. To create, leave record ID and public ID empty.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Specify the array of Business Object templates. </param>
        /// <returns>BatchSaveResponse</returns>
        BatchSaveResponse BusinessObjectSaveBusinessObjectBatchV1 (BatchSaveRequest request);

        /// <summary>
        /// Create or update a batch of Business Objects
        /// </summary>
        /// <remarks>
        /// Operation that creates or updates an array of Business Objects in a batch. To update, specify record ID or public ID. To create, leave record ID and public ID empty.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Specify the array of Business Object templates. </param>
        /// <returns>ApiResponse of BatchSaveResponse</returns>
        ApiResponse<BatchSaveResponse> BusinessObjectSaveBusinessObjectBatchV1WithHttpInfo (BatchSaveRequest request);
        /// <summary>
        /// Create or Update a Business Object
        /// </summary>
        /// <remarks>
        /// Operation that creates a new Business Object or updates an existing Business Object. To update, specify record ID or public ID. To create, leave record ID and public ID empty.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Specify a list of fields from a Business Object template. </param>
        /// <returns>SaveResponse</returns>
        SaveResponse BusinessObjectSaveBusinessObjectV1 (SaveRequest request);

        /// <summary>
        /// Create or Update a Business Object
        /// </summary>
        /// <remarks>
        /// Operation that creates a new Business Object or updates an existing Business Object. To update, specify record ID or public ID. To create, leave record ID and public ID empty.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Specify a list of fields from a Business Object template. </param>
        /// <returns>ApiResponse of SaveResponse</returns>
        ApiResponse<SaveResponse> BusinessObjectSaveBusinessObjectV1WithHttpInfo (SaveRequest request);
        /// <summary>
        /// Create or update a related Business Object
        /// </summary>
        /// <remarks>
        /// Operation that creates or updates a related Business Object. To update, specify record ID or public ID. To create, leave record ID and public ID empty.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object specifying the parent the Business Object, the Relationship, and field values for the Business Object to create or update. </param>
        /// <returns>RelatedSaveResponse</returns>
        RelatedSaveResponse BusinessObjectSaveRelatedBusinessObjectV1 (RelatedSaveRequest request);

        /// <summary>
        /// Create or update a related Business Object
        /// </summary>
        /// <remarks>
        /// Operation that creates or updates a related Business Object. To update, specify record ID or public ID. To create, leave record ID and public ID empty.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object specifying the parent the Business Object, the Relationship, and field values for the Business Object to create or update. </param>
        /// <returns>ApiResponse of RelatedSaveResponse</returns>
        ApiResponse<RelatedSaveResponse> BusinessObjectSaveRelatedBusinessObjectV1WithHttpInfo (RelatedSaveRequest request);
        /// <summary>
        /// UnLink related Business Objects
        /// </summary>
        /// <remarks>
        /// Operation to unlink related Business Objects.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object.</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to unlink.</param>
        /// <param name="busobid">Specify the Business Object ID of the Business Object to be unlinked.</param>
        /// <param name="busobrecid">Specify the Business Object record ID of the Business Object to be unlinked.</param>
        /// <returns>RelatedBusinessObjectResponse</returns>
        RelatedBusinessObjectResponse BusinessObjectUnLinkRelatedBusinessObjectByRecIdV1 (string parentbusobid, string parentbusobrecid, string relationshipid, string busobid, string busobrecid);

        /// <summary>
        /// UnLink related Business Objects
        /// </summary>
        /// <remarks>
        /// Operation to unlink related Business Objects.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object.</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to unlink.</param>
        /// <param name="busobid">Specify the Business Object ID of the Business Object to be unlinked.</param>
        /// <param name="busobrecid">Specify the Business Object record ID of the Business Object to be unlinked.</param>
        /// <returns>ApiResponse of RelatedBusinessObjectResponse</returns>
        ApiResponse<RelatedBusinessObjectResponse> BusinessObjectUnLinkRelatedBusinessObjectByRecIdV1WithHttpInfo (string parentbusobid, string parentbusobrecid, string relationshipid, string busobid, string busobrecid);
        /// <summary>
        /// Upload an attachment by Business Object ID and public ID
        /// </summary>
        /// <remarks>
        /// Operation to upload an attachment to a Business Object record using a Business Object ID and public ID. The body of the request is the byte array of the file part being uploaded.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="filename">Specify the name of the file being uploaded. If no attachment name is provided, the file name is used.</param>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="publicid">Specify the Business Object public ID  to attach the file to.</param>
        /// <param name="offset">The offset is the starting index of the file part being uploaded.  If this is the first part then the offset will be zero.</param>
        /// <param name="totalsize">The entire file size in bytes.</param>
        /// <param name="attachmentid">Specify the attachment ID of an uploaded file to upload subsequent parts and ensure each part gets appended to the parts that have already been uploaded. (optional)</param>
        /// <param name="displaytext">Specify the attachment name, which is the display text for the attachment record. (optional)</param>
        /// <returns>string</returns>
        string BusinessObjectUploadBusinessObjectAttachmentByIdAndPublicIdV1 (byte[] body, string filename, string busobid, string publicid, int? offset, int? totalsize, string attachmentid = null, string displaytext = null);

        /// <summary>
        /// Upload an attachment by Business Object ID and public ID
        /// </summary>
        /// <remarks>
        /// Operation to upload an attachment to a Business Object record using a Business Object ID and public ID. The body of the request is the byte array of the file part being uploaded.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="filename">Specify the name of the file being uploaded. If no attachment name is provided, the file name is used.</param>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="publicid">Specify the Business Object public ID  to attach the file to.</param>
        /// <param name="offset">The offset is the starting index of the file part being uploaded.  If this is the first part then the offset will be zero.</param>
        /// <param name="totalsize">The entire file size in bytes.</param>
        /// <param name="attachmentid">Specify the attachment ID of an uploaded file to upload subsequent parts and ensure each part gets appended to the parts that have already been uploaded. (optional)</param>
        /// <param name="displaytext">Specify the attachment name, which is the display text for the attachment record. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> BusinessObjectUploadBusinessObjectAttachmentByIdAndPublicIdV1WithHttpInfo (byte[] body, string filename, string busobid, string publicid, int? offset, int? totalsize, string attachmentid = null, string displaytext = null);
        /// <summary>
        /// Upload an attachment by Business Object ID and record ID
        /// </summary>
        /// <remarks>
        /// Operation to upload an attachment to a Business Object record using a Business Object ID and record ID. The body of the request is the byte array of the file part being uploaded.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="filename">Specify the name of the file being uploaded. If no attachment name is provided, the file name is used.</param>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid">Specify the Business Object record ID to attach the file to.</param>
        /// <param name="offset">The offset is the starting index of the file part being uploaded.  If this is the first part then the offset will be zero.</param>
        /// <param name="totalsize">The entire file size in bytes.</param>
        /// <param name="attachmentid">Specify the attachment ID of an uploaded file to upload subsequent parts and ensure each part gets appended to the parts that have already been uploaded. (optional)</param>
        /// <param name="displaytext">Specify the attachment name, which is the display text for the attachment record. (optional)</param>
        /// <returns>string</returns>
        string BusinessObjectUploadBusinessObjectAttachmentByIdAndRecIdV1 (byte[] body, string filename, string busobid, string busobrecid, int? offset, int? totalsize, string attachmentid = null, string displaytext = null);

        /// <summary>
        /// Upload an attachment by Business Object ID and record ID
        /// </summary>
        /// <remarks>
        /// Operation to upload an attachment to a Business Object record using a Business Object ID and record ID. The body of the request is the byte array of the file part being uploaded.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="filename">Specify the name of the file being uploaded. If no attachment name is provided, the file name is used.</param>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid">Specify the Business Object record ID to attach the file to.</param>
        /// <param name="offset">The offset is the starting index of the file part being uploaded.  If this is the first part then the offset will be zero.</param>
        /// <param name="totalsize">The entire file size in bytes.</param>
        /// <param name="attachmentid">Specify the attachment ID of an uploaded file to upload subsequent parts and ensure each part gets appended to the parts that have already been uploaded. (optional)</param>
        /// <param name="displaytext">Specify the attachment name, which is the display text for the attachment record. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> BusinessObjectUploadBusinessObjectAttachmentByIdAndRecIdV1WithHttpInfo (byte[] body, string filename, string busobid, string busobrecid, int? offset, int? totalsize, string attachmentid = null, string displaytext = null);
        /// <summary>
        /// Upload an attachment by Business Object name and public ID
        /// </summary>
        /// <remarks>
        /// Operation to upload an attachment to a Business Object record using a Business Object name and public ID. The body of the request is the byte array of the file part being uploaded.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="filename">Specify the name of the file being uploaded. If no attachment name is provided, the file name is used.</param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="publicid">Specify the Business Object public ID  to attach the file to.</param>
        /// <param name="offset">The offset is the starting index of the file part being uploaded.  If this is the first part then the offset will be zero.</param>
        /// <param name="totalsize">The entire file size in bytes.</param>
        /// <param name="attachmentid">Specify the attachment ID of an uploaded file to upload subsequent parts and ensure each part gets appended to the parts that have already been uploaded. (optional)</param>
        /// <param name="displaytext">Specify the attachment name, which is the display text for the attachment record. (optional)</param>
        /// <returns>string</returns>
        string BusinessObjectUploadBusinessObjectAttachmentByNameAndPublicIdV1 (byte[] body, string filename, string busobname, string publicid, int? offset, int? totalsize, string attachmentid = null, string displaytext = null);

        /// <summary>
        /// Upload an attachment by Business Object name and public ID
        /// </summary>
        /// <remarks>
        /// Operation to upload an attachment to a Business Object record using a Business Object name and public ID. The body of the request is the byte array of the file part being uploaded.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="filename">Specify the name of the file being uploaded. If no attachment name is provided, the file name is used.</param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="publicid">Specify the Business Object public ID  to attach the file to.</param>
        /// <param name="offset">The offset is the starting index of the file part being uploaded.  If this is the first part then the offset will be zero.</param>
        /// <param name="totalsize">The entire file size in bytes.</param>
        /// <param name="attachmentid">Specify the attachment ID of an uploaded file to upload subsequent parts and ensure each part gets appended to the parts that have already been uploaded. (optional)</param>
        /// <param name="displaytext">Specify the attachment name, which is the display text for the attachment record. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> BusinessObjectUploadBusinessObjectAttachmentByNameAndPublicIdV1WithHttpInfo (byte[] body, string filename, string busobname, string publicid, int? offset, int? totalsize, string attachmentid = null, string displaytext = null);
        /// <summary>
        /// Upload an attachment by Business Object name and record ID
        /// </summary>
        /// <remarks>
        /// Operation to upload an attachment to a Business Object record using a Business Object name and record ID. The body of the request is the byte array of the file part being uploaded.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="filename">Specify the name of the file being uploaded. If no attachment name is provided, the file name is used.</param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="busobrecid">Specify the Business Object record ID to attach the file to.</param>
        /// <param name="offset">The offset is the starting index of the file part being uploaded.  If this is the first part then the offset will be zero.</param>
        /// <param name="totalsize">The entire file size in bytes.</param>
        /// <param name="attachmentid">Specify the attachment ID of an uploaded file to upload subsequent parts and ensure each part gets appended to the parts that have already been uploaded. (optional)</param>
        /// <param name="displaytext">Specify the attachment name, which is the display text for the attachment record. (optional)</param>
        /// <returns>string</returns>
        string BusinessObjectUploadBusinessObjectAttachmentByNameAndRecIdV1 (byte[] body, string filename, string busobname, string busobrecid, int? offset, int? totalsize, string attachmentid = null, string displaytext = null);

        /// <summary>
        /// Upload an attachment by Business Object name and record ID
        /// </summary>
        /// <remarks>
        /// Operation to upload an attachment to a Business Object record using a Business Object name and record ID. The body of the request is the byte array of the file part being uploaded.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="filename">Specify the name of the file being uploaded. If no attachment name is provided, the file name is used.</param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="busobrecid">Specify the Business Object record ID to attach the file to.</param>
        /// <param name="offset">The offset is the starting index of the file part being uploaded.  If this is the first part then the offset will be zero.</param>
        /// <param name="totalsize">The entire file size in bytes.</param>
        /// <param name="attachmentid">Specify the attachment ID of an uploaded file to upload subsequent parts and ensure each part gets appended to the parts that have already been uploaded. (optional)</param>
        /// <param name="displaytext">Specify the attachment name, which is the display text for the attachment record. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> BusinessObjectUploadBusinessObjectAttachmentByNameAndRecIdV1WithHttpInfo (byte[] body, string filename, string busobname, string busobrecid, int? offset, int? totalsize, string attachmentid = null, string displaytext = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete Business Objects in a batch
        /// </summary>
        /// <remarks>
        /// Operation to delete a batch of Business Objects.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Specify an array of Business Object IDs and record IDs or public IDs. Use a flag to stop on error or continue on error.</param>
        /// <returns>Task of BatchDeleteResponse</returns>
        System.Threading.Tasks.Task<BatchDeleteResponse> BusinessObjectDeleteBusinessObjectBatchV1Async (BatchDeleteRequest request);

        /// <summary>
        /// Delete Business Objects in a batch
        /// </summary>
        /// <remarks>
        /// Operation to delete a batch of Business Objects.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Specify an array of Business Object IDs and record IDs or public IDs. Use a flag to stop on error or continue on error.</param>
        /// <returns>Task of ApiResponse (BatchDeleteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchDeleteResponse>> BusinessObjectDeleteBusinessObjectBatchV1AsyncWithHttpInfo (BatchDeleteRequest request);
        /// <summary>
        /// Delete a Business Object by public ID
        /// </summary>
        /// <remarks>
        /// Operation to delete a Business Object by Business Object ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="publicid">Specify the Business Object public ID.</param>
        /// <returns>Task of DeleteResponse</returns>
        System.Threading.Tasks.Task<DeleteResponse> BusinessObjectDeleteBusinessObjectByPublicIdV1Async (string busobid, string publicid);

        /// <summary>
        /// Delete a Business Object by public ID
        /// </summary>
        /// <remarks>
        /// Operation to delete a Business Object by Business Object ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="publicid">Specify the Business Object public ID.</param>
        /// <returns>Task of ApiResponse (DeleteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteResponse>> BusinessObjectDeleteBusinessObjectByPublicIdV1AsyncWithHttpInfo (string busobid, string publicid);
        /// <summary>
        /// Delete a Business Object by record ID
        /// </summary>
        /// <remarks>
        /// Operation to delete a single Business Object.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid"> Specify the Business Object record ID.</param>
        /// <returns>Task of DeleteResponse</returns>
        System.Threading.Tasks.Task<DeleteResponse> BusinessObjectDeleteBusinessObjectByRecIdV1Async (string busobid, string busobrecid);

        /// <summary>
        /// Delete a Business Object by record ID
        /// </summary>
        /// <remarks>
        /// Operation to delete a single Business Object.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid"> Specify the Business Object record ID.</param>
        /// <returns>Task of ApiResponse (DeleteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteResponse>> BusinessObjectDeleteBusinessObjectByRecIdV1AsyncWithHttpInfo (string busobid, string busobrecid);
        /// <summary>
        /// Delete a related Business Object by public ID
        /// </summary>
        /// <remarks>
        /// Operation to delete a related Business Object. (Use \&quot;Unlink Related Business Object\&quot; to unlink two Business Objects rather that deleting the related Business Object.)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to delete.</param>
        /// <param name="publicid">Specify the public ID for the related Business Object you want to delete. Use only for Business Objects with unique public IDs. Use \&quot;Delete a related Business Object by record ID\&quot; when public IDs are not unique.</param>
        /// <returns>Task of RelatedBusinessObjectResponse</returns>
        System.Threading.Tasks.Task<RelatedBusinessObjectResponse> BusinessObjectDeleteRelatedBusinessObjectByPublicIdV1Async (string parentbusobid, string parentbusobrecid, string relationshipid, string publicid);

        /// <summary>
        /// Delete a related Business Object by public ID
        /// </summary>
        /// <remarks>
        /// Operation to delete a related Business Object. (Use \&quot;Unlink Related Business Object\&quot; to unlink two Business Objects rather that deleting the related Business Object.)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to delete.</param>
        /// <param name="publicid">Specify the public ID for the related Business Object you want to delete. Use only for Business Objects with unique public IDs. Use \&quot;Delete a related Business Object by record ID\&quot; when public IDs are not unique.</param>
        /// <returns>Task of ApiResponse (RelatedBusinessObjectResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RelatedBusinessObjectResponse>> BusinessObjectDeleteRelatedBusinessObjectByPublicIdV1AsyncWithHttpInfo (string parentbusobid, string parentbusobrecid, string relationshipid, string publicid);
        /// <summary>
        /// Delete a related Business Object by record ID
        /// </summary>
        /// <remarks>
        /// Operation to delete a related Business Object. (Use \&quot;Unlink Related Business Object\&quot; to unlink two Business Objects rather that deleting the related Business Object.)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to delete.</param>
        /// <param name="busobrecid">Specify the record ID for the related Business Object you want to delete.</param>
        /// <returns>Task of RelatedBusinessObjectResponse</returns>
        System.Threading.Tasks.Task<RelatedBusinessObjectResponse> BusinessObjectDeleteRelatedBusinessObjectByRecIdV1Async (string parentbusobid, string parentbusobrecid, string relationshipid, string busobrecid);

        /// <summary>
        /// Delete a related Business Object by record ID
        /// </summary>
        /// <remarks>
        /// Operation to delete a related Business Object. (Use \&quot;Unlink Related Business Object\&quot; to unlink two Business Objects rather that deleting the related Business Object.)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to delete.</param>
        /// <param name="busobrecid">Specify the record ID for the related Business Object you want to delete.</param>
        /// <returns>Task of ApiResponse (RelatedBusinessObjectResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RelatedBusinessObjectResponse>> BusinessObjectDeleteRelatedBusinessObjectByRecIdV1AsyncWithHttpInfo (string parentbusobid, string parentbusobrecid, string relationshipid, string busobrecid);
        /// <summary>
        /// Get lookup values for fields
        /// </summary>
        /// <remarks>
        /// Operation to get potentially valid values for Business Object fields.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object that specifies the Business Object and fields for which values are to be returned.</param>
        /// <returns>Task of FieldValuesLookupResponse</returns>
        System.Threading.Tasks.Task<FieldValuesLookupResponse> BusinessObjectFieldValuesLookupV1Async (FieldValuesLookupRequest request);

        /// <summary>
        /// Get lookup values for fields
        /// </summary>
        /// <remarks>
        /// Operation to get potentially valid values for Business Object fields.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object that specifies the Business Object and fields for which values are to be returned.</param>
        /// <returns>Task of ApiResponse (FieldValuesLookupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FieldValuesLookupResponse>> BusinessObjectFieldValuesLookupV1AsyncWithHttpInfo (FieldValuesLookupRequest request);
        /// <summary>
        /// Get an imported Business Object attachment
        /// </summary>
        /// <remarks>
        /// Operation to get a Business Object attachment that has been imported into the system.  HTTP Range Header can be used but is optional.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentid">Specify the internal ID of the attachment record that contains information about the imported file.</param>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> BusinessObjectGetBusinessObjectAttachmentByAttachmentIdV1Async (string attachmentid, string busobid, string busobrecid);

        /// <summary>
        /// Get an imported Business Object attachment
        /// </summary>
        /// <remarks>
        /// Operation to get a Business Object attachment that has been imported into the system.  HTTP Range Header can be used but is optional.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentid">Specify the internal ID of the attachment record that contains information about the imported file.</param>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> BusinessObjectGetBusinessObjectAttachmentByAttachmentIdV1AsyncWithHttpInfo (string attachmentid, string busobid, string busobrecid);
        /// <summary>
        /// Get attachments by Business Object public ID
        /// </summary>
        /// <remarks>
        /// Operation to get attachments for a Business Object by Business Object ID and public ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="publicid">Specify the Business Object public ID for the record that contains the attachments.</param>
        /// <param name="type">Record attachment type: &lt;/br&gt;None - Not applicable to the REST API. &lt;/br&gt;File - Linked files. &lt;/br&gt;FileManagerFile - Imported files.&lt;/br&gt;BusOb - Attached Business Objects. &lt;/br&gt;History - Information about the attachment, if any is available. For example, an e-mail message may store the name of an attachment sent.&lt;/br&gt;Other - Not applicable to the REST API. &lt;/br&gt;</param>
        /// <param name="attachmenttype">For file types, select the type of attachment: &lt;/br&gt;Imported - Attachment was imported into database. &lt;/br&gt;Linked - Attachment is linked to an external file. &lt;/br&gt;URL - Attachment is a URL.</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>Task of AttachmentsResponse</returns>
        System.Threading.Tasks.Task<AttachmentsResponse> BusinessObjectGetBusinessObjectAttachmentsByIdAndPublicIdV1Async (string busobid, string publicid, string type, string attachmenttype, bool? includelinks = null);

        /// <summary>
        /// Get attachments by Business Object public ID
        /// </summary>
        /// <remarks>
        /// Operation to get attachments for a Business Object by Business Object ID and public ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="publicid">Specify the Business Object public ID for the record that contains the attachments.</param>
        /// <param name="type">Record attachment type: &lt;/br&gt;None - Not applicable to the REST API. &lt;/br&gt;File - Linked files. &lt;/br&gt;FileManagerFile - Imported files.&lt;/br&gt;BusOb - Attached Business Objects. &lt;/br&gt;History - Information about the attachment, if any is available. For example, an e-mail message may store the name of an attachment sent.&lt;/br&gt;Other - Not applicable to the REST API. &lt;/br&gt;</param>
        /// <param name="attachmenttype">For file types, select the type of attachment: &lt;/br&gt;Imported - Attachment was imported into database. &lt;/br&gt;Linked - Attachment is linked to an external file. &lt;/br&gt;URL - Attachment is a URL.</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>Task of ApiResponse (AttachmentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentsResponse>> BusinessObjectGetBusinessObjectAttachmentsByIdAndPublicIdV1AsyncWithHttpInfo (string busobid, string publicid, string type, string attachmenttype, bool? includelinks = null);
        /// <summary>
        /// Get attachments by Business Object record ID
        /// </summary>
        /// <remarks>
        /// Operation to get attachments for a Business Object by Business Object ID and record ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <param name="type">Record attachment type: &lt;/br&gt;None - Not applicable to the REST API. &lt;/br&gt;File - Linked files. &lt;/br&gt;FileManagerFile - Imported files.&lt;/br&gt;BusOb - Attached Business Objects. &lt;/br&gt;History - Information about the attachment, if any is available. For example, an e-mail message may store the name of an attachment sent.&lt;/br&gt;Other - Not applicable to the REST API. &lt;/br&gt;</param>
        /// <param name="attachmenttype">For file types, select the type of attachment: &lt;/br&gt;Imported - Attachment was imported into database. &lt;/br&gt;Linked - Attachment is linked to an external file. &lt;/br&gt;URL - Attachment is a URL.</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>Task of AttachmentsResponse</returns>
        System.Threading.Tasks.Task<AttachmentsResponse> BusinessObjectGetBusinessObjectAttachmentsByIdAndRecIdV1Async (string busobid, string busobrecid, string type, string attachmenttype, bool? includelinks = null);

        /// <summary>
        /// Get attachments by Business Object record ID
        /// </summary>
        /// <remarks>
        /// Operation to get attachments for a Business Object by Business Object ID and record ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <param name="type">Record attachment type: &lt;/br&gt;None - Not applicable to the REST API. &lt;/br&gt;File - Linked files. &lt;/br&gt;FileManagerFile - Imported files.&lt;/br&gt;BusOb - Attached Business Objects. &lt;/br&gt;History - Information about the attachment, if any is available. For example, an e-mail message may store the name of an attachment sent.&lt;/br&gt;Other - Not applicable to the REST API. &lt;/br&gt;</param>
        /// <param name="attachmenttype">For file types, select the type of attachment: &lt;/br&gt;Imported - Attachment was imported into database. &lt;/br&gt;Linked - Attachment is linked to an external file. &lt;/br&gt;URL - Attachment is a URL.</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>Task of ApiResponse (AttachmentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentsResponse>> BusinessObjectGetBusinessObjectAttachmentsByIdAndRecIdV1AsyncWithHttpInfo (string busobid, string busobrecid, string type, string attachmenttype, bool? includelinks = null);
        /// <summary>
        /// Get attachments by Business Object name and public ID
        /// </summary>
        /// <remarks>
        /// Operation to get attachments for a Business Object by Business Object Name and public ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="publicid">Specify the Business Object public ID for the record that contains the attachments.</param>
        /// <param name="type">Record attachment type: &lt;/br&gt;None - Not applicable to the REST API. &lt;/br&gt;File - Linked files. &lt;/br&gt;FileManagerFile - Imported files.&lt;/br&gt;BusOb - Attached Business Objects. &lt;/br&gt;History - Information about the attachment, if any is available. For example, an e-mail message may store the name of an attachment sent.&lt;/br&gt;Other - Not applicable to the REST API. &lt;/br&gt;</param>
        /// <param name="attachmenttype">For file types, select the type of attachment: &lt;/br&gt;Imported - Attachment was imported into database. &lt;/br&gt;Linked - Attachment is linked to an external file. &lt;/br&gt;URL - Attachment is a URL.</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>Task of AttachmentsResponse</returns>
        System.Threading.Tasks.Task<AttachmentsResponse> BusinessObjectGetBusinessObjectAttachmentsByNameAndPublicIdV1Async (string busobname, string publicid, string type, string attachmenttype, bool? includelinks = null);

        /// <summary>
        /// Get attachments by Business Object name and public ID
        /// </summary>
        /// <remarks>
        /// Operation to get attachments for a Business Object by Business Object Name and public ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="publicid">Specify the Business Object public ID for the record that contains the attachments.</param>
        /// <param name="type">Record attachment type: &lt;/br&gt;None - Not applicable to the REST API. &lt;/br&gt;File - Linked files. &lt;/br&gt;FileManagerFile - Imported files.&lt;/br&gt;BusOb - Attached Business Objects. &lt;/br&gt;History - Information about the attachment, if any is available. For example, an e-mail message may store the name of an attachment sent.&lt;/br&gt;Other - Not applicable to the REST API. &lt;/br&gt;</param>
        /// <param name="attachmenttype">For file types, select the type of attachment: &lt;/br&gt;Imported - Attachment was imported into database. &lt;/br&gt;Linked - Attachment is linked to an external file. &lt;/br&gt;URL - Attachment is a URL.</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>Task of ApiResponse (AttachmentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentsResponse>> BusinessObjectGetBusinessObjectAttachmentsByNameAndPublicIdV1AsyncWithHttpInfo (string busobname, string publicid, string type, string attachmenttype, bool? includelinks = null);
        /// <summary>
        /// Get attachments by Business Object name and record ID
        /// </summary>
        /// <remarks>
        /// Operation to get attachments for a Business Object by name and record ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <param name="type">Record attachment type: &lt;/br&gt;None - Not applicable to the REST API. &lt;/br&gt;File - Linked files. &lt;/br&gt;FileManagerFile - Imported files.&lt;/br&gt;BusOb - Attached Business Objects. &lt;/br&gt;History - Information about the attachment, if any is available. For example, an e-mail message may store the name of an attachment sent.&lt;/br&gt;Other - Not applicable to the REST API. &lt;/br&gt;</param>
        /// <param name="attachmenttype">For file types, select the type of attachment: &lt;/br&gt;Imported - Attachment was imported into database. &lt;/br&gt;Linked - Attachment is linked to an external file. &lt;/br&gt;URL - Attachment is a URL.</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>Task of AttachmentsResponse</returns>
        System.Threading.Tasks.Task<AttachmentsResponse> BusinessObjectGetBusinessObjectAttachmentsByNameAndRecIdV1Async (string busobname, string busobrecid, string type, string attachmenttype, bool? includelinks = null);

        /// <summary>
        /// Get attachments by Business Object name and record ID
        /// </summary>
        /// <remarks>
        /// Operation to get attachments for a Business Object by name and record ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <param name="type">Record attachment type: &lt;/br&gt;None - Not applicable to the REST API. &lt;/br&gt;File - Linked files. &lt;/br&gt;FileManagerFile - Imported files.&lt;/br&gt;BusOb - Attached Business Objects. &lt;/br&gt;History - Information about the attachment, if any is available. For example, an e-mail message may store the name of an attachment sent.&lt;/br&gt;Other - Not applicable to the REST API. &lt;/br&gt;</param>
        /// <param name="attachmenttype">For file types, select the type of attachment: &lt;/br&gt;Imported - Attachment was imported into database. &lt;/br&gt;Linked - Attachment is linked to an external file. &lt;/br&gt;URL - Attachment is a URL.</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>Task of ApiResponse (AttachmentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentsResponse>> BusinessObjectGetBusinessObjectAttachmentsByNameAndRecIdV1AsyncWithHttpInfo (string busobname, string busobrecid, string type, string attachmenttype, bool? includelinks = null);
        /// <summary>
        /// Get Business Object attachments by request object
        /// </summary>
        /// <remarks>
        /// Operation to get attachments for a Business Object by attachments request object.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentsRequest">Object with all the parameters to request an attachments list. You can also request a list of types to get more than just one type at a time.</param>
        /// <returns>Task of AttachmentsResponse</returns>
        System.Threading.Tasks.Task<AttachmentsResponse> BusinessObjectGetBusinessObjectAttachmentsV1Async (AttachmentsRequest attachmentsRequest);

        /// <summary>
        /// Get Business Object attachments by request object
        /// </summary>
        /// <remarks>
        /// Operation to get attachments for a Business Object by attachments request object.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentsRequest">Object with all the parameters to request an attachments list. You can also request a list of types to get more than just one type at a time.</param>
        /// <returns>Task of ApiResponse (AttachmentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentsResponse>> BusinessObjectGetBusinessObjectAttachmentsV1AsyncWithHttpInfo (AttachmentsRequest attachmentsRequest);
        /// <summary>
        /// Get a batch of Business Object records
        /// </summary>
        /// <remarks>
        /// Operation that returns a batch of Business Object records that includes a list of field record IDs, display names, and values for each record.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Specify an array of Business Object IDs, record IDs, or public IDs. Use a flag to stop on error or continue on error.</param>
        /// <returns>Task of BatchReadResponse</returns>
        System.Threading.Tasks.Task<BatchReadResponse> BusinessObjectGetBusinessObjectBatchV1Async (BatchReadRequest request);

        /// <summary>
        /// Get a batch of Business Object records
        /// </summary>
        /// <remarks>
        /// Operation that returns a batch of Business Object records that includes a list of field record IDs, display names, and values for each record.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Specify an array of Business Object IDs, record IDs, or public IDs. Use a flag to stop on error or continue on error.</param>
        /// <returns>Task of ApiResponse (BatchReadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchReadResponse>> BusinessObjectGetBusinessObjectBatchV1AsyncWithHttpInfo (BatchReadRequest request);
        /// <summary>
        /// Get a Business Object record
        /// </summary>
        /// <remarks>
        /// Operation that returns a Business Object record that includes a list of fields and their record IDs, names, and set values.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="publicid">Specify the Business Object public ID.</param>
        /// <returns>Task of ReadResponse</returns>
        System.Threading.Tasks.Task<ReadResponse> BusinessObjectGetBusinessObjectByPublicIdV1Async (string busobid, string publicid);

        /// <summary>
        /// Get a Business Object record
        /// </summary>
        /// <remarks>
        /// Operation that returns a Business Object record that includes a list of fields and their record IDs, names, and set values.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="publicid">Specify the Business Object public ID.</param>
        /// <returns>Task of ApiResponse (ReadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReadResponse>> BusinessObjectGetBusinessObjectByPublicIdV1AsyncWithHttpInfo (string busobid, string publicid);
        /// <summary>
        /// Get a Business Object record
        /// </summary>
        /// <remarks>
        /// Operation that returns a Business Object record that includes a list of fields and their record IDs, names, and set values.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <returns>Task of ReadResponse</returns>
        System.Threading.Tasks.Task<ReadResponse> BusinessObjectGetBusinessObjectByRecIdV1Async (string busobid, string busobrecid);

        /// <summary>
        /// Get a Business Object record
        /// </summary>
        /// <remarks>
        /// Operation that returns a Business Object record that includes a list of fields and their record IDs, names, and set values.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <returns>Task of ApiResponse (ReadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReadResponse>> BusinessObjectGetBusinessObjectByRecIdV1AsyncWithHttpInfo (string busobid, string busobrecid);
        /// <summary>
        /// Get a Business Object by its scan code and Business Object ID.
        /// </summary>
        /// <remarks>
        /// Operation to get a Business Object based on its associated scan code and Business Object ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanCode">The scan code for a Business Object record.</param>
        /// <param name="busobid">The Business Object ID.</param>
        /// <returns>Task of BarcodeLookupResponse</returns>
        System.Threading.Tasks.Task<BarcodeLookupResponse> BusinessObjectGetBusinessObjectByScanCodeBusObIdV1Async (string scanCode, string busobid);

        /// <summary>
        /// Get a Business Object by its scan code and Business Object ID.
        /// </summary>
        /// <remarks>
        /// Operation to get a Business Object based on its associated scan code and Business Object ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanCode">The scan code for a Business Object record.</param>
        /// <param name="busobid">The Business Object ID.</param>
        /// <returns>Task of ApiResponse (BarcodeLookupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BarcodeLookupResponse>> BusinessObjectGetBusinessObjectByScanCodeBusObIdV1AsyncWithHttpInfo (string scanCode, string busobid);
        /// <summary>
        /// Get a Business Object by its scan code and Business Object name.
        /// </summary>
        /// <remarks>
        /// Operation to get a Business Object based on its associated scan code and Business Object name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanCode">The scan code for a Business Object record.</param>
        /// <param name="busobname">The Business Bbject name.</param>
        /// <returns>Task of BarcodeLookupResponse</returns>
        System.Threading.Tasks.Task<BarcodeLookupResponse> BusinessObjectGetBusinessObjectByScanCodeBusObNameV1Async (string scanCode, string busobname);

        /// <summary>
        /// Get a Business Object by its scan code and Business Object name.
        /// </summary>
        /// <remarks>
        /// Operation to get a Business Object based on its associated scan code and Business Object name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanCode">The scan code for a Business Object record.</param>
        /// <param name="busobname">The Business Bbject name.</param>
        /// <returns>Task of ApiResponse (BarcodeLookupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BarcodeLookupResponse>> BusinessObjectGetBusinessObjectByScanCodeBusObNameV1AsyncWithHttpInfo (string scanCode, string busobname);
        /// <summary>
        /// Get a Business Object schema
        /// </summary>
        /// <remarks>
        /// Operation that returns the schema for a Business Object and, optionally, its related Business Objects.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobId">Specify the Business Object ID.</param>
        /// <param name="includerelationships">Flag to include schemas for related Business Object. Default is false. (optional)</param>
        /// <returns>Task of SchemaResponse</returns>
        System.Threading.Tasks.Task<SchemaResponse> BusinessObjectGetBusinessObjectSchemaV1Async (string busobId, bool? includerelationships = null);

        /// <summary>
        /// Get a Business Object schema
        /// </summary>
        /// <remarks>
        /// Operation that returns the schema for a Business Object and, optionally, its related Business Objects.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobId">Specify the Business Object ID.</param>
        /// <param name="includerelationships">Flag to include schemas for related Business Object. Default is false. (optional)</param>
        /// <returns>Task of ApiResponse (SchemaResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchemaResponse>> BusinessObjectGetBusinessObjectSchemaV1AsyncWithHttpInfo (string busobId, bool? includerelationships = null);
        /// <summary>
        /// Get Business Object summaries by type
        /// </summary>
        /// <remarks>
        /// Operation that returns a list of Business Object summaries by type (Major, Supporting, Lookup, Groups, and All). 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Use to show:&lt;br /&gt;All - All objects&lt;br /&gt;Major - Major objects only&lt;br /&gt;Supporting - Supporting objects only&lt;br /&gt;Lookup - Lookup objects only&lt;br /&gt;Groups - Groups only</param>
        /// <returns>Task of List&lt;Summary&gt;</returns>
        System.Threading.Tasks.Task<List<Summary>> BusinessObjectGetBusinessObjectSummariesV1Async (string type);

        /// <summary>
        /// Get Business Object summaries by type
        /// </summary>
        /// <remarks>
        /// Operation that returns a list of Business Object summaries by type (Major, Supporting, Lookup, Groups, and All). 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Use to show:&lt;br /&gt;All - All objects&lt;br /&gt;Major - Major objects only&lt;br /&gt;Supporting - Supporting objects only&lt;br /&gt;Lookup - Lookup objects only&lt;br /&gt;Groups - Groups only</param>
        /// <returns>Task of ApiResponse (List&lt;Summary&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Summary>>> BusinessObjectGetBusinessObjectSummariesV1AsyncWithHttpInfo (string type);
        /// <summary>
        /// Get a Business Object summary by ID
        /// </summary>
        /// <remarks>
        /// Operation that returns a single Business Object summary by ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify a Business Object ID to get its summary.</param>
        /// <returns>Task of List&lt;Summary&gt;</returns>
        System.Threading.Tasks.Task<List<Summary>> BusinessObjectGetBusinessObjectSummaryByIdV1Async (string busobid);

        /// <summary>
        /// Get a Business Object summary by ID
        /// </summary>
        /// <remarks>
        /// Operation that returns a single Business Object summary by ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify a Business Object ID to get its summary.</param>
        /// <returns>Task of ApiResponse (List&lt;Summary&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Summary>>> BusinessObjectGetBusinessObjectSummaryByIdV1AsyncWithHttpInfo (string busobid);
        /// <summary>
        /// Get a Business Object summary by name
        /// </summary>
        /// <remarks>
        /// Operation that returns a single Business Object summary by name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobname">Specify a Business Object name to get its summary.</param>
        /// <returns>Task of List&lt;Summary&gt;</returns>
        System.Threading.Tasks.Task<List<Summary>> BusinessObjectGetBusinessObjectSummaryByNameV1Async (string busobname);

        /// <summary>
        /// Get a Business Object summary by name
        /// </summary>
        /// <remarks>
        /// Operation that returns a single Business Object summary by name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobname">Specify a Business Object name to get its summary.</param>
        /// <returns>Task of ApiResponse (List&lt;Summary&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Summary>>> BusinessObjectGetBusinessObjectSummaryByNameV1AsyncWithHttpInfo (string busobname);
        /// <summary>
        /// Get Business Object templates for create
        /// </summary>
        /// <remarks>
        /// Operation that returns a template to create Business Objects.  The template includes placeholders for field values. You can then send the template with these values to the Business Object Save operation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Specify the Business Object ID. Use true to include all required fields or all fields. Specify an optional fields list by adding field names in a comma-delimited list [\&quot;field1\&quot;, \&quot;field2\&quot;]. </param>
        /// <returns>Task of TemplateResponse</returns>
        System.Threading.Tasks.Task<TemplateResponse> BusinessObjectGetBusinessObjectTemplateV1Async (TemplateRequest request);

        /// <summary>
        /// Get Business Object templates for create
        /// </summary>
        /// <remarks>
        /// Operation that returns a template to create Business Objects.  The template includes placeholders for field values. You can then send the template with these values to the Business Object Save operation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Specify the Business Object ID. Use true to include all required fields or all fields. Specify an optional fields list by adding field names in a comma-delimited list [\&quot;field1\&quot;, \&quot;field2\&quot;]. </param>
        /// <returns>Task of ApiResponse (TemplateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateResponse>> BusinessObjectGetBusinessObjectTemplateV1AsyncWithHttpInfo (TemplateRequest request);
        /// <summary>
        /// Get related Business Objects using a request object
        /// </summary>
        /// <remarks>
        /// Operation to get related Business Objects for a specific relationship. Specify a list of fields to include in the response. The order of parameter usage and overrides is: all fields set to true overrides default overrides;  custom grid overrides field list settings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relatedBusinessObjectRequest">Request object containing all the possible parameters to get related Business Objects.</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>Task of RelatedBusinessObjectResponse</returns>
        System.Threading.Tasks.Task<RelatedBusinessObjectResponse> BusinessObjectGetRelatedBusinessObjectByRequestV1Async (RelatedBusinessObjectRequest relatedBusinessObjectRequest, bool? includelinks = null);

        /// <summary>
        /// Get related Business Objects using a request object
        /// </summary>
        /// <remarks>
        /// Operation to get related Business Objects for a specific relationship. Specify a list of fields to include in the response. The order of parameter usage and overrides is: all fields set to true overrides default overrides;  custom grid overrides field list settings.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relatedBusinessObjectRequest">Request object containing all the possible parameters to get related Business Objects.</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>Task of ApiResponse (RelatedBusinessObjectResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RelatedBusinessObjectResponse>> BusinessObjectGetRelatedBusinessObjectByRequestV1AsyncWithHttpInfo (RelatedBusinessObjectRequest relatedBusinessObjectRequest, bool? includelinks = null);
        /// <summary>
        /// Get related Business Objects by ID
        /// </summary>
        /// <remarks>
        /// Operation to get the related objects for a Business Object relationship specifying all fields or default grid as the field to return.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object.</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to return.</param>
        /// <param name="pageNumber">Specify the page number of the result set to return. (optional)</param>
        /// <param name="pageSize">Specify the number of rows to return per page. (optional)</param>
        /// <param name="allfields">Flag to include all related Business Object fields.  Default is true if not supplied.  If true, then UseDefaultGrid is not used. (optional)</param>
        /// <param name="usedefaultgrid">Flag to trigger the use of the related Business Objects default grid for the list of fields to return. (optional)</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>Task of RelatedBusinessObjectResponse</returns>
        System.Threading.Tasks.Task<RelatedBusinessObjectResponse> BusinessObjectGetRelatedBusinessObjectV1Async (string parentbusobid, string parentbusobrecid, string relationshipid, int? pageNumber = null, int? pageSize = null, bool? allfields = null, bool? usedefaultgrid = null, bool? includelinks = null);

        /// <summary>
        /// Get related Business Objects by ID
        /// </summary>
        /// <remarks>
        /// Operation to get the related objects for a Business Object relationship specifying all fields or default grid as the field to return.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object.</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to return.</param>
        /// <param name="pageNumber">Specify the page number of the result set to return. (optional)</param>
        /// <param name="pageSize">Specify the number of rows to return per page. (optional)</param>
        /// <param name="allfields">Flag to include all related Business Object fields.  Default is true if not supplied.  If true, then UseDefaultGrid is not used. (optional)</param>
        /// <param name="usedefaultgrid">Flag to trigger the use of the related Business Objects default grid for the list of fields to return. (optional)</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>Task of ApiResponse (RelatedBusinessObjectResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RelatedBusinessObjectResponse>> BusinessObjectGetRelatedBusinessObjectV1AsyncWithHttpInfo (string parentbusobid, string parentbusobrecid, string relationshipid, int? pageNumber = null, int? pageSize = null, bool? allfields = null, bool? usedefaultgrid = null, bool? includelinks = null);
        /// <summary>
        /// Get related Business Objects custom grid
        /// </summary>
        /// <remarks>
        /// Operation to get related Business Objects for a specific relationship. Specify a custom grid ID as the fields to return.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object.</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to return.</param>
        /// <param name="gridid">Specify the ID for the custom grid that contains the field list.</param>
        /// <param name="pageNumber">Specify the page number of the result set to return. (optional)</param>
        /// <param name="pageSize">Specify the number of rows to return per page. (optional)</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>Task of RelatedBusinessObjectResponse</returns>
        System.Threading.Tasks.Task<RelatedBusinessObjectResponse> BusinessObjectGetRelatedBusinessObjectWithCustomGridV1Async (string parentbusobid, string parentbusobrecid, string relationshipid, string gridid, int? pageNumber = null, int? pageSize = null, bool? includelinks = null);

        /// <summary>
        /// Get related Business Objects custom grid
        /// </summary>
        /// <remarks>
        /// Operation to get related Business Objects for a specific relationship. Specify a custom grid ID as the fields to return.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object.</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to return.</param>
        /// <param name="gridid">Specify the ID for the custom grid that contains the field list.</param>
        /// <param name="pageNumber">Specify the page number of the result set to return. (optional)</param>
        /// <param name="pageSize">Specify the number of rows to return per page. (optional)</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>Task of ApiResponse (RelatedBusinessObjectResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RelatedBusinessObjectResponse>> BusinessObjectGetRelatedBusinessObjectWithCustomGridV1AsyncWithHttpInfo (string parentbusobid, string parentbusobrecid, string relationshipid, string gridid, int? pageNumber = null, int? pageSize = null, bool? includelinks = null);
        /// <summary>
        /// Link related Business Objects
        /// </summary>
        /// <remarks>
        /// Operation to link related Business Objects. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object.</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to link.</param>
        /// <param name="busobid">Specify the Business Object ID of the Business Object to be linked.</param>
        /// <param name="busobrecid">Specify the Business Object record ID of the Business Object to be linked.</param>
        /// <returns>Task of RelatedBusinessObjectResponse</returns>
        System.Threading.Tasks.Task<RelatedBusinessObjectResponse> BusinessObjectLinkRelatedBusinessObjectByRecIdV1Async (string parentbusobid, string parentbusobrecid, string relationshipid, string busobid, string busobrecid);

        /// <summary>
        /// Link related Business Objects
        /// </summary>
        /// <remarks>
        /// Operation to link related Business Objects. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object.</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to link.</param>
        /// <param name="busobid">Specify the Business Object ID of the Business Object to be linked.</param>
        /// <param name="busobrecid">Specify the Business Object record ID of the Business Object to be linked.</param>
        /// <returns>Task of ApiResponse (RelatedBusinessObjectResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RelatedBusinessObjectResponse>> BusinessObjectLinkRelatedBusinessObjectByRecIdV1AsyncWithHttpInfo (string parentbusobid, string parentbusobrecid, string relationshipid, string busobid, string busobrecid);
        /// <summary>
        /// Remove an attachment by Business Object ID and public ID
        /// </summary>
        /// <remarks>
        /// Operation to remove an attachment from a Business Object using the attachment record ID, Business Object ID, and Business Object public ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentid">Specify the internal ID of the attachment record.</param>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="publicid">Specify the Business Object public ID.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BusinessObjectRemoveBusinessObjectAttachmentByIdAndPublicIdV1Async (string attachmentid, string busobid, string publicid);

        /// <summary>
        /// Remove an attachment by Business Object ID and public ID
        /// </summary>
        /// <remarks>
        /// Operation to remove an attachment from a Business Object using the attachment record ID, Business Object ID, and Business Object public ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentid">Specify the internal ID of the attachment record.</param>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="publicid">Specify the Business Object public ID.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BusinessObjectRemoveBusinessObjectAttachmentByIdAndPublicIdV1AsyncWithHttpInfo (string attachmentid, string busobid, string publicid);
        /// <summary>
        /// Remove an attachment by Business Object ID and record ID
        /// </summary>
        /// <remarks>
        /// Operation to remove an attachment from a Business Object using the attachment record ID, Business Object ID, and Business Object record ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentid">Specify the internal ID of the attachment record.</param>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BusinessObjectRemoveBusinessObjectAttachmentByIdAndRecIdV1Async (string attachmentid, string busobid, string busobrecid);

        /// <summary>
        /// Remove an attachment by Business Object ID and record ID
        /// </summary>
        /// <remarks>
        /// Operation to remove an attachment from a Business Object using the attachment record ID, Business Object ID, and Business Object record ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentid">Specify the internal ID of the attachment record.</param>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BusinessObjectRemoveBusinessObjectAttachmentByIdAndRecIdV1AsyncWithHttpInfo (string attachmentid, string busobid, string busobrecid);
        /// <summary>
        /// Remove an attachment by Business Object name and public ID
        /// </summary>
        /// <remarks>
        /// Operation to remove an attachment from a Business Object using the attachment record ID, Business Object name, and Business Object record ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentid">Specify the internal ID of the attachment record.</param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="publicid">Specify the Business Object public ID.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BusinessObjectRemoveBusinessObjectAttachmentByNameAndPublicIdV1Async (string attachmentid, string busobname, string publicid);

        /// <summary>
        /// Remove an attachment by Business Object name and public ID
        /// </summary>
        /// <remarks>
        /// Operation to remove an attachment from a Business Object using the attachment record ID, Business Object name, and Business Object record ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentid">Specify the internal ID of the attachment record.</param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="publicid">Specify the Business Object public ID.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BusinessObjectRemoveBusinessObjectAttachmentByNameAndPublicIdV1AsyncWithHttpInfo (string attachmentid, string busobname, string publicid);
        /// <summary>
        /// Remove an attachment by Business Object name and record ID
        /// </summary>
        /// <remarks>
        /// Operation to remove an attachment from a Business Object using the attachment record ID, Business Object name, and Business Object public ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentid">Specify the internal ID of the attachment record.</param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BusinessObjectRemoveBusinessObjectAttachmentByNameAndRecIdV1Async (string attachmentid, string busobname, string busobrecid);

        /// <summary>
        /// Remove an attachment by Business Object name and record ID
        /// </summary>
        /// <remarks>
        /// Operation to remove an attachment from a Business Object using the attachment record ID, Business Object name, and Business Object public ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentid">Specify the internal ID of the attachment record.</param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BusinessObjectRemoveBusinessObjectAttachmentByNameAndRecIdV1AsyncWithHttpInfo (string attachmentid, string busobname, string busobrecid);
        /// <summary>
        /// Attach a Business Object to a Business Object
        /// </summary>
        /// <remarks>
        /// Operation to attach a Business Object to a Business Object. This links the Business Object but does not create a relationship between the two. (Use \&quot;Link Related Business Objects\&quot; to create a relationship.)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object used to specify the Business Objects to attach. You can use Business Object name or ID and Business Object record ID or public ID.</param>
        /// <returns>Task of AttachmentsResponse</returns>
        System.Threading.Tasks.Task<AttachmentsResponse> BusinessObjectSaveBusinessObjectAttachmentBusObV1Async (SaveBusObAttachmentRequest request);

        /// <summary>
        /// Attach a Business Object to a Business Object
        /// </summary>
        /// <remarks>
        /// Operation to attach a Business Object to a Business Object. This links the Business Object but does not create a relationship between the two. (Use \&quot;Link Related Business Objects\&quot; to create a relationship.)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object used to specify the Business Objects to attach. You can use Business Object name or ID and Business Object record ID or public ID.</param>
        /// <returns>Task of ApiResponse (AttachmentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentsResponse>> BusinessObjectSaveBusinessObjectAttachmentBusObV1AsyncWithHttpInfo (SaveBusObAttachmentRequest request);
        /// <summary>
        /// Attach a file via UNC
        /// </summary>
        /// <remarks>
        /// Operation to attach a file to a Business Object via a path (UNC recommended).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object used to specify the file path (UNC recommended) and the Business Object. You can use Business Object name or ID and Business Object record ID or public ID.</param>
        /// <returns>Task of AttachmentsResponse</returns>
        System.Threading.Tasks.Task<AttachmentsResponse> BusinessObjectSaveBusinessObjectAttachmentLinkV1Async (SaveLinkAttachmentRequest request);

        /// <summary>
        /// Attach a file via UNC
        /// </summary>
        /// <remarks>
        /// Operation to attach a file to a Business Object via a path (UNC recommended).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object used to specify the file path (UNC recommended) and the Business Object. You can use Business Object name or ID and Business Object record ID or public ID.</param>
        /// <returns>Task of ApiResponse (AttachmentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentsResponse>> BusinessObjectSaveBusinessObjectAttachmentLinkV1AsyncWithHttpInfo (SaveLinkAttachmentRequest request);
        /// <summary>
        /// Attach a URL path
        /// </summary>
        /// <remarks>
        /// Operation to attach a URL path to a Business Object.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object used to specify the URL path and Business Object. You can use Business Object name or ID and Business Object record ID or public ID.</param>
        /// <returns>Task of AttachmentsResponse</returns>
        System.Threading.Tasks.Task<AttachmentsResponse> BusinessObjectSaveBusinessObjectAttachmentUrlV1Async (SaveUrlAttachmentRequest request);

        /// <summary>
        /// Attach a URL path
        /// </summary>
        /// <remarks>
        /// Operation to attach a URL path to a Business Object.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object used to specify the URL path and Business Object. You can use Business Object name or ID and Business Object record ID or public ID.</param>
        /// <returns>Task of ApiResponse (AttachmentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentsResponse>> BusinessObjectSaveBusinessObjectAttachmentUrlV1AsyncWithHttpInfo (SaveUrlAttachmentRequest request);
        /// <summary>
        /// Create or update a batch of Business Objects
        /// </summary>
        /// <remarks>
        /// Operation that creates or updates an array of Business Objects in a batch. To update, specify record ID or public ID. To create, leave record ID and public ID empty.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Specify the array of Business Object templates. </param>
        /// <returns>Task of BatchSaveResponse</returns>
        System.Threading.Tasks.Task<BatchSaveResponse> BusinessObjectSaveBusinessObjectBatchV1Async (BatchSaveRequest request);

        /// <summary>
        /// Create or update a batch of Business Objects
        /// </summary>
        /// <remarks>
        /// Operation that creates or updates an array of Business Objects in a batch. To update, specify record ID or public ID. To create, leave record ID and public ID empty.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Specify the array of Business Object templates. </param>
        /// <returns>Task of ApiResponse (BatchSaveResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchSaveResponse>> BusinessObjectSaveBusinessObjectBatchV1AsyncWithHttpInfo (BatchSaveRequest request);
        /// <summary>
        /// Create or Update a Business Object
        /// </summary>
        /// <remarks>
        /// Operation that creates a new Business Object or updates an existing Business Object. To update, specify record ID or public ID. To create, leave record ID and public ID empty.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Specify a list of fields from a Business Object template. </param>
        /// <returns>Task of SaveResponse</returns>
        System.Threading.Tasks.Task<SaveResponse> BusinessObjectSaveBusinessObjectV1Async (SaveRequest request);

        /// <summary>
        /// Create or Update a Business Object
        /// </summary>
        /// <remarks>
        /// Operation that creates a new Business Object or updates an existing Business Object. To update, specify record ID or public ID. To create, leave record ID and public ID empty.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Specify a list of fields from a Business Object template. </param>
        /// <returns>Task of ApiResponse (SaveResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SaveResponse>> BusinessObjectSaveBusinessObjectV1AsyncWithHttpInfo (SaveRequest request);
        /// <summary>
        /// Create or update a related Business Object
        /// </summary>
        /// <remarks>
        /// Operation that creates or updates a related Business Object. To update, specify record ID or public ID. To create, leave record ID and public ID empty.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object specifying the parent the Business Object, the Relationship, and field values for the Business Object to create or update. </param>
        /// <returns>Task of RelatedSaveResponse</returns>
        System.Threading.Tasks.Task<RelatedSaveResponse> BusinessObjectSaveRelatedBusinessObjectV1Async (RelatedSaveRequest request);

        /// <summary>
        /// Create or update a related Business Object
        /// </summary>
        /// <remarks>
        /// Operation that creates or updates a related Business Object. To update, specify record ID or public ID. To create, leave record ID and public ID empty.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object specifying the parent the Business Object, the Relationship, and field values for the Business Object to create or update. </param>
        /// <returns>Task of ApiResponse (RelatedSaveResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RelatedSaveResponse>> BusinessObjectSaveRelatedBusinessObjectV1AsyncWithHttpInfo (RelatedSaveRequest request);
        /// <summary>
        /// UnLink related Business Objects
        /// </summary>
        /// <remarks>
        /// Operation to unlink related Business Objects.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object.</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to unlink.</param>
        /// <param name="busobid">Specify the Business Object ID of the Business Object to be unlinked.</param>
        /// <param name="busobrecid">Specify the Business Object record ID of the Business Object to be unlinked.</param>
        /// <returns>Task of RelatedBusinessObjectResponse</returns>
        System.Threading.Tasks.Task<RelatedBusinessObjectResponse> BusinessObjectUnLinkRelatedBusinessObjectByRecIdV1Async (string parentbusobid, string parentbusobrecid, string relationshipid, string busobid, string busobrecid);

        /// <summary>
        /// UnLink related Business Objects
        /// </summary>
        /// <remarks>
        /// Operation to unlink related Business Objects.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object.</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to unlink.</param>
        /// <param name="busobid">Specify the Business Object ID of the Business Object to be unlinked.</param>
        /// <param name="busobrecid">Specify the Business Object record ID of the Business Object to be unlinked.</param>
        /// <returns>Task of ApiResponse (RelatedBusinessObjectResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RelatedBusinessObjectResponse>> BusinessObjectUnLinkRelatedBusinessObjectByRecIdV1AsyncWithHttpInfo (string parentbusobid, string parentbusobrecid, string relationshipid, string busobid, string busobrecid);
        /// <summary>
        /// Upload an attachment by Business Object ID and public ID
        /// </summary>
        /// <remarks>
        /// Operation to upload an attachment to a Business Object record using a Business Object ID and public ID. The body of the request is the byte array of the file part being uploaded.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="filename">Specify the name of the file being uploaded. If no attachment name is provided, the file name is used.</param>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="publicid">Specify the Business Object public ID  to attach the file to.</param>
        /// <param name="offset">The offset is the starting index of the file part being uploaded.  If this is the first part then the offset will be zero.</param>
        /// <param name="totalsize">The entire file size in bytes.</param>
        /// <param name="attachmentid">Specify the attachment ID of an uploaded file to upload subsequent parts and ensure each part gets appended to the parts that have already been uploaded. (optional)</param>
        /// <param name="displaytext">Specify the attachment name, which is the display text for the attachment record. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> BusinessObjectUploadBusinessObjectAttachmentByIdAndPublicIdV1Async (byte[] body, string filename, string busobid, string publicid, int? offset, int? totalsize, string attachmentid = null, string displaytext = null);

        /// <summary>
        /// Upload an attachment by Business Object ID and public ID
        /// </summary>
        /// <remarks>
        /// Operation to upload an attachment to a Business Object record using a Business Object ID and public ID. The body of the request is the byte array of the file part being uploaded.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="filename">Specify the name of the file being uploaded. If no attachment name is provided, the file name is used.</param>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="publicid">Specify the Business Object public ID  to attach the file to.</param>
        /// <param name="offset">The offset is the starting index of the file part being uploaded.  If this is the first part then the offset will be zero.</param>
        /// <param name="totalsize">The entire file size in bytes.</param>
        /// <param name="attachmentid">Specify the attachment ID of an uploaded file to upload subsequent parts and ensure each part gets appended to the parts that have already been uploaded. (optional)</param>
        /// <param name="displaytext">Specify the attachment name, which is the display text for the attachment record. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> BusinessObjectUploadBusinessObjectAttachmentByIdAndPublicIdV1AsyncWithHttpInfo (byte[] body, string filename, string busobid, string publicid, int? offset, int? totalsize, string attachmentid = null, string displaytext = null);
        /// <summary>
        /// Upload an attachment by Business Object ID and record ID
        /// </summary>
        /// <remarks>
        /// Operation to upload an attachment to a Business Object record using a Business Object ID and record ID. The body of the request is the byte array of the file part being uploaded.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="filename">Specify the name of the file being uploaded. If no attachment name is provided, the file name is used.</param>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid">Specify the Business Object record ID to attach the file to.</param>
        /// <param name="offset">The offset is the starting index of the file part being uploaded.  If this is the first part then the offset will be zero.</param>
        /// <param name="totalsize">The entire file size in bytes.</param>
        /// <param name="attachmentid">Specify the attachment ID of an uploaded file to upload subsequent parts and ensure each part gets appended to the parts that have already been uploaded. (optional)</param>
        /// <param name="displaytext">Specify the attachment name, which is the display text for the attachment record. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> BusinessObjectUploadBusinessObjectAttachmentByIdAndRecIdV1Async (byte[] body, string filename, string busobid, string busobrecid, int? offset, int? totalsize, string attachmentid = null, string displaytext = null);

        /// <summary>
        /// Upload an attachment by Business Object ID and record ID
        /// </summary>
        /// <remarks>
        /// Operation to upload an attachment to a Business Object record using a Business Object ID and record ID. The body of the request is the byte array of the file part being uploaded.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="filename">Specify the name of the file being uploaded. If no attachment name is provided, the file name is used.</param>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid">Specify the Business Object record ID to attach the file to.</param>
        /// <param name="offset">The offset is the starting index of the file part being uploaded.  If this is the first part then the offset will be zero.</param>
        /// <param name="totalsize">The entire file size in bytes.</param>
        /// <param name="attachmentid">Specify the attachment ID of an uploaded file to upload subsequent parts and ensure each part gets appended to the parts that have already been uploaded. (optional)</param>
        /// <param name="displaytext">Specify the attachment name, which is the display text for the attachment record. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> BusinessObjectUploadBusinessObjectAttachmentByIdAndRecIdV1AsyncWithHttpInfo (byte[] body, string filename, string busobid, string busobrecid, int? offset, int? totalsize, string attachmentid = null, string displaytext = null);
        /// <summary>
        /// Upload an attachment by Business Object name and public ID
        /// </summary>
        /// <remarks>
        /// Operation to upload an attachment to a Business Object record using a Business Object name and public ID. The body of the request is the byte array of the file part being uploaded.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="filename">Specify the name of the file being uploaded. If no attachment name is provided, the file name is used.</param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="publicid">Specify the Business Object public ID  to attach the file to.</param>
        /// <param name="offset">The offset is the starting index of the file part being uploaded.  If this is the first part then the offset will be zero.</param>
        /// <param name="totalsize">The entire file size in bytes.</param>
        /// <param name="attachmentid">Specify the attachment ID of an uploaded file to upload subsequent parts and ensure each part gets appended to the parts that have already been uploaded. (optional)</param>
        /// <param name="displaytext">Specify the attachment name, which is the display text for the attachment record. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> BusinessObjectUploadBusinessObjectAttachmentByNameAndPublicIdV1Async (byte[] body, string filename, string busobname, string publicid, int? offset, int? totalsize, string attachmentid = null, string displaytext = null);

        /// <summary>
        /// Upload an attachment by Business Object name and public ID
        /// </summary>
        /// <remarks>
        /// Operation to upload an attachment to a Business Object record using a Business Object name and public ID. The body of the request is the byte array of the file part being uploaded.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="filename">Specify the name of the file being uploaded. If no attachment name is provided, the file name is used.</param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="publicid">Specify the Business Object public ID  to attach the file to.</param>
        /// <param name="offset">The offset is the starting index of the file part being uploaded.  If this is the first part then the offset will be zero.</param>
        /// <param name="totalsize">The entire file size in bytes.</param>
        /// <param name="attachmentid">Specify the attachment ID of an uploaded file to upload subsequent parts and ensure each part gets appended to the parts that have already been uploaded. (optional)</param>
        /// <param name="displaytext">Specify the attachment name, which is the display text for the attachment record. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> BusinessObjectUploadBusinessObjectAttachmentByNameAndPublicIdV1AsyncWithHttpInfo (byte[] body, string filename, string busobname, string publicid, int? offset, int? totalsize, string attachmentid = null, string displaytext = null);
        /// <summary>
        /// Upload an attachment by Business Object name and record ID
        /// </summary>
        /// <remarks>
        /// Operation to upload an attachment to a Business Object record using a Business Object name and record ID. The body of the request is the byte array of the file part being uploaded.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="filename">Specify the name of the file being uploaded. If no attachment name is provided, the file name is used.</param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="busobrecid">Specify the Business Object record ID to attach the file to.</param>
        /// <param name="offset">The offset is the starting index of the file part being uploaded.  If this is the first part then the offset will be zero.</param>
        /// <param name="totalsize">The entire file size in bytes.</param>
        /// <param name="attachmentid">Specify the attachment ID of an uploaded file to upload subsequent parts and ensure each part gets appended to the parts that have already been uploaded. (optional)</param>
        /// <param name="displaytext">Specify the attachment name, which is the display text for the attachment record. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> BusinessObjectUploadBusinessObjectAttachmentByNameAndRecIdV1Async (byte[] body, string filename, string busobname, string busobrecid, int? offset, int? totalsize, string attachmentid = null, string displaytext = null);

        /// <summary>
        /// Upload an attachment by Business Object name and record ID
        /// </summary>
        /// <remarks>
        /// Operation to upload an attachment to a Business Object record using a Business Object name and record ID. The body of the request is the byte array of the file part being uploaded.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="filename">Specify the name of the file being uploaded. If no attachment name is provided, the file name is used.</param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="busobrecid">Specify the Business Object record ID to attach the file to.</param>
        /// <param name="offset">The offset is the starting index of the file part being uploaded.  If this is the first part then the offset will be zero.</param>
        /// <param name="totalsize">The entire file size in bytes.</param>
        /// <param name="attachmentid">Specify the attachment ID of an uploaded file to upload subsequent parts and ensure each part gets appended to the parts that have already been uploaded. (optional)</param>
        /// <param name="displaytext">Specify the attachment name, which is the display text for the attachment record. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> BusinessObjectUploadBusinessObjectAttachmentByNameAndRecIdV1AsyncWithHttpInfo (byte[] body, string filename, string busobname, string busobrecid, int? offset, int? totalsize, string attachmentid = null, string displaytext = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BusinessObjectApi : IBusinessObjectApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessObjectApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BusinessObjectApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessObjectApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BusinessObjectApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete Business Objects in a batch Operation to delete a batch of Business Objects.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Specify an array of Business Object IDs and record IDs or public IDs. Use a flag to stop on error or continue on error.</param>
        /// <returns>BatchDeleteResponse</returns>
        public BatchDeleteResponse BusinessObjectDeleteBusinessObjectBatchV1 (BatchDeleteRequest request)
        {
             ApiResponse<BatchDeleteResponse> localVarResponse = BusinessObjectDeleteBusinessObjectBatchV1WithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Business Objects in a batch Operation to delete a batch of Business Objects.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Specify an array of Business Object IDs and record IDs or public IDs. Use a flag to stop on error or continue on error.</param>
        /// <returns>ApiResponse of BatchDeleteResponse</returns>
        public ApiResponse< BatchDeleteResponse > BusinessObjectDeleteBusinessObjectBatchV1WithHttpInfo (BatchDeleteRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling BusinessObjectApi->BusinessObjectDeleteBusinessObjectBatchV1");

            var localVarPath = "/api/V1/deletebusinessobjectbatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectDeleteBusinessObjectBatchV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchDeleteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchDeleteResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchDeleteResponse)));
        }

        /// <summary>
        /// Delete Business Objects in a batch Operation to delete a batch of Business Objects.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Specify an array of Business Object IDs and record IDs or public IDs. Use a flag to stop on error or continue on error.</param>
        /// <returns>Task of BatchDeleteResponse</returns>
        public async System.Threading.Tasks.Task<BatchDeleteResponse> BusinessObjectDeleteBusinessObjectBatchV1Async (BatchDeleteRequest request)
        {
             ApiResponse<BatchDeleteResponse> localVarResponse = await BusinessObjectDeleteBusinessObjectBatchV1AsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Business Objects in a batch Operation to delete a batch of Business Objects.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Specify an array of Business Object IDs and record IDs or public IDs. Use a flag to stop on error or continue on error.</param>
        /// <returns>Task of ApiResponse (BatchDeleteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BatchDeleteResponse>> BusinessObjectDeleteBusinessObjectBatchV1AsyncWithHttpInfo (BatchDeleteRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling BusinessObjectApi->BusinessObjectDeleteBusinessObjectBatchV1");

            var localVarPath = "/api/V1/deletebusinessobjectbatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectDeleteBusinessObjectBatchV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchDeleteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchDeleteResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchDeleteResponse)));
        }

        /// <summary>
        /// Delete a Business Object by public ID Operation to delete a Business Object by Business Object ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="publicid">Specify the Business Object public ID.</param>
        /// <returns>DeleteResponse</returns>
        public DeleteResponse BusinessObjectDeleteBusinessObjectByPublicIdV1 (string busobid, string publicid)
        {
             ApiResponse<DeleteResponse> localVarResponse = BusinessObjectDeleteBusinessObjectByPublicIdV1WithHttpInfo(busobid, publicid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a Business Object by public ID Operation to delete a Business Object by Business Object ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="publicid">Specify the Business Object public ID.</param>
        /// <returns>ApiResponse of DeleteResponse</returns>
        public ApiResponse< DeleteResponse > BusinessObjectDeleteBusinessObjectByPublicIdV1WithHttpInfo (string busobid, string publicid)
        {
            // verify the required parameter 'busobid' is set
            if (busobid == null)
                throw new ApiException(400, "Missing required parameter 'busobid' when calling BusinessObjectApi->BusinessObjectDeleteBusinessObjectByPublicIdV1");
            // verify the required parameter 'publicid' is set
            if (publicid == null)
                throw new ApiException(400, "Missing required parameter 'publicid' when calling BusinessObjectApi->BusinessObjectDeleteBusinessObjectByPublicIdV1");

            var localVarPath = "/api/V1/deletebusinessobject/busobid/{busobid}/publicid/{publicid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (busobid != null) localVarPathParams.Add("busobid", Configuration.ApiClient.ParameterToString(busobid)); // path parameter
            if (publicid != null) localVarPathParams.Add("publicid", Configuration.ApiClient.ParameterToString(publicid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectDeleteBusinessObjectByPublicIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteResponse)));
        }

        /// <summary>
        /// Delete a Business Object by public ID Operation to delete a Business Object by Business Object ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="publicid">Specify the Business Object public ID.</param>
        /// <returns>Task of DeleteResponse</returns>
        public async System.Threading.Tasks.Task<DeleteResponse> BusinessObjectDeleteBusinessObjectByPublicIdV1Async (string busobid, string publicid)
        {
             ApiResponse<DeleteResponse> localVarResponse = await BusinessObjectDeleteBusinessObjectByPublicIdV1AsyncWithHttpInfo(busobid, publicid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a Business Object by public ID Operation to delete a Business Object by Business Object ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="publicid">Specify the Business Object public ID.</param>
        /// <returns>Task of ApiResponse (DeleteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteResponse>> BusinessObjectDeleteBusinessObjectByPublicIdV1AsyncWithHttpInfo (string busobid, string publicid)
        {
            // verify the required parameter 'busobid' is set
            if (busobid == null)
                throw new ApiException(400, "Missing required parameter 'busobid' when calling BusinessObjectApi->BusinessObjectDeleteBusinessObjectByPublicIdV1");
            // verify the required parameter 'publicid' is set
            if (publicid == null)
                throw new ApiException(400, "Missing required parameter 'publicid' when calling BusinessObjectApi->BusinessObjectDeleteBusinessObjectByPublicIdV1");

            var localVarPath = "/api/V1/deletebusinessobject/busobid/{busobid}/publicid/{publicid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (busobid != null) localVarPathParams.Add("busobid", Configuration.ApiClient.ParameterToString(busobid)); // path parameter
            if (publicid != null) localVarPathParams.Add("publicid", Configuration.ApiClient.ParameterToString(publicid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectDeleteBusinessObjectByPublicIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteResponse)));
        }

        /// <summary>
        /// Delete a Business Object by record ID Operation to delete a single Business Object.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid"> Specify the Business Object record ID.</param>
        /// <returns>DeleteResponse</returns>
        public DeleteResponse BusinessObjectDeleteBusinessObjectByRecIdV1 (string busobid, string busobrecid)
        {
             ApiResponse<DeleteResponse> localVarResponse = BusinessObjectDeleteBusinessObjectByRecIdV1WithHttpInfo(busobid, busobrecid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a Business Object by record ID Operation to delete a single Business Object.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid"> Specify the Business Object record ID.</param>
        /// <returns>ApiResponse of DeleteResponse</returns>
        public ApiResponse< DeleteResponse > BusinessObjectDeleteBusinessObjectByRecIdV1WithHttpInfo (string busobid, string busobrecid)
        {
            // verify the required parameter 'busobid' is set
            if (busobid == null)
                throw new ApiException(400, "Missing required parameter 'busobid' when calling BusinessObjectApi->BusinessObjectDeleteBusinessObjectByRecIdV1");
            // verify the required parameter 'busobrecid' is set
            if (busobrecid == null)
                throw new ApiException(400, "Missing required parameter 'busobrecid' when calling BusinessObjectApi->BusinessObjectDeleteBusinessObjectByRecIdV1");

            var localVarPath = "/api/V1/deletebusinessobject/busobid/{busobid}/busobrecid/{busobrecid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (busobid != null) localVarPathParams.Add("busobid", Configuration.ApiClient.ParameterToString(busobid)); // path parameter
            if (busobrecid != null) localVarPathParams.Add("busobrecid", Configuration.ApiClient.ParameterToString(busobrecid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectDeleteBusinessObjectByRecIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteResponse)));
        }

        /// <summary>
        /// Delete a Business Object by record ID Operation to delete a single Business Object.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid"> Specify the Business Object record ID.</param>
        /// <returns>Task of DeleteResponse</returns>
        public async System.Threading.Tasks.Task<DeleteResponse> BusinessObjectDeleteBusinessObjectByRecIdV1Async (string busobid, string busobrecid)
        {
             ApiResponse<DeleteResponse> localVarResponse = await BusinessObjectDeleteBusinessObjectByRecIdV1AsyncWithHttpInfo(busobid, busobrecid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a Business Object by record ID Operation to delete a single Business Object.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid"> Specify the Business Object record ID.</param>
        /// <returns>Task of ApiResponse (DeleteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteResponse>> BusinessObjectDeleteBusinessObjectByRecIdV1AsyncWithHttpInfo (string busobid, string busobrecid)
        {
            // verify the required parameter 'busobid' is set
            if (busobid == null)
                throw new ApiException(400, "Missing required parameter 'busobid' when calling BusinessObjectApi->BusinessObjectDeleteBusinessObjectByRecIdV1");
            // verify the required parameter 'busobrecid' is set
            if (busobrecid == null)
                throw new ApiException(400, "Missing required parameter 'busobrecid' when calling BusinessObjectApi->BusinessObjectDeleteBusinessObjectByRecIdV1");

            var localVarPath = "/api/V1/deletebusinessobject/busobid/{busobid}/busobrecid/{busobrecid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (busobid != null) localVarPathParams.Add("busobid", Configuration.ApiClient.ParameterToString(busobid)); // path parameter
            if (busobrecid != null) localVarPathParams.Add("busobrecid", Configuration.ApiClient.ParameterToString(busobrecid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectDeleteBusinessObjectByRecIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeleteResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteResponse)));
        }

        /// <summary>
        /// Delete a related Business Object by public ID Operation to delete a related Business Object. (Use \&quot;Unlink Related Business Object\&quot; to unlink two Business Objects rather that deleting the related Business Object.)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to delete.</param>
        /// <param name="publicid">Specify the public ID for the related Business Object you want to delete. Use only for Business Objects with unique public IDs. Use \&quot;Delete a related Business Object by record ID\&quot; when public IDs are not unique.</param>
        /// <returns>RelatedBusinessObjectResponse</returns>
        public RelatedBusinessObjectResponse BusinessObjectDeleteRelatedBusinessObjectByPublicIdV1 (string parentbusobid, string parentbusobrecid, string relationshipid, string publicid)
        {
             ApiResponse<RelatedBusinessObjectResponse> localVarResponse = BusinessObjectDeleteRelatedBusinessObjectByPublicIdV1WithHttpInfo(parentbusobid, parentbusobrecid, relationshipid, publicid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a related Business Object by public ID Operation to delete a related Business Object. (Use \&quot;Unlink Related Business Object\&quot; to unlink two Business Objects rather that deleting the related Business Object.)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to delete.</param>
        /// <param name="publicid">Specify the public ID for the related Business Object you want to delete. Use only for Business Objects with unique public IDs. Use \&quot;Delete a related Business Object by record ID\&quot; when public IDs are not unique.</param>
        /// <returns>ApiResponse of RelatedBusinessObjectResponse</returns>
        public ApiResponse< RelatedBusinessObjectResponse > BusinessObjectDeleteRelatedBusinessObjectByPublicIdV1WithHttpInfo (string parentbusobid, string parentbusobrecid, string relationshipid, string publicid)
        {
            // verify the required parameter 'parentbusobid' is set
            if (parentbusobid == null)
                throw new ApiException(400, "Missing required parameter 'parentbusobid' when calling BusinessObjectApi->BusinessObjectDeleteRelatedBusinessObjectByPublicIdV1");
            // verify the required parameter 'parentbusobrecid' is set
            if (parentbusobrecid == null)
                throw new ApiException(400, "Missing required parameter 'parentbusobrecid' when calling BusinessObjectApi->BusinessObjectDeleteRelatedBusinessObjectByPublicIdV1");
            // verify the required parameter 'relationshipid' is set
            if (relationshipid == null)
                throw new ApiException(400, "Missing required parameter 'relationshipid' when calling BusinessObjectApi->BusinessObjectDeleteRelatedBusinessObjectByPublicIdV1");
            // verify the required parameter 'publicid' is set
            if (publicid == null)
                throw new ApiException(400, "Missing required parameter 'publicid' when calling BusinessObjectApi->BusinessObjectDeleteRelatedBusinessObjectByPublicIdV1");

            var localVarPath = "/api/V1/deleterelatedbusinessobject/parentbusobid/{parentbusobid}/parentbusobrecid/{parentbusobrecid}/relationshipid/{relationshipid}/publicid/{publicid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parentbusobid != null) localVarPathParams.Add("parentbusobid", Configuration.ApiClient.ParameterToString(parentbusobid)); // path parameter
            if (parentbusobrecid != null) localVarPathParams.Add("parentbusobrecid", Configuration.ApiClient.ParameterToString(parentbusobrecid)); // path parameter
            if (relationshipid != null) localVarPathParams.Add("relationshipid", Configuration.ApiClient.ParameterToString(relationshipid)); // path parameter
            if (publicid != null) localVarPathParams.Add("publicid", Configuration.ApiClient.ParameterToString(publicid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectDeleteRelatedBusinessObjectByPublicIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RelatedBusinessObjectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RelatedBusinessObjectResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RelatedBusinessObjectResponse)));
        }

        /// <summary>
        /// Delete a related Business Object by public ID Operation to delete a related Business Object. (Use \&quot;Unlink Related Business Object\&quot; to unlink two Business Objects rather that deleting the related Business Object.)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to delete.</param>
        /// <param name="publicid">Specify the public ID for the related Business Object you want to delete. Use only for Business Objects with unique public IDs. Use \&quot;Delete a related Business Object by record ID\&quot; when public IDs are not unique.</param>
        /// <returns>Task of RelatedBusinessObjectResponse</returns>
        public async System.Threading.Tasks.Task<RelatedBusinessObjectResponse> BusinessObjectDeleteRelatedBusinessObjectByPublicIdV1Async (string parentbusobid, string parentbusobrecid, string relationshipid, string publicid)
        {
             ApiResponse<RelatedBusinessObjectResponse> localVarResponse = await BusinessObjectDeleteRelatedBusinessObjectByPublicIdV1AsyncWithHttpInfo(parentbusobid, parentbusobrecid, relationshipid, publicid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a related Business Object by public ID Operation to delete a related Business Object. (Use \&quot;Unlink Related Business Object\&quot; to unlink two Business Objects rather that deleting the related Business Object.)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to delete.</param>
        /// <param name="publicid">Specify the public ID for the related Business Object you want to delete. Use only for Business Objects with unique public IDs. Use \&quot;Delete a related Business Object by record ID\&quot; when public IDs are not unique.</param>
        /// <returns>Task of ApiResponse (RelatedBusinessObjectResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RelatedBusinessObjectResponse>> BusinessObjectDeleteRelatedBusinessObjectByPublicIdV1AsyncWithHttpInfo (string parentbusobid, string parentbusobrecid, string relationshipid, string publicid)
        {
            // verify the required parameter 'parentbusobid' is set
            if (parentbusobid == null)
                throw new ApiException(400, "Missing required parameter 'parentbusobid' when calling BusinessObjectApi->BusinessObjectDeleteRelatedBusinessObjectByPublicIdV1");
            // verify the required parameter 'parentbusobrecid' is set
            if (parentbusobrecid == null)
                throw new ApiException(400, "Missing required parameter 'parentbusobrecid' when calling BusinessObjectApi->BusinessObjectDeleteRelatedBusinessObjectByPublicIdV1");
            // verify the required parameter 'relationshipid' is set
            if (relationshipid == null)
                throw new ApiException(400, "Missing required parameter 'relationshipid' when calling BusinessObjectApi->BusinessObjectDeleteRelatedBusinessObjectByPublicIdV1");
            // verify the required parameter 'publicid' is set
            if (publicid == null)
                throw new ApiException(400, "Missing required parameter 'publicid' when calling BusinessObjectApi->BusinessObjectDeleteRelatedBusinessObjectByPublicIdV1");

            var localVarPath = "/api/V1/deleterelatedbusinessobject/parentbusobid/{parentbusobid}/parentbusobrecid/{parentbusobrecid}/relationshipid/{relationshipid}/publicid/{publicid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parentbusobid != null) localVarPathParams.Add("parentbusobid", Configuration.ApiClient.ParameterToString(parentbusobid)); // path parameter
            if (parentbusobrecid != null) localVarPathParams.Add("parentbusobrecid", Configuration.ApiClient.ParameterToString(parentbusobrecid)); // path parameter
            if (relationshipid != null) localVarPathParams.Add("relationshipid", Configuration.ApiClient.ParameterToString(relationshipid)); // path parameter
            if (publicid != null) localVarPathParams.Add("publicid", Configuration.ApiClient.ParameterToString(publicid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectDeleteRelatedBusinessObjectByPublicIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RelatedBusinessObjectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RelatedBusinessObjectResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RelatedBusinessObjectResponse)));
        }

        /// <summary>
        /// Delete a related Business Object by record ID Operation to delete a related Business Object. (Use \&quot;Unlink Related Business Object\&quot; to unlink two Business Objects rather that deleting the related Business Object.)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to delete.</param>
        /// <param name="busobrecid">Specify the record ID for the related Business Object you want to delete.</param>
        /// <returns>RelatedBusinessObjectResponse</returns>
        public RelatedBusinessObjectResponse BusinessObjectDeleteRelatedBusinessObjectByRecIdV1 (string parentbusobid, string parentbusobrecid, string relationshipid, string busobrecid)
        {
             ApiResponse<RelatedBusinessObjectResponse> localVarResponse = BusinessObjectDeleteRelatedBusinessObjectByRecIdV1WithHttpInfo(parentbusobid, parentbusobrecid, relationshipid, busobrecid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a related Business Object by record ID Operation to delete a related Business Object. (Use \&quot;Unlink Related Business Object\&quot; to unlink two Business Objects rather that deleting the related Business Object.)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to delete.</param>
        /// <param name="busobrecid">Specify the record ID for the related Business Object you want to delete.</param>
        /// <returns>ApiResponse of RelatedBusinessObjectResponse</returns>
        public ApiResponse< RelatedBusinessObjectResponse > BusinessObjectDeleteRelatedBusinessObjectByRecIdV1WithHttpInfo (string parentbusobid, string parentbusobrecid, string relationshipid, string busobrecid)
        {
            // verify the required parameter 'parentbusobid' is set
            if (parentbusobid == null)
                throw new ApiException(400, "Missing required parameter 'parentbusobid' when calling BusinessObjectApi->BusinessObjectDeleteRelatedBusinessObjectByRecIdV1");
            // verify the required parameter 'parentbusobrecid' is set
            if (parentbusobrecid == null)
                throw new ApiException(400, "Missing required parameter 'parentbusobrecid' when calling BusinessObjectApi->BusinessObjectDeleteRelatedBusinessObjectByRecIdV1");
            // verify the required parameter 'relationshipid' is set
            if (relationshipid == null)
                throw new ApiException(400, "Missing required parameter 'relationshipid' when calling BusinessObjectApi->BusinessObjectDeleteRelatedBusinessObjectByRecIdV1");
            // verify the required parameter 'busobrecid' is set
            if (busobrecid == null)
                throw new ApiException(400, "Missing required parameter 'busobrecid' when calling BusinessObjectApi->BusinessObjectDeleteRelatedBusinessObjectByRecIdV1");

            var localVarPath = "/api/V1/deleterelatedbusinessobject/parentbusobid/{parentbusobid}/parentbusobrecid/{parentbusobrecid}/relationshipid/{relationshipid}/busobrecid/{busobrecid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parentbusobid != null) localVarPathParams.Add("parentbusobid", Configuration.ApiClient.ParameterToString(parentbusobid)); // path parameter
            if (parentbusobrecid != null) localVarPathParams.Add("parentbusobrecid", Configuration.ApiClient.ParameterToString(parentbusobrecid)); // path parameter
            if (relationshipid != null) localVarPathParams.Add("relationshipid", Configuration.ApiClient.ParameterToString(relationshipid)); // path parameter
            if (busobrecid != null) localVarPathParams.Add("busobrecid", Configuration.ApiClient.ParameterToString(busobrecid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectDeleteRelatedBusinessObjectByRecIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RelatedBusinessObjectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RelatedBusinessObjectResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RelatedBusinessObjectResponse)));
        }

        /// <summary>
        /// Delete a related Business Object by record ID Operation to delete a related Business Object. (Use \&quot;Unlink Related Business Object\&quot; to unlink two Business Objects rather that deleting the related Business Object.)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to delete.</param>
        /// <param name="busobrecid">Specify the record ID for the related Business Object you want to delete.</param>
        /// <returns>Task of RelatedBusinessObjectResponse</returns>
        public async System.Threading.Tasks.Task<RelatedBusinessObjectResponse> BusinessObjectDeleteRelatedBusinessObjectByRecIdV1Async (string parentbusobid, string parentbusobrecid, string relationshipid, string busobrecid)
        {
             ApiResponse<RelatedBusinessObjectResponse> localVarResponse = await BusinessObjectDeleteRelatedBusinessObjectByRecIdV1AsyncWithHttpInfo(parentbusobid, parentbusobrecid, relationshipid, busobrecid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a related Business Object by record ID Operation to delete a related Business Object. (Use \&quot;Unlink Related Business Object\&quot; to unlink two Business Objects rather that deleting the related Business Object.)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to delete.</param>
        /// <param name="busobrecid">Specify the record ID for the related Business Object you want to delete.</param>
        /// <returns>Task of ApiResponse (RelatedBusinessObjectResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RelatedBusinessObjectResponse>> BusinessObjectDeleteRelatedBusinessObjectByRecIdV1AsyncWithHttpInfo (string parentbusobid, string parentbusobrecid, string relationshipid, string busobrecid)
        {
            // verify the required parameter 'parentbusobid' is set
            if (parentbusobid == null)
                throw new ApiException(400, "Missing required parameter 'parentbusobid' when calling BusinessObjectApi->BusinessObjectDeleteRelatedBusinessObjectByRecIdV1");
            // verify the required parameter 'parentbusobrecid' is set
            if (parentbusobrecid == null)
                throw new ApiException(400, "Missing required parameter 'parentbusobrecid' when calling BusinessObjectApi->BusinessObjectDeleteRelatedBusinessObjectByRecIdV1");
            // verify the required parameter 'relationshipid' is set
            if (relationshipid == null)
                throw new ApiException(400, "Missing required parameter 'relationshipid' when calling BusinessObjectApi->BusinessObjectDeleteRelatedBusinessObjectByRecIdV1");
            // verify the required parameter 'busobrecid' is set
            if (busobrecid == null)
                throw new ApiException(400, "Missing required parameter 'busobrecid' when calling BusinessObjectApi->BusinessObjectDeleteRelatedBusinessObjectByRecIdV1");

            var localVarPath = "/api/V1/deleterelatedbusinessobject/parentbusobid/{parentbusobid}/parentbusobrecid/{parentbusobrecid}/relationshipid/{relationshipid}/busobrecid/{busobrecid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parentbusobid != null) localVarPathParams.Add("parentbusobid", Configuration.ApiClient.ParameterToString(parentbusobid)); // path parameter
            if (parentbusobrecid != null) localVarPathParams.Add("parentbusobrecid", Configuration.ApiClient.ParameterToString(parentbusobrecid)); // path parameter
            if (relationshipid != null) localVarPathParams.Add("relationshipid", Configuration.ApiClient.ParameterToString(relationshipid)); // path parameter
            if (busobrecid != null) localVarPathParams.Add("busobrecid", Configuration.ApiClient.ParameterToString(busobrecid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectDeleteRelatedBusinessObjectByRecIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RelatedBusinessObjectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RelatedBusinessObjectResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RelatedBusinessObjectResponse)));
        }

        /// <summary>
        /// Get lookup values for fields Operation to get potentially valid values for Business Object fields.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object that specifies the Business Object and fields for which values are to be returned.</param>
        /// <returns>FieldValuesLookupResponse</returns>
        public FieldValuesLookupResponse BusinessObjectFieldValuesLookupV1 (FieldValuesLookupRequest request)
        {
             ApiResponse<FieldValuesLookupResponse> localVarResponse = BusinessObjectFieldValuesLookupV1WithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get lookup values for fields Operation to get potentially valid values for Business Object fields.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object that specifies the Business Object and fields for which values are to be returned.</param>
        /// <returns>ApiResponse of FieldValuesLookupResponse</returns>
        public ApiResponse< FieldValuesLookupResponse > BusinessObjectFieldValuesLookupV1WithHttpInfo (FieldValuesLookupRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling BusinessObjectApi->BusinessObjectFieldValuesLookupV1");

            var localVarPath = "/api/V1/fieldvalueslookup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectFieldValuesLookupV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldValuesLookupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldValuesLookupResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldValuesLookupResponse)));
        }

        /// <summary>
        /// Get lookup values for fields Operation to get potentially valid values for Business Object fields.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object that specifies the Business Object and fields for which values are to be returned.</param>
        /// <returns>Task of FieldValuesLookupResponse</returns>
        public async System.Threading.Tasks.Task<FieldValuesLookupResponse> BusinessObjectFieldValuesLookupV1Async (FieldValuesLookupRequest request)
        {
             ApiResponse<FieldValuesLookupResponse> localVarResponse = await BusinessObjectFieldValuesLookupV1AsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get lookup values for fields Operation to get potentially valid values for Business Object fields.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object that specifies the Business Object and fields for which values are to be returned.</param>
        /// <returns>Task of ApiResponse (FieldValuesLookupResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FieldValuesLookupResponse>> BusinessObjectFieldValuesLookupV1AsyncWithHttpInfo (FieldValuesLookupRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling BusinessObjectApi->BusinessObjectFieldValuesLookupV1");

            var localVarPath = "/api/V1/fieldvalueslookup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectFieldValuesLookupV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FieldValuesLookupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FieldValuesLookupResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FieldValuesLookupResponse)));
        }

        /// <summary>
        /// Get an imported Business Object attachment Operation to get a Business Object attachment that has been imported into the system.  HTTP Range Header can be used but is optional.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentid">Specify the internal ID of the attachment record that contains information about the imported file.</param>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <returns>byte[]</returns>
        public byte[] BusinessObjectGetBusinessObjectAttachmentByAttachmentIdV1 (string attachmentid, string busobid, string busobrecid)
        {
             ApiResponse<byte[]> localVarResponse = BusinessObjectGetBusinessObjectAttachmentByAttachmentIdV1WithHttpInfo(attachmentid, busobid, busobrecid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an imported Business Object attachment Operation to get a Business Object attachment that has been imported into the system.  HTTP Range Header can be used but is optional.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentid">Specify the internal ID of the attachment record that contains information about the imported file.</param>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > BusinessObjectGetBusinessObjectAttachmentByAttachmentIdV1WithHttpInfo (string attachmentid, string busobid, string busobrecid)
        {
            // verify the required parameter 'attachmentid' is set
            if (attachmentid == null)
                throw new ApiException(400, "Missing required parameter 'attachmentid' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectAttachmentByAttachmentIdV1");
            // verify the required parameter 'busobid' is set
            if (busobid == null)
                throw new ApiException(400, "Missing required parameter 'busobid' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectAttachmentByAttachmentIdV1");
            // verify the required parameter 'busobrecid' is set
            if (busobrecid == null)
                throw new ApiException(400, "Missing required parameter 'busobrecid' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectAttachmentByAttachmentIdV1");

            var localVarPath = "/api/V1/getbusinessobjectattachment/attachmentid/{attachmentid}/busobid/{busobid}/busobrecid/{busobrecid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentid != null) localVarPathParams.Add("attachmentid", Configuration.ApiClient.ParameterToString(attachmentid)); // path parameter
            if (busobid != null) localVarPathParams.Add("busobid", Configuration.ApiClient.ParameterToString(busobid)); // path parameter
            if (busobrecid != null) localVarPathParams.Add("busobrecid", Configuration.ApiClient.ParameterToString(busobrecid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectGetBusinessObjectAttachmentByAttachmentIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Get an imported Business Object attachment Operation to get a Business Object attachment that has been imported into the system.  HTTP Range Header can be used but is optional.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentid">Specify the internal ID of the attachment record that contains information about the imported file.</param>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> BusinessObjectGetBusinessObjectAttachmentByAttachmentIdV1Async (string attachmentid, string busobid, string busobrecid)
        {
             ApiResponse<byte[]> localVarResponse = await BusinessObjectGetBusinessObjectAttachmentByAttachmentIdV1AsyncWithHttpInfo(attachmentid, busobid, busobrecid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an imported Business Object attachment Operation to get a Business Object attachment that has been imported into the system.  HTTP Range Header can be used but is optional.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentid">Specify the internal ID of the attachment record that contains information about the imported file.</param>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> BusinessObjectGetBusinessObjectAttachmentByAttachmentIdV1AsyncWithHttpInfo (string attachmentid, string busobid, string busobrecid)
        {
            // verify the required parameter 'attachmentid' is set
            if (attachmentid == null)
                throw new ApiException(400, "Missing required parameter 'attachmentid' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectAttachmentByAttachmentIdV1");
            // verify the required parameter 'busobid' is set
            if (busobid == null)
                throw new ApiException(400, "Missing required parameter 'busobid' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectAttachmentByAttachmentIdV1");
            // verify the required parameter 'busobrecid' is set
            if (busobrecid == null)
                throw new ApiException(400, "Missing required parameter 'busobrecid' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectAttachmentByAttachmentIdV1");

            var localVarPath = "/api/V1/getbusinessobjectattachment/attachmentid/{attachmentid}/busobid/{busobid}/busobrecid/{busobrecid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentid != null) localVarPathParams.Add("attachmentid", Configuration.ApiClient.ParameterToString(attachmentid)); // path parameter
            if (busobid != null) localVarPathParams.Add("busobid", Configuration.ApiClient.ParameterToString(busobid)); // path parameter
            if (busobrecid != null) localVarPathParams.Add("busobrecid", Configuration.ApiClient.ParameterToString(busobrecid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectGetBusinessObjectAttachmentByAttachmentIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Get attachments by Business Object public ID Operation to get attachments for a Business Object by Business Object ID and public ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="publicid">Specify the Business Object public ID for the record that contains the attachments.</param>
        /// <param name="type">Record attachment type: &lt;/br&gt;None - Not applicable to the REST API. &lt;/br&gt;File - Linked files. &lt;/br&gt;FileManagerFile - Imported files.&lt;/br&gt;BusOb - Attached Business Objects. &lt;/br&gt;History - Information about the attachment, if any is available. For example, an e-mail message may store the name of an attachment sent.&lt;/br&gt;Other - Not applicable to the REST API. &lt;/br&gt;</param>
        /// <param name="attachmenttype">For file types, select the type of attachment: &lt;/br&gt;Imported - Attachment was imported into database. &lt;/br&gt;Linked - Attachment is linked to an external file. &lt;/br&gt;URL - Attachment is a URL.</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>AttachmentsResponse</returns>
        public AttachmentsResponse BusinessObjectGetBusinessObjectAttachmentsByIdAndPublicIdV1 (string busobid, string publicid, string type, string attachmenttype, bool? includelinks = null)
        {
             ApiResponse<AttachmentsResponse> localVarResponse = BusinessObjectGetBusinessObjectAttachmentsByIdAndPublicIdV1WithHttpInfo(busobid, publicid, type, attachmenttype, includelinks);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get attachments by Business Object public ID Operation to get attachments for a Business Object by Business Object ID and public ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="publicid">Specify the Business Object public ID for the record that contains the attachments.</param>
        /// <param name="type">Record attachment type: &lt;/br&gt;None - Not applicable to the REST API. &lt;/br&gt;File - Linked files. &lt;/br&gt;FileManagerFile - Imported files.&lt;/br&gt;BusOb - Attached Business Objects. &lt;/br&gt;History - Information about the attachment, if any is available. For example, an e-mail message may store the name of an attachment sent.&lt;/br&gt;Other - Not applicable to the REST API. &lt;/br&gt;</param>
        /// <param name="attachmenttype">For file types, select the type of attachment: &lt;/br&gt;Imported - Attachment was imported into database. &lt;/br&gt;Linked - Attachment is linked to an external file. &lt;/br&gt;URL - Attachment is a URL.</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>ApiResponse of AttachmentsResponse</returns>
        public ApiResponse< AttachmentsResponse > BusinessObjectGetBusinessObjectAttachmentsByIdAndPublicIdV1WithHttpInfo (string busobid, string publicid, string type, string attachmenttype, bool? includelinks = null)
        {
            // verify the required parameter 'busobid' is set
            if (busobid == null)
                throw new ApiException(400, "Missing required parameter 'busobid' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectAttachmentsByIdAndPublicIdV1");
            // verify the required parameter 'publicid' is set
            if (publicid == null)
                throw new ApiException(400, "Missing required parameter 'publicid' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectAttachmentsByIdAndPublicIdV1");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectAttachmentsByIdAndPublicIdV1");
            // verify the required parameter 'attachmenttype' is set
            if (attachmenttype == null)
                throw new ApiException(400, "Missing required parameter 'attachmenttype' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectAttachmentsByIdAndPublicIdV1");

            var localVarPath = "/api/V1/getbusinessobjectattachments/busobid/{busobid}/publicid/{publicid}/type/{type}/attachmenttype/{attachmenttype}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (busobid != null) localVarPathParams.Add("busobid", Configuration.ApiClient.ParameterToString(busobid)); // path parameter
            if (publicid != null) localVarPathParams.Add("publicid", Configuration.ApiClient.ParameterToString(publicid)); // path parameter
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (attachmenttype != null) localVarPathParams.Add("attachmenttype", Configuration.ApiClient.ParameterToString(attachmenttype)); // path parameter
            if (includelinks != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includelinks", includelinks)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectGetBusinessObjectAttachmentsByIdAndPublicIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachmentsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentsResponse)));
        }

        /// <summary>
        /// Get attachments by Business Object public ID Operation to get attachments for a Business Object by Business Object ID and public ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="publicid">Specify the Business Object public ID for the record that contains the attachments.</param>
        /// <param name="type">Record attachment type: &lt;/br&gt;None - Not applicable to the REST API. &lt;/br&gt;File - Linked files. &lt;/br&gt;FileManagerFile - Imported files.&lt;/br&gt;BusOb - Attached Business Objects. &lt;/br&gt;History - Information about the attachment, if any is available. For example, an e-mail message may store the name of an attachment sent.&lt;/br&gt;Other - Not applicable to the REST API. &lt;/br&gt;</param>
        /// <param name="attachmenttype">For file types, select the type of attachment: &lt;/br&gt;Imported - Attachment was imported into database. &lt;/br&gt;Linked - Attachment is linked to an external file. &lt;/br&gt;URL - Attachment is a URL.</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>Task of AttachmentsResponse</returns>
        public async System.Threading.Tasks.Task<AttachmentsResponse> BusinessObjectGetBusinessObjectAttachmentsByIdAndPublicIdV1Async (string busobid, string publicid, string type, string attachmenttype, bool? includelinks = null)
        {
             ApiResponse<AttachmentsResponse> localVarResponse = await BusinessObjectGetBusinessObjectAttachmentsByIdAndPublicIdV1AsyncWithHttpInfo(busobid, publicid, type, attachmenttype, includelinks);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get attachments by Business Object public ID Operation to get attachments for a Business Object by Business Object ID and public ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="publicid">Specify the Business Object public ID for the record that contains the attachments.</param>
        /// <param name="type">Record attachment type: &lt;/br&gt;None - Not applicable to the REST API. &lt;/br&gt;File - Linked files. &lt;/br&gt;FileManagerFile - Imported files.&lt;/br&gt;BusOb - Attached Business Objects. &lt;/br&gt;History - Information about the attachment, if any is available. For example, an e-mail message may store the name of an attachment sent.&lt;/br&gt;Other - Not applicable to the REST API. &lt;/br&gt;</param>
        /// <param name="attachmenttype">For file types, select the type of attachment: &lt;/br&gt;Imported - Attachment was imported into database. &lt;/br&gt;Linked - Attachment is linked to an external file. &lt;/br&gt;URL - Attachment is a URL.</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>Task of ApiResponse (AttachmentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AttachmentsResponse>> BusinessObjectGetBusinessObjectAttachmentsByIdAndPublicIdV1AsyncWithHttpInfo (string busobid, string publicid, string type, string attachmenttype, bool? includelinks = null)
        {
            // verify the required parameter 'busobid' is set
            if (busobid == null)
                throw new ApiException(400, "Missing required parameter 'busobid' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectAttachmentsByIdAndPublicIdV1");
            // verify the required parameter 'publicid' is set
            if (publicid == null)
                throw new ApiException(400, "Missing required parameter 'publicid' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectAttachmentsByIdAndPublicIdV1");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectAttachmentsByIdAndPublicIdV1");
            // verify the required parameter 'attachmenttype' is set
            if (attachmenttype == null)
                throw new ApiException(400, "Missing required parameter 'attachmenttype' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectAttachmentsByIdAndPublicIdV1");

            var localVarPath = "/api/V1/getbusinessobjectattachments/busobid/{busobid}/publicid/{publicid}/type/{type}/attachmenttype/{attachmenttype}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (busobid != null) localVarPathParams.Add("busobid", Configuration.ApiClient.ParameterToString(busobid)); // path parameter
            if (publicid != null) localVarPathParams.Add("publicid", Configuration.ApiClient.ParameterToString(publicid)); // path parameter
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (attachmenttype != null) localVarPathParams.Add("attachmenttype", Configuration.ApiClient.ParameterToString(attachmenttype)); // path parameter
            if (includelinks != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includelinks", includelinks)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectGetBusinessObjectAttachmentsByIdAndPublicIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachmentsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentsResponse)));
        }

        /// <summary>
        /// Get attachments by Business Object record ID Operation to get attachments for a Business Object by Business Object ID and record ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <param name="type">Record attachment type: &lt;/br&gt;None - Not applicable to the REST API. &lt;/br&gt;File - Linked files. &lt;/br&gt;FileManagerFile - Imported files.&lt;/br&gt;BusOb - Attached Business Objects. &lt;/br&gt;History - Information about the attachment, if any is available. For example, an e-mail message may store the name of an attachment sent.&lt;/br&gt;Other - Not applicable to the REST API. &lt;/br&gt;</param>
        /// <param name="attachmenttype">For file types, select the type of attachment: &lt;/br&gt;Imported - Attachment was imported into database. &lt;/br&gt;Linked - Attachment is linked to an external file. &lt;/br&gt;URL - Attachment is a URL.</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>AttachmentsResponse</returns>
        public AttachmentsResponse BusinessObjectGetBusinessObjectAttachmentsByIdAndRecIdV1 (string busobid, string busobrecid, string type, string attachmenttype, bool? includelinks = null)
        {
             ApiResponse<AttachmentsResponse> localVarResponse = BusinessObjectGetBusinessObjectAttachmentsByIdAndRecIdV1WithHttpInfo(busobid, busobrecid, type, attachmenttype, includelinks);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get attachments by Business Object record ID Operation to get attachments for a Business Object by Business Object ID and record ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <param name="type">Record attachment type: &lt;/br&gt;None - Not applicable to the REST API. &lt;/br&gt;File - Linked files. &lt;/br&gt;FileManagerFile - Imported files.&lt;/br&gt;BusOb - Attached Business Objects. &lt;/br&gt;History - Information about the attachment, if any is available. For example, an e-mail message may store the name of an attachment sent.&lt;/br&gt;Other - Not applicable to the REST API. &lt;/br&gt;</param>
        /// <param name="attachmenttype">For file types, select the type of attachment: &lt;/br&gt;Imported - Attachment was imported into database. &lt;/br&gt;Linked - Attachment is linked to an external file. &lt;/br&gt;URL - Attachment is a URL.</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>ApiResponse of AttachmentsResponse</returns>
        public ApiResponse< AttachmentsResponse > BusinessObjectGetBusinessObjectAttachmentsByIdAndRecIdV1WithHttpInfo (string busobid, string busobrecid, string type, string attachmenttype, bool? includelinks = null)
        {
            // verify the required parameter 'busobid' is set
            if (busobid == null)
                throw new ApiException(400, "Missing required parameter 'busobid' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectAttachmentsByIdAndRecIdV1");
            // verify the required parameter 'busobrecid' is set
            if (busobrecid == null)
                throw new ApiException(400, "Missing required parameter 'busobrecid' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectAttachmentsByIdAndRecIdV1");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectAttachmentsByIdAndRecIdV1");
            // verify the required parameter 'attachmenttype' is set
            if (attachmenttype == null)
                throw new ApiException(400, "Missing required parameter 'attachmenttype' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectAttachmentsByIdAndRecIdV1");

            var localVarPath = "/api/V1/getbusinessobjectattachments/busobid/{busobid}/busobrecid/{busobrecid}/type/{type}/attachmenttype/{attachmenttype}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (busobid != null) localVarPathParams.Add("busobid", Configuration.ApiClient.ParameterToString(busobid)); // path parameter
            if (busobrecid != null) localVarPathParams.Add("busobrecid", Configuration.ApiClient.ParameterToString(busobrecid)); // path parameter
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (attachmenttype != null) localVarPathParams.Add("attachmenttype", Configuration.ApiClient.ParameterToString(attachmenttype)); // path parameter
            if (includelinks != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includelinks", includelinks)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectGetBusinessObjectAttachmentsByIdAndRecIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachmentsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentsResponse)));
        }

        /// <summary>
        /// Get attachments by Business Object record ID Operation to get attachments for a Business Object by Business Object ID and record ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <param name="type">Record attachment type: &lt;/br&gt;None - Not applicable to the REST API. &lt;/br&gt;File - Linked files. &lt;/br&gt;FileManagerFile - Imported files.&lt;/br&gt;BusOb - Attached Business Objects. &lt;/br&gt;History - Information about the attachment, if any is available. For example, an e-mail message may store the name of an attachment sent.&lt;/br&gt;Other - Not applicable to the REST API. &lt;/br&gt;</param>
        /// <param name="attachmenttype">For file types, select the type of attachment: &lt;/br&gt;Imported - Attachment was imported into database. &lt;/br&gt;Linked - Attachment is linked to an external file. &lt;/br&gt;URL - Attachment is a URL.</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>Task of AttachmentsResponse</returns>
        public async System.Threading.Tasks.Task<AttachmentsResponse> BusinessObjectGetBusinessObjectAttachmentsByIdAndRecIdV1Async (string busobid, string busobrecid, string type, string attachmenttype, bool? includelinks = null)
        {
             ApiResponse<AttachmentsResponse> localVarResponse = await BusinessObjectGetBusinessObjectAttachmentsByIdAndRecIdV1AsyncWithHttpInfo(busobid, busobrecid, type, attachmenttype, includelinks);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get attachments by Business Object record ID Operation to get attachments for a Business Object by Business Object ID and record ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <param name="type">Record attachment type: &lt;/br&gt;None - Not applicable to the REST API. &lt;/br&gt;File - Linked files. &lt;/br&gt;FileManagerFile - Imported files.&lt;/br&gt;BusOb - Attached Business Objects. &lt;/br&gt;History - Information about the attachment, if any is available. For example, an e-mail message may store the name of an attachment sent.&lt;/br&gt;Other - Not applicable to the REST API. &lt;/br&gt;</param>
        /// <param name="attachmenttype">For file types, select the type of attachment: &lt;/br&gt;Imported - Attachment was imported into database. &lt;/br&gt;Linked - Attachment is linked to an external file. &lt;/br&gt;URL - Attachment is a URL.</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>Task of ApiResponse (AttachmentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AttachmentsResponse>> BusinessObjectGetBusinessObjectAttachmentsByIdAndRecIdV1AsyncWithHttpInfo (string busobid, string busobrecid, string type, string attachmenttype, bool? includelinks = null)
        {
            // verify the required parameter 'busobid' is set
            if (busobid == null)
                throw new ApiException(400, "Missing required parameter 'busobid' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectAttachmentsByIdAndRecIdV1");
            // verify the required parameter 'busobrecid' is set
            if (busobrecid == null)
                throw new ApiException(400, "Missing required parameter 'busobrecid' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectAttachmentsByIdAndRecIdV1");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectAttachmentsByIdAndRecIdV1");
            // verify the required parameter 'attachmenttype' is set
            if (attachmenttype == null)
                throw new ApiException(400, "Missing required parameter 'attachmenttype' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectAttachmentsByIdAndRecIdV1");

            var localVarPath = "/api/V1/getbusinessobjectattachments/busobid/{busobid}/busobrecid/{busobrecid}/type/{type}/attachmenttype/{attachmenttype}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (busobid != null) localVarPathParams.Add("busobid", Configuration.ApiClient.ParameterToString(busobid)); // path parameter
            if (busobrecid != null) localVarPathParams.Add("busobrecid", Configuration.ApiClient.ParameterToString(busobrecid)); // path parameter
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (attachmenttype != null) localVarPathParams.Add("attachmenttype", Configuration.ApiClient.ParameterToString(attachmenttype)); // path parameter
            if (includelinks != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includelinks", includelinks)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectGetBusinessObjectAttachmentsByIdAndRecIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachmentsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentsResponse)));
        }

        /// <summary>
        /// Get attachments by Business Object name and public ID Operation to get attachments for a Business Object by Business Object Name and public ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="publicid">Specify the Business Object public ID for the record that contains the attachments.</param>
        /// <param name="type">Record attachment type: &lt;/br&gt;None - Not applicable to the REST API. &lt;/br&gt;File - Linked files. &lt;/br&gt;FileManagerFile - Imported files.&lt;/br&gt;BusOb - Attached Business Objects. &lt;/br&gt;History - Information about the attachment, if any is available. For example, an e-mail message may store the name of an attachment sent.&lt;/br&gt;Other - Not applicable to the REST API. &lt;/br&gt;</param>
        /// <param name="attachmenttype">For file types, select the type of attachment: &lt;/br&gt;Imported - Attachment was imported into database. &lt;/br&gt;Linked - Attachment is linked to an external file. &lt;/br&gt;URL - Attachment is a URL.</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>AttachmentsResponse</returns>
        public AttachmentsResponse BusinessObjectGetBusinessObjectAttachmentsByNameAndPublicIdV1 (string busobname, string publicid, string type, string attachmenttype, bool? includelinks = null)
        {
             ApiResponse<AttachmentsResponse> localVarResponse = BusinessObjectGetBusinessObjectAttachmentsByNameAndPublicIdV1WithHttpInfo(busobname, publicid, type, attachmenttype, includelinks);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get attachments by Business Object name and public ID Operation to get attachments for a Business Object by Business Object Name and public ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="publicid">Specify the Business Object public ID for the record that contains the attachments.</param>
        /// <param name="type">Record attachment type: &lt;/br&gt;None - Not applicable to the REST API. &lt;/br&gt;File - Linked files. &lt;/br&gt;FileManagerFile - Imported files.&lt;/br&gt;BusOb - Attached Business Objects. &lt;/br&gt;History - Information about the attachment, if any is available. For example, an e-mail message may store the name of an attachment sent.&lt;/br&gt;Other - Not applicable to the REST API. &lt;/br&gt;</param>
        /// <param name="attachmenttype">For file types, select the type of attachment: &lt;/br&gt;Imported - Attachment was imported into database. &lt;/br&gt;Linked - Attachment is linked to an external file. &lt;/br&gt;URL - Attachment is a URL.</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>ApiResponse of AttachmentsResponse</returns>
        public ApiResponse< AttachmentsResponse > BusinessObjectGetBusinessObjectAttachmentsByNameAndPublicIdV1WithHttpInfo (string busobname, string publicid, string type, string attachmenttype, bool? includelinks = null)
        {
            // verify the required parameter 'busobname' is set
            if (busobname == null)
                throw new ApiException(400, "Missing required parameter 'busobname' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectAttachmentsByNameAndPublicIdV1");
            // verify the required parameter 'publicid' is set
            if (publicid == null)
                throw new ApiException(400, "Missing required parameter 'publicid' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectAttachmentsByNameAndPublicIdV1");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectAttachmentsByNameAndPublicIdV1");
            // verify the required parameter 'attachmenttype' is set
            if (attachmenttype == null)
                throw new ApiException(400, "Missing required parameter 'attachmenttype' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectAttachmentsByNameAndPublicIdV1");

            var localVarPath = "/api/V1/getbusinessobjectattachments/busobname/{busobname}/publicid/{publicid}/type/{type}/attachmenttype/{attachmenttype}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (busobname != null) localVarPathParams.Add("busobname", Configuration.ApiClient.ParameterToString(busobname)); // path parameter
            if (publicid != null) localVarPathParams.Add("publicid", Configuration.ApiClient.ParameterToString(publicid)); // path parameter
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (attachmenttype != null) localVarPathParams.Add("attachmenttype", Configuration.ApiClient.ParameterToString(attachmenttype)); // path parameter
            if (includelinks != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includelinks", includelinks)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectGetBusinessObjectAttachmentsByNameAndPublicIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachmentsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentsResponse)));
        }

        /// <summary>
        /// Get attachments by Business Object name and public ID Operation to get attachments for a Business Object by Business Object Name and public ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="publicid">Specify the Business Object public ID for the record that contains the attachments.</param>
        /// <param name="type">Record attachment type: &lt;/br&gt;None - Not applicable to the REST API. &lt;/br&gt;File - Linked files. &lt;/br&gt;FileManagerFile - Imported files.&lt;/br&gt;BusOb - Attached Business Objects. &lt;/br&gt;History - Information about the attachment, if any is available. For example, an e-mail message may store the name of an attachment sent.&lt;/br&gt;Other - Not applicable to the REST API. &lt;/br&gt;</param>
        /// <param name="attachmenttype">For file types, select the type of attachment: &lt;/br&gt;Imported - Attachment was imported into database. &lt;/br&gt;Linked - Attachment is linked to an external file. &lt;/br&gt;URL - Attachment is a URL.</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>Task of AttachmentsResponse</returns>
        public async System.Threading.Tasks.Task<AttachmentsResponse> BusinessObjectGetBusinessObjectAttachmentsByNameAndPublicIdV1Async (string busobname, string publicid, string type, string attachmenttype, bool? includelinks = null)
        {
             ApiResponse<AttachmentsResponse> localVarResponse = await BusinessObjectGetBusinessObjectAttachmentsByNameAndPublicIdV1AsyncWithHttpInfo(busobname, publicid, type, attachmenttype, includelinks);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get attachments by Business Object name and public ID Operation to get attachments for a Business Object by Business Object Name and public ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="publicid">Specify the Business Object public ID for the record that contains the attachments.</param>
        /// <param name="type">Record attachment type: &lt;/br&gt;None - Not applicable to the REST API. &lt;/br&gt;File - Linked files. &lt;/br&gt;FileManagerFile - Imported files.&lt;/br&gt;BusOb - Attached Business Objects. &lt;/br&gt;History - Information about the attachment, if any is available. For example, an e-mail message may store the name of an attachment sent.&lt;/br&gt;Other - Not applicable to the REST API. &lt;/br&gt;</param>
        /// <param name="attachmenttype">For file types, select the type of attachment: &lt;/br&gt;Imported - Attachment was imported into database. &lt;/br&gt;Linked - Attachment is linked to an external file. &lt;/br&gt;URL - Attachment is a URL.</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>Task of ApiResponse (AttachmentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AttachmentsResponse>> BusinessObjectGetBusinessObjectAttachmentsByNameAndPublicIdV1AsyncWithHttpInfo (string busobname, string publicid, string type, string attachmenttype, bool? includelinks = null)
        {
            // verify the required parameter 'busobname' is set
            if (busobname == null)
                throw new ApiException(400, "Missing required parameter 'busobname' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectAttachmentsByNameAndPublicIdV1");
            // verify the required parameter 'publicid' is set
            if (publicid == null)
                throw new ApiException(400, "Missing required parameter 'publicid' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectAttachmentsByNameAndPublicIdV1");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectAttachmentsByNameAndPublicIdV1");
            // verify the required parameter 'attachmenttype' is set
            if (attachmenttype == null)
                throw new ApiException(400, "Missing required parameter 'attachmenttype' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectAttachmentsByNameAndPublicIdV1");

            var localVarPath = "/api/V1/getbusinessobjectattachments/busobname/{busobname}/publicid/{publicid}/type/{type}/attachmenttype/{attachmenttype}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (busobname != null) localVarPathParams.Add("busobname", Configuration.ApiClient.ParameterToString(busobname)); // path parameter
            if (publicid != null) localVarPathParams.Add("publicid", Configuration.ApiClient.ParameterToString(publicid)); // path parameter
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (attachmenttype != null) localVarPathParams.Add("attachmenttype", Configuration.ApiClient.ParameterToString(attachmenttype)); // path parameter
            if (includelinks != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includelinks", includelinks)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectGetBusinessObjectAttachmentsByNameAndPublicIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachmentsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentsResponse)));
        }

        /// <summary>
        /// Get attachments by Business Object name and record ID Operation to get attachments for a Business Object by name and record ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <param name="type">Record attachment type: &lt;/br&gt;None - Not applicable to the REST API. &lt;/br&gt;File - Linked files. &lt;/br&gt;FileManagerFile - Imported files.&lt;/br&gt;BusOb - Attached Business Objects. &lt;/br&gt;History - Information about the attachment, if any is available. For example, an e-mail message may store the name of an attachment sent.&lt;/br&gt;Other - Not applicable to the REST API. &lt;/br&gt;</param>
        /// <param name="attachmenttype">For file types, select the type of attachment: &lt;/br&gt;Imported - Attachment was imported into database. &lt;/br&gt;Linked - Attachment is linked to an external file. &lt;/br&gt;URL - Attachment is a URL.</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>AttachmentsResponse</returns>
        public AttachmentsResponse BusinessObjectGetBusinessObjectAttachmentsByNameAndRecIdV1 (string busobname, string busobrecid, string type, string attachmenttype, bool? includelinks = null)
        {
             ApiResponse<AttachmentsResponse> localVarResponse = BusinessObjectGetBusinessObjectAttachmentsByNameAndRecIdV1WithHttpInfo(busobname, busobrecid, type, attachmenttype, includelinks);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get attachments by Business Object name and record ID Operation to get attachments for a Business Object by name and record ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <param name="type">Record attachment type: &lt;/br&gt;None - Not applicable to the REST API. &lt;/br&gt;File - Linked files. &lt;/br&gt;FileManagerFile - Imported files.&lt;/br&gt;BusOb - Attached Business Objects. &lt;/br&gt;History - Information about the attachment, if any is available. For example, an e-mail message may store the name of an attachment sent.&lt;/br&gt;Other - Not applicable to the REST API. &lt;/br&gt;</param>
        /// <param name="attachmenttype">For file types, select the type of attachment: &lt;/br&gt;Imported - Attachment was imported into database. &lt;/br&gt;Linked - Attachment is linked to an external file. &lt;/br&gt;URL - Attachment is a URL.</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>ApiResponse of AttachmentsResponse</returns>
        public ApiResponse< AttachmentsResponse > BusinessObjectGetBusinessObjectAttachmentsByNameAndRecIdV1WithHttpInfo (string busobname, string busobrecid, string type, string attachmenttype, bool? includelinks = null)
        {
            // verify the required parameter 'busobname' is set
            if (busobname == null)
                throw new ApiException(400, "Missing required parameter 'busobname' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectAttachmentsByNameAndRecIdV1");
            // verify the required parameter 'busobrecid' is set
            if (busobrecid == null)
                throw new ApiException(400, "Missing required parameter 'busobrecid' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectAttachmentsByNameAndRecIdV1");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectAttachmentsByNameAndRecIdV1");
            // verify the required parameter 'attachmenttype' is set
            if (attachmenttype == null)
                throw new ApiException(400, "Missing required parameter 'attachmenttype' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectAttachmentsByNameAndRecIdV1");

            var localVarPath = "/api/V1/getbusinessobjectattachments/busobname/{busobname}/busobrecid/{busobrecid}/type/{type}/attachmenttype/{attachmenttype}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (busobname != null) localVarPathParams.Add("busobname", Configuration.ApiClient.ParameterToString(busobname)); // path parameter
            if (busobrecid != null) localVarPathParams.Add("busobrecid", Configuration.ApiClient.ParameterToString(busobrecid)); // path parameter
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (attachmenttype != null) localVarPathParams.Add("attachmenttype", Configuration.ApiClient.ParameterToString(attachmenttype)); // path parameter
            if (includelinks != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includelinks", includelinks)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectGetBusinessObjectAttachmentsByNameAndRecIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachmentsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentsResponse)));
        }

        /// <summary>
        /// Get attachments by Business Object name and record ID Operation to get attachments for a Business Object by name and record ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <param name="type">Record attachment type: &lt;/br&gt;None - Not applicable to the REST API. &lt;/br&gt;File - Linked files. &lt;/br&gt;FileManagerFile - Imported files.&lt;/br&gt;BusOb - Attached Business Objects. &lt;/br&gt;History - Information about the attachment, if any is available. For example, an e-mail message may store the name of an attachment sent.&lt;/br&gt;Other - Not applicable to the REST API. &lt;/br&gt;</param>
        /// <param name="attachmenttype">For file types, select the type of attachment: &lt;/br&gt;Imported - Attachment was imported into database. &lt;/br&gt;Linked - Attachment is linked to an external file. &lt;/br&gt;URL - Attachment is a URL.</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>Task of AttachmentsResponse</returns>
        public async System.Threading.Tasks.Task<AttachmentsResponse> BusinessObjectGetBusinessObjectAttachmentsByNameAndRecIdV1Async (string busobname, string busobrecid, string type, string attachmenttype, bool? includelinks = null)
        {
             ApiResponse<AttachmentsResponse> localVarResponse = await BusinessObjectGetBusinessObjectAttachmentsByNameAndRecIdV1AsyncWithHttpInfo(busobname, busobrecid, type, attachmenttype, includelinks);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get attachments by Business Object name and record ID Operation to get attachments for a Business Object by name and record ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <param name="type">Record attachment type: &lt;/br&gt;None - Not applicable to the REST API. &lt;/br&gt;File - Linked files. &lt;/br&gt;FileManagerFile - Imported files.&lt;/br&gt;BusOb - Attached Business Objects. &lt;/br&gt;History - Information about the attachment, if any is available. For example, an e-mail message may store the name of an attachment sent.&lt;/br&gt;Other - Not applicable to the REST API. &lt;/br&gt;</param>
        /// <param name="attachmenttype">For file types, select the type of attachment: &lt;/br&gt;Imported - Attachment was imported into database. &lt;/br&gt;Linked - Attachment is linked to an external file. &lt;/br&gt;URL - Attachment is a URL.</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>Task of ApiResponse (AttachmentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AttachmentsResponse>> BusinessObjectGetBusinessObjectAttachmentsByNameAndRecIdV1AsyncWithHttpInfo (string busobname, string busobrecid, string type, string attachmenttype, bool? includelinks = null)
        {
            // verify the required parameter 'busobname' is set
            if (busobname == null)
                throw new ApiException(400, "Missing required parameter 'busobname' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectAttachmentsByNameAndRecIdV1");
            // verify the required parameter 'busobrecid' is set
            if (busobrecid == null)
                throw new ApiException(400, "Missing required parameter 'busobrecid' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectAttachmentsByNameAndRecIdV1");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectAttachmentsByNameAndRecIdV1");
            // verify the required parameter 'attachmenttype' is set
            if (attachmenttype == null)
                throw new ApiException(400, "Missing required parameter 'attachmenttype' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectAttachmentsByNameAndRecIdV1");

            var localVarPath = "/api/V1/getbusinessobjectattachments/busobname/{busobname}/busobrecid/{busobrecid}/type/{type}/attachmenttype/{attachmenttype}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (busobname != null) localVarPathParams.Add("busobname", Configuration.ApiClient.ParameterToString(busobname)); // path parameter
            if (busobrecid != null) localVarPathParams.Add("busobrecid", Configuration.ApiClient.ParameterToString(busobrecid)); // path parameter
            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (attachmenttype != null) localVarPathParams.Add("attachmenttype", Configuration.ApiClient.ParameterToString(attachmenttype)); // path parameter
            if (includelinks != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includelinks", includelinks)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectGetBusinessObjectAttachmentsByNameAndRecIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachmentsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentsResponse)));
        }

        /// <summary>
        /// Get Business Object attachments by request object Operation to get attachments for a Business Object by attachments request object.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentsRequest">Object with all the parameters to request an attachments list. You can also request a list of types to get more than just one type at a time.</param>
        /// <returns>AttachmentsResponse</returns>
        public AttachmentsResponse BusinessObjectGetBusinessObjectAttachmentsV1 (AttachmentsRequest attachmentsRequest)
        {
             ApiResponse<AttachmentsResponse> localVarResponse = BusinessObjectGetBusinessObjectAttachmentsV1WithHttpInfo(attachmentsRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Business Object attachments by request object Operation to get attachments for a Business Object by attachments request object.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentsRequest">Object with all the parameters to request an attachments list. You can also request a list of types to get more than just one type at a time.</param>
        /// <returns>ApiResponse of AttachmentsResponse</returns>
        public ApiResponse< AttachmentsResponse > BusinessObjectGetBusinessObjectAttachmentsV1WithHttpInfo (AttachmentsRequest attachmentsRequest)
        {
            // verify the required parameter 'attachmentsRequest' is set
            if (attachmentsRequest == null)
                throw new ApiException(400, "Missing required parameter 'attachmentsRequest' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectAttachmentsV1");

            var localVarPath = "/api/V1/getbusinessobjectattachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentsRequest != null && attachmentsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(attachmentsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = attachmentsRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectGetBusinessObjectAttachmentsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachmentsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentsResponse)));
        }

        /// <summary>
        /// Get Business Object attachments by request object Operation to get attachments for a Business Object by attachments request object.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentsRequest">Object with all the parameters to request an attachments list. You can also request a list of types to get more than just one type at a time.</param>
        /// <returns>Task of AttachmentsResponse</returns>
        public async System.Threading.Tasks.Task<AttachmentsResponse> BusinessObjectGetBusinessObjectAttachmentsV1Async (AttachmentsRequest attachmentsRequest)
        {
             ApiResponse<AttachmentsResponse> localVarResponse = await BusinessObjectGetBusinessObjectAttachmentsV1AsyncWithHttpInfo(attachmentsRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Business Object attachments by request object Operation to get attachments for a Business Object by attachments request object.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentsRequest">Object with all the parameters to request an attachments list. You can also request a list of types to get more than just one type at a time.</param>
        /// <returns>Task of ApiResponse (AttachmentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AttachmentsResponse>> BusinessObjectGetBusinessObjectAttachmentsV1AsyncWithHttpInfo (AttachmentsRequest attachmentsRequest)
        {
            // verify the required parameter 'attachmentsRequest' is set
            if (attachmentsRequest == null)
                throw new ApiException(400, "Missing required parameter 'attachmentsRequest' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectAttachmentsV1");

            var localVarPath = "/api/V1/getbusinessobjectattachments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentsRequest != null && attachmentsRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(attachmentsRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = attachmentsRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectGetBusinessObjectAttachmentsV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachmentsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentsResponse)));
        }

        /// <summary>
        /// Get a batch of Business Object records Operation that returns a batch of Business Object records that includes a list of field record IDs, display names, and values for each record.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Specify an array of Business Object IDs, record IDs, or public IDs. Use a flag to stop on error or continue on error.</param>
        /// <returns>BatchReadResponse</returns>
        public BatchReadResponse BusinessObjectGetBusinessObjectBatchV1 (BatchReadRequest request)
        {
             ApiResponse<BatchReadResponse> localVarResponse = BusinessObjectGetBusinessObjectBatchV1WithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a batch of Business Object records Operation that returns a batch of Business Object records that includes a list of field record IDs, display names, and values for each record.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Specify an array of Business Object IDs, record IDs, or public IDs. Use a flag to stop on error or continue on error.</param>
        /// <returns>ApiResponse of BatchReadResponse</returns>
        public ApiResponse< BatchReadResponse > BusinessObjectGetBusinessObjectBatchV1WithHttpInfo (BatchReadRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectBatchV1");

            var localVarPath = "/api/V1/getbusinessobjectbatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectGetBusinessObjectBatchV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchReadResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchReadResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchReadResponse)));
        }

        /// <summary>
        /// Get a batch of Business Object records Operation that returns a batch of Business Object records that includes a list of field record IDs, display names, and values for each record.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Specify an array of Business Object IDs, record IDs, or public IDs. Use a flag to stop on error or continue on error.</param>
        /// <returns>Task of BatchReadResponse</returns>
        public async System.Threading.Tasks.Task<BatchReadResponse> BusinessObjectGetBusinessObjectBatchV1Async (BatchReadRequest request)
        {
             ApiResponse<BatchReadResponse> localVarResponse = await BusinessObjectGetBusinessObjectBatchV1AsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a batch of Business Object records Operation that returns a batch of Business Object records that includes a list of field record IDs, display names, and values for each record.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Specify an array of Business Object IDs, record IDs, or public IDs. Use a flag to stop on error or continue on error.</param>
        /// <returns>Task of ApiResponse (BatchReadResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BatchReadResponse>> BusinessObjectGetBusinessObjectBatchV1AsyncWithHttpInfo (BatchReadRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectBatchV1");

            var localVarPath = "/api/V1/getbusinessobjectbatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectGetBusinessObjectBatchV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchReadResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchReadResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchReadResponse)));
        }

        /// <summary>
        /// Get a Business Object record Operation that returns a Business Object record that includes a list of fields and their record IDs, names, and set values.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="publicid">Specify the Business Object public ID.</param>
        /// <returns>ReadResponse</returns>
        public ReadResponse BusinessObjectGetBusinessObjectByPublicIdV1 (string busobid, string publicid)
        {
             ApiResponse<ReadResponse> localVarResponse = BusinessObjectGetBusinessObjectByPublicIdV1WithHttpInfo(busobid, publicid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Business Object record Operation that returns a Business Object record that includes a list of fields and their record IDs, names, and set values.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="publicid">Specify the Business Object public ID.</param>
        /// <returns>ApiResponse of ReadResponse</returns>
        public ApiResponse< ReadResponse > BusinessObjectGetBusinessObjectByPublicIdV1WithHttpInfo (string busobid, string publicid)
        {
            // verify the required parameter 'busobid' is set
            if (busobid == null)
                throw new ApiException(400, "Missing required parameter 'busobid' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectByPublicIdV1");
            // verify the required parameter 'publicid' is set
            if (publicid == null)
                throw new ApiException(400, "Missing required parameter 'publicid' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectByPublicIdV1");

            var localVarPath = "/api/V1/getbusinessobject/busobid/{busobid}/publicid/{publicid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (busobid != null) localVarPathParams.Add("busobid", Configuration.ApiClient.ParameterToString(busobid)); // path parameter
            if (publicid != null) localVarPathParams.Add("publicid", Configuration.ApiClient.ParameterToString(publicid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectGetBusinessObjectByPublicIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReadResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReadResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReadResponse)));
        }

        /// <summary>
        /// Get a Business Object record Operation that returns a Business Object record that includes a list of fields and their record IDs, names, and set values.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="publicid">Specify the Business Object public ID.</param>
        /// <returns>Task of ReadResponse</returns>
        public async System.Threading.Tasks.Task<ReadResponse> BusinessObjectGetBusinessObjectByPublicIdV1Async (string busobid, string publicid)
        {
             ApiResponse<ReadResponse> localVarResponse = await BusinessObjectGetBusinessObjectByPublicIdV1AsyncWithHttpInfo(busobid, publicid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a Business Object record Operation that returns a Business Object record that includes a list of fields and their record IDs, names, and set values.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="publicid">Specify the Business Object public ID.</param>
        /// <returns>Task of ApiResponse (ReadResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReadResponse>> BusinessObjectGetBusinessObjectByPublicIdV1AsyncWithHttpInfo (string busobid, string publicid)
        {
            // verify the required parameter 'busobid' is set
            if (busobid == null)
                throw new ApiException(400, "Missing required parameter 'busobid' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectByPublicIdV1");
            // verify the required parameter 'publicid' is set
            if (publicid == null)
                throw new ApiException(400, "Missing required parameter 'publicid' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectByPublicIdV1");

            var localVarPath = "/api/V1/getbusinessobject/busobid/{busobid}/publicid/{publicid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (busobid != null) localVarPathParams.Add("busobid", Configuration.ApiClient.ParameterToString(busobid)); // path parameter
            if (publicid != null) localVarPathParams.Add("publicid", Configuration.ApiClient.ParameterToString(publicid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectGetBusinessObjectByPublicIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReadResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReadResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReadResponse)));
        }

        /// <summary>
        /// Get a Business Object record Operation that returns a Business Object record that includes a list of fields and their record IDs, names, and set values.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <returns>ReadResponse</returns>
        public ReadResponse BusinessObjectGetBusinessObjectByRecIdV1 (string busobid, string busobrecid)
        {
             ApiResponse<ReadResponse> localVarResponse = BusinessObjectGetBusinessObjectByRecIdV1WithHttpInfo(busobid, busobrecid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Business Object record Operation that returns a Business Object record that includes a list of fields and their record IDs, names, and set values.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <returns>ApiResponse of ReadResponse</returns>
        public ApiResponse< ReadResponse > BusinessObjectGetBusinessObjectByRecIdV1WithHttpInfo (string busobid, string busobrecid)
        {
            // verify the required parameter 'busobid' is set
            if (busobid == null)
                throw new ApiException(400, "Missing required parameter 'busobid' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectByRecIdV1");
            // verify the required parameter 'busobrecid' is set
            if (busobrecid == null)
                throw new ApiException(400, "Missing required parameter 'busobrecid' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectByRecIdV1");

            var localVarPath = "/api/V1/getbusinessobject/busobid/{busobid}/busobrecid/{busobrecid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (busobid != null) localVarPathParams.Add("busobid", Configuration.ApiClient.ParameterToString(busobid)); // path parameter
            if (busobrecid != null) localVarPathParams.Add("busobrecid", Configuration.ApiClient.ParameterToString(busobrecid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectGetBusinessObjectByRecIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReadResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReadResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReadResponse)));
        }

        /// <summary>
        /// Get a Business Object record Operation that returns a Business Object record that includes a list of fields and their record IDs, names, and set values.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <returns>Task of ReadResponse</returns>
        public async System.Threading.Tasks.Task<ReadResponse> BusinessObjectGetBusinessObjectByRecIdV1Async (string busobid, string busobrecid)
        {
             ApiResponse<ReadResponse> localVarResponse = await BusinessObjectGetBusinessObjectByRecIdV1AsyncWithHttpInfo(busobid, busobrecid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a Business Object record Operation that returns a Business Object record that includes a list of fields and their record IDs, names, and set values.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <returns>Task of ApiResponse (ReadResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReadResponse>> BusinessObjectGetBusinessObjectByRecIdV1AsyncWithHttpInfo (string busobid, string busobrecid)
        {
            // verify the required parameter 'busobid' is set
            if (busobid == null)
                throw new ApiException(400, "Missing required parameter 'busobid' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectByRecIdV1");
            // verify the required parameter 'busobrecid' is set
            if (busobrecid == null)
                throw new ApiException(400, "Missing required parameter 'busobrecid' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectByRecIdV1");

            var localVarPath = "/api/V1/getbusinessobject/busobid/{busobid}/busobrecid/{busobrecid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (busobid != null) localVarPathParams.Add("busobid", Configuration.ApiClient.ParameterToString(busobid)); // path parameter
            if (busobrecid != null) localVarPathParams.Add("busobrecid", Configuration.ApiClient.ParameterToString(busobrecid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectGetBusinessObjectByRecIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReadResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReadResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReadResponse)));
        }

        /// <summary>
        /// Get a Business Object by its scan code and Business Object ID. Operation to get a Business Object based on its associated scan code and Business Object ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanCode">The scan code for a Business Object record.</param>
        /// <param name="busobid">The Business Object ID.</param>
        /// <returns>BarcodeLookupResponse</returns>
        public BarcodeLookupResponse BusinessObjectGetBusinessObjectByScanCodeBusObIdV1 (string scanCode, string busobid)
        {
             ApiResponse<BarcodeLookupResponse> localVarResponse = BusinessObjectGetBusinessObjectByScanCodeBusObIdV1WithHttpInfo(scanCode, busobid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Business Object by its scan code and Business Object ID. Operation to get a Business Object based on its associated scan code and Business Object ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanCode">The scan code for a Business Object record.</param>
        /// <param name="busobid">The Business Object ID.</param>
        /// <returns>ApiResponse of BarcodeLookupResponse</returns>
        public ApiResponse< BarcodeLookupResponse > BusinessObjectGetBusinessObjectByScanCodeBusObIdV1WithHttpInfo (string scanCode, string busobid)
        {
            // verify the required parameter 'scanCode' is set
            if (scanCode == null)
                throw new ApiException(400, "Missing required parameter 'scanCode' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectByScanCodeBusObIdV1");
            // verify the required parameter 'busobid' is set
            if (busobid == null)
                throw new ApiException(400, "Missing required parameter 'busobid' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectByScanCodeBusObIdV1");

            var localVarPath = "/api/V1/getbusinessobject/scancode/{scanCode}/busobid/{busobid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scanCode != null) localVarPathParams.Add("scanCode", Configuration.ApiClient.ParameterToString(scanCode)); // path parameter
            if (busobid != null) localVarPathParams.Add("busobid", Configuration.ApiClient.ParameterToString(busobid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectGetBusinessObjectByScanCodeBusObIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodeLookupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BarcodeLookupResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodeLookupResponse)));
        }

        /// <summary>
        /// Get a Business Object by its scan code and Business Object ID. Operation to get a Business Object based on its associated scan code and Business Object ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanCode">The scan code for a Business Object record.</param>
        /// <param name="busobid">The Business Object ID.</param>
        /// <returns>Task of BarcodeLookupResponse</returns>
        public async System.Threading.Tasks.Task<BarcodeLookupResponse> BusinessObjectGetBusinessObjectByScanCodeBusObIdV1Async (string scanCode, string busobid)
        {
             ApiResponse<BarcodeLookupResponse> localVarResponse = await BusinessObjectGetBusinessObjectByScanCodeBusObIdV1AsyncWithHttpInfo(scanCode, busobid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a Business Object by its scan code and Business Object ID. Operation to get a Business Object based on its associated scan code and Business Object ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanCode">The scan code for a Business Object record.</param>
        /// <param name="busobid">The Business Object ID.</param>
        /// <returns>Task of ApiResponse (BarcodeLookupResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BarcodeLookupResponse>> BusinessObjectGetBusinessObjectByScanCodeBusObIdV1AsyncWithHttpInfo (string scanCode, string busobid)
        {
            // verify the required parameter 'scanCode' is set
            if (scanCode == null)
                throw new ApiException(400, "Missing required parameter 'scanCode' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectByScanCodeBusObIdV1");
            // verify the required parameter 'busobid' is set
            if (busobid == null)
                throw new ApiException(400, "Missing required parameter 'busobid' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectByScanCodeBusObIdV1");

            var localVarPath = "/api/V1/getbusinessobject/scancode/{scanCode}/busobid/{busobid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scanCode != null) localVarPathParams.Add("scanCode", Configuration.ApiClient.ParameterToString(scanCode)); // path parameter
            if (busobid != null) localVarPathParams.Add("busobid", Configuration.ApiClient.ParameterToString(busobid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectGetBusinessObjectByScanCodeBusObIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodeLookupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BarcodeLookupResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodeLookupResponse)));
        }

        /// <summary>
        /// Get a Business Object by its scan code and Business Object name. Operation to get a Business Object based on its associated scan code and Business Object name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanCode">The scan code for a Business Object record.</param>
        /// <param name="busobname">The Business Bbject name.</param>
        /// <returns>BarcodeLookupResponse</returns>
        public BarcodeLookupResponse BusinessObjectGetBusinessObjectByScanCodeBusObNameV1 (string scanCode, string busobname)
        {
             ApiResponse<BarcodeLookupResponse> localVarResponse = BusinessObjectGetBusinessObjectByScanCodeBusObNameV1WithHttpInfo(scanCode, busobname);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Business Object by its scan code and Business Object name. Operation to get a Business Object based on its associated scan code and Business Object name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanCode">The scan code for a Business Object record.</param>
        /// <param name="busobname">The Business Bbject name.</param>
        /// <returns>ApiResponse of BarcodeLookupResponse</returns>
        public ApiResponse< BarcodeLookupResponse > BusinessObjectGetBusinessObjectByScanCodeBusObNameV1WithHttpInfo (string scanCode, string busobname)
        {
            // verify the required parameter 'scanCode' is set
            if (scanCode == null)
                throw new ApiException(400, "Missing required parameter 'scanCode' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectByScanCodeBusObNameV1");
            // verify the required parameter 'busobname' is set
            if (busobname == null)
                throw new ApiException(400, "Missing required parameter 'busobname' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectByScanCodeBusObNameV1");

            var localVarPath = "/api/V1/getbusinessobject/scancode/{scanCode}/busobname/{busobname}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scanCode != null) localVarPathParams.Add("scanCode", Configuration.ApiClient.ParameterToString(scanCode)); // path parameter
            if (busobname != null) localVarPathParams.Add("busobname", Configuration.ApiClient.ParameterToString(busobname)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectGetBusinessObjectByScanCodeBusObNameV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodeLookupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BarcodeLookupResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodeLookupResponse)));
        }

        /// <summary>
        /// Get a Business Object by its scan code and Business Object name. Operation to get a Business Object based on its associated scan code and Business Object name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanCode">The scan code for a Business Object record.</param>
        /// <param name="busobname">The Business Bbject name.</param>
        /// <returns>Task of BarcodeLookupResponse</returns>
        public async System.Threading.Tasks.Task<BarcodeLookupResponse> BusinessObjectGetBusinessObjectByScanCodeBusObNameV1Async (string scanCode, string busobname)
        {
             ApiResponse<BarcodeLookupResponse> localVarResponse = await BusinessObjectGetBusinessObjectByScanCodeBusObNameV1AsyncWithHttpInfo(scanCode, busobname);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a Business Object by its scan code and Business Object name. Operation to get a Business Object based on its associated scan code and Business Object name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scanCode">The scan code for a Business Object record.</param>
        /// <param name="busobname">The Business Bbject name.</param>
        /// <returns>Task of ApiResponse (BarcodeLookupResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BarcodeLookupResponse>> BusinessObjectGetBusinessObjectByScanCodeBusObNameV1AsyncWithHttpInfo (string scanCode, string busobname)
        {
            // verify the required parameter 'scanCode' is set
            if (scanCode == null)
                throw new ApiException(400, "Missing required parameter 'scanCode' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectByScanCodeBusObNameV1");
            // verify the required parameter 'busobname' is set
            if (busobname == null)
                throw new ApiException(400, "Missing required parameter 'busobname' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectByScanCodeBusObNameV1");

            var localVarPath = "/api/V1/getbusinessobject/scancode/{scanCode}/busobname/{busobname}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (scanCode != null) localVarPathParams.Add("scanCode", Configuration.ApiClient.ParameterToString(scanCode)); // path parameter
            if (busobname != null) localVarPathParams.Add("busobname", Configuration.ApiClient.ParameterToString(busobname)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectGetBusinessObjectByScanCodeBusObNameV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BarcodeLookupResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BarcodeLookupResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BarcodeLookupResponse)));
        }

        /// <summary>
        /// Get a Business Object schema Operation that returns the schema for a Business Object and, optionally, its related Business Objects.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobId">Specify the Business Object ID.</param>
        /// <param name="includerelationships">Flag to include schemas for related Business Object. Default is false. (optional)</param>
        /// <returns>SchemaResponse</returns>
        public SchemaResponse BusinessObjectGetBusinessObjectSchemaV1 (string busobId, bool? includerelationships = null)
        {
             ApiResponse<SchemaResponse> localVarResponse = BusinessObjectGetBusinessObjectSchemaV1WithHttpInfo(busobId, includerelationships);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Business Object schema Operation that returns the schema for a Business Object and, optionally, its related Business Objects.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobId">Specify the Business Object ID.</param>
        /// <param name="includerelationships">Flag to include schemas for related Business Object. Default is false. (optional)</param>
        /// <returns>ApiResponse of SchemaResponse</returns>
        public ApiResponse< SchemaResponse > BusinessObjectGetBusinessObjectSchemaV1WithHttpInfo (string busobId, bool? includerelationships = null)
        {
            // verify the required parameter 'busobId' is set
            if (busobId == null)
                throw new ApiException(400, "Missing required parameter 'busobId' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectSchemaV1");

            var localVarPath = "/api/V1/getbusinessobjectschema/busobid/{busobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (busobId != null) localVarPathParams.Add("busobId", Configuration.ApiClient.ParameterToString(busobId)); // path parameter
            if (includerelationships != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includerelationships", includerelationships)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectGetBusinessObjectSchemaV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchemaResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SchemaResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchemaResponse)));
        }

        /// <summary>
        /// Get a Business Object schema Operation that returns the schema for a Business Object and, optionally, its related Business Objects.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobId">Specify the Business Object ID.</param>
        /// <param name="includerelationships">Flag to include schemas for related Business Object. Default is false. (optional)</param>
        /// <returns>Task of SchemaResponse</returns>
        public async System.Threading.Tasks.Task<SchemaResponse> BusinessObjectGetBusinessObjectSchemaV1Async (string busobId, bool? includerelationships = null)
        {
             ApiResponse<SchemaResponse> localVarResponse = await BusinessObjectGetBusinessObjectSchemaV1AsyncWithHttpInfo(busobId, includerelationships);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a Business Object schema Operation that returns the schema for a Business Object and, optionally, its related Business Objects.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobId">Specify the Business Object ID.</param>
        /// <param name="includerelationships">Flag to include schemas for related Business Object. Default is false. (optional)</param>
        /// <returns>Task of ApiResponse (SchemaResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SchemaResponse>> BusinessObjectGetBusinessObjectSchemaV1AsyncWithHttpInfo (string busobId, bool? includerelationships = null)
        {
            // verify the required parameter 'busobId' is set
            if (busobId == null)
                throw new ApiException(400, "Missing required parameter 'busobId' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectSchemaV1");

            var localVarPath = "/api/V1/getbusinessobjectschema/busobid/{busobId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (busobId != null) localVarPathParams.Add("busobId", Configuration.ApiClient.ParameterToString(busobId)); // path parameter
            if (includerelationships != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includerelationships", includerelationships)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectGetBusinessObjectSchemaV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchemaResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SchemaResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchemaResponse)));
        }

        /// <summary>
        /// Get Business Object summaries by type Operation that returns a list of Business Object summaries by type (Major, Supporting, Lookup, Groups, and All). 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Use to show:&lt;br /&gt;All - All objects&lt;br /&gt;Major - Major objects only&lt;br /&gt;Supporting - Supporting objects only&lt;br /&gt;Lookup - Lookup objects only&lt;br /&gt;Groups - Groups only</param>
        /// <returns>List&lt;Summary&gt;</returns>
        public List<Summary> BusinessObjectGetBusinessObjectSummariesV1 (string type)
        {
             ApiResponse<List<Summary>> localVarResponse = BusinessObjectGetBusinessObjectSummariesV1WithHttpInfo(type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Business Object summaries by type Operation that returns a list of Business Object summaries by type (Major, Supporting, Lookup, Groups, and All). 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Use to show:&lt;br /&gt;All - All objects&lt;br /&gt;Major - Major objects only&lt;br /&gt;Supporting - Supporting objects only&lt;br /&gt;Lookup - Lookup objects only&lt;br /&gt;Groups - Groups only</param>
        /// <returns>ApiResponse of List&lt;Summary&gt;</returns>
        public ApiResponse< List<Summary> > BusinessObjectGetBusinessObjectSummariesV1WithHttpInfo (string type)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectSummariesV1");

            var localVarPath = "/api/V1/getbusinessobjectsummaries/type/{type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectGetBusinessObjectSummariesV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Summary>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Summary>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Summary>)));
        }

        /// <summary>
        /// Get Business Object summaries by type Operation that returns a list of Business Object summaries by type (Major, Supporting, Lookup, Groups, and All). 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Use to show:&lt;br /&gt;All - All objects&lt;br /&gt;Major - Major objects only&lt;br /&gt;Supporting - Supporting objects only&lt;br /&gt;Lookup - Lookup objects only&lt;br /&gt;Groups - Groups only</param>
        /// <returns>Task of List&lt;Summary&gt;</returns>
        public async System.Threading.Tasks.Task<List<Summary>> BusinessObjectGetBusinessObjectSummariesV1Async (string type)
        {
             ApiResponse<List<Summary>> localVarResponse = await BusinessObjectGetBusinessObjectSummariesV1AsyncWithHttpInfo(type);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Business Object summaries by type Operation that returns a list of Business Object summaries by type (Major, Supporting, Lookup, Groups, and All). 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Use to show:&lt;br /&gt;All - All objects&lt;br /&gt;Major - Major objects only&lt;br /&gt;Supporting - Supporting objects only&lt;br /&gt;Lookup - Lookup objects only&lt;br /&gt;Groups - Groups only</param>
        /// <returns>Task of ApiResponse (List&lt;Summary&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Summary>>> BusinessObjectGetBusinessObjectSummariesV1AsyncWithHttpInfo (string type)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectSummariesV1");

            var localVarPath = "/api/V1/getbusinessobjectsummaries/type/{type}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarPathParams.Add("type", Configuration.ApiClient.ParameterToString(type)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectGetBusinessObjectSummariesV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Summary>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Summary>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Summary>)));
        }

        /// <summary>
        /// Get a Business Object summary by ID Operation that returns a single Business Object summary by ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify a Business Object ID to get its summary.</param>
        /// <returns>List&lt;Summary&gt;</returns>
        public List<Summary> BusinessObjectGetBusinessObjectSummaryByIdV1 (string busobid)
        {
             ApiResponse<List<Summary>> localVarResponse = BusinessObjectGetBusinessObjectSummaryByIdV1WithHttpInfo(busobid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Business Object summary by ID Operation that returns a single Business Object summary by ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify a Business Object ID to get its summary.</param>
        /// <returns>ApiResponse of List&lt;Summary&gt;</returns>
        public ApiResponse< List<Summary> > BusinessObjectGetBusinessObjectSummaryByIdV1WithHttpInfo (string busobid)
        {
            // verify the required parameter 'busobid' is set
            if (busobid == null)
                throw new ApiException(400, "Missing required parameter 'busobid' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectSummaryByIdV1");

            var localVarPath = "/api/V1/getbusinessobjectsummary/busobid/{busobid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (busobid != null) localVarPathParams.Add("busobid", Configuration.ApiClient.ParameterToString(busobid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectGetBusinessObjectSummaryByIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Summary>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Summary>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Summary>)));
        }

        /// <summary>
        /// Get a Business Object summary by ID Operation that returns a single Business Object summary by ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify a Business Object ID to get its summary.</param>
        /// <returns>Task of List&lt;Summary&gt;</returns>
        public async System.Threading.Tasks.Task<List<Summary>> BusinessObjectGetBusinessObjectSummaryByIdV1Async (string busobid)
        {
             ApiResponse<List<Summary>> localVarResponse = await BusinessObjectGetBusinessObjectSummaryByIdV1AsyncWithHttpInfo(busobid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a Business Object summary by ID Operation that returns a single Business Object summary by ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobid">Specify a Business Object ID to get its summary.</param>
        /// <returns>Task of ApiResponse (List&lt;Summary&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Summary>>> BusinessObjectGetBusinessObjectSummaryByIdV1AsyncWithHttpInfo (string busobid)
        {
            // verify the required parameter 'busobid' is set
            if (busobid == null)
                throw new ApiException(400, "Missing required parameter 'busobid' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectSummaryByIdV1");

            var localVarPath = "/api/V1/getbusinessobjectsummary/busobid/{busobid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (busobid != null) localVarPathParams.Add("busobid", Configuration.ApiClient.ParameterToString(busobid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectGetBusinessObjectSummaryByIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Summary>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Summary>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Summary>)));
        }

        /// <summary>
        /// Get a Business Object summary by name Operation that returns a single Business Object summary by name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobname">Specify a Business Object name to get its summary.</param>
        /// <returns>List&lt;Summary&gt;</returns>
        public List<Summary> BusinessObjectGetBusinessObjectSummaryByNameV1 (string busobname)
        {
             ApiResponse<List<Summary>> localVarResponse = BusinessObjectGetBusinessObjectSummaryByNameV1WithHttpInfo(busobname);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Business Object summary by name Operation that returns a single Business Object summary by name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobname">Specify a Business Object name to get its summary.</param>
        /// <returns>ApiResponse of List&lt;Summary&gt;</returns>
        public ApiResponse< List<Summary> > BusinessObjectGetBusinessObjectSummaryByNameV1WithHttpInfo (string busobname)
        {
            // verify the required parameter 'busobname' is set
            if (busobname == null)
                throw new ApiException(400, "Missing required parameter 'busobname' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectSummaryByNameV1");

            var localVarPath = "/api/V1/getbusinessobjectsummary/busobname/{busobname}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (busobname != null) localVarPathParams.Add("busobname", Configuration.ApiClient.ParameterToString(busobname)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectGetBusinessObjectSummaryByNameV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Summary>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Summary>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Summary>)));
        }

        /// <summary>
        /// Get a Business Object summary by name Operation that returns a single Business Object summary by name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobname">Specify a Business Object name to get its summary.</param>
        /// <returns>Task of List&lt;Summary&gt;</returns>
        public async System.Threading.Tasks.Task<List<Summary>> BusinessObjectGetBusinessObjectSummaryByNameV1Async (string busobname)
        {
             ApiResponse<List<Summary>> localVarResponse = await BusinessObjectGetBusinessObjectSummaryByNameV1AsyncWithHttpInfo(busobname);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a Business Object summary by name Operation that returns a single Business Object summary by name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="busobname">Specify a Business Object name to get its summary.</param>
        /// <returns>Task of ApiResponse (List&lt;Summary&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Summary>>> BusinessObjectGetBusinessObjectSummaryByNameV1AsyncWithHttpInfo (string busobname)
        {
            // verify the required parameter 'busobname' is set
            if (busobname == null)
                throw new ApiException(400, "Missing required parameter 'busobname' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectSummaryByNameV1");

            var localVarPath = "/api/V1/getbusinessobjectsummary/busobname/{busobname}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (busobname != null) localVarPathParams.Add("busobname", Configuration.ApiClient.ParameterToString(busobname)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectGetBusinessObjectSummaryByNameV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Summary>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Summary>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Summary>)));
        }

        /// <summary>
        /// Get Business Object templates for create Operation that returns a template to create Business Objects.  The template includes placeholders for field values. You can then send the template with these values to the Business Object Save operation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Specify the Business Object ID. Use true to include all required fields or all fields. Specify an optional fields list by adding field names in a comma-delimited list [\&quot;field1\&quot;, \&quot;field2\&quot;]. </param>
        /// <returns>TemplateResponse</returns>
        public TemplateResponse BusinessObjectGetBusinessObjectTemplateV1 (TemplateRequest request)
        {
             ApiResponse<TemplateResponse> localVarResponse = BusinessObjectGetBusinessObjectTemplateV1WithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Business Object templates for create Operation that returns a template to create Business Objects.  The template includes placeholders for field values. You can then send the template with these values to the Business Object Save operation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Specify the Business Object ID. Use true to include all required fields or all fields. Specify an optional fields list by adding field names in a comma-delimited list [\&quot;field1\&quot;, \&quot;field2\&quot;]. </param>
        /// <returns>ApiResponse of TemplateResponse</returns>
        public ApiResponse< TemplateResponse > BusinessObjectGetBusinessObjectTemplateV1WithHttpInfo (TemplateRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectTemplateV1");

            var localVarPath = "/api/V1/getbusinessobjecttemplate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectGetBusinessObjectTemplateV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateResponse)));
        }

        /// <summary>
        /// Get Business Object templates for create Operation that returns a template to create Business Objects.  The template includes placeholders for field values. You can then send the template with these values to the Business Object Save operation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Specify the Business Object ID. Use true to include all required fields or all fields. Specify an optional fields list by adding field names in a comma-delimited list [\&quot;field1\&quot;, \&quot;field2\&quot;]. </param>
        /// <returns>Task of TemplateResponse</returns>
        public async System.Threading.Tasks.Task<TemplateResponse> BusinessObjectGetBusinessObjectTemplateV1Async (TemplateRequest request)
        {
             ApiResponse<TemplateResponse> localVarResponse = await BusinessObjectGetBusinessObjectTemplateV1AsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Business Object templates for create Operation that returns a template to create Business Objects.  The template includes placeholders for field values. You can then send the template with these values to the Business Object Save operation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Specify the Business Object ID. Use true to include all required fields or all fields. Specify an optional fields list by adding field names in a comma-delimited list [\&quot;field1\&quot;, \&quot;field2\&quot;]. </param>
        /// <returns>Task of ApiResponse (TemplateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateResponse>> BusinessObjectGetBusinessObjectTemplateV1AsyncWithHttpInfo (TemplateRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling BusinessObjectApi->BusinessObjectGetBusinessObjectTemplateV1");

            var localVarPath = "/api/V1/getbusinessobjecttemplate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectGetBusinessObjectTemplateV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateResponse)));
        }

        /// <summary>
        /// Get related Business Objects using a request object Operation to get related Business Objects for a specific relationship. Specify a list of fields to include in the response. The order of parameter usage and overrides is: all fields set to true overrides default overrides;  custom grid overrides field list settings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relatedBusinessObjectRequest">Request object containing all the possible parameters to get related Business Objects.</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>RelatedBusinessObjectResponse</returns>
        public RelatedBusinessObjectResponse BusinessObjectGetRelatedBusinessObjectByRequestV1 (RelatedBusinessObjectRequest relatedBusinessObjectRequest, bool? includelinks = null)
        {
             ApiResponse<RelatedBusinessObjectResponse> localVarResponse = BusinessObjectGetRelatedBusinessObjectByRequestV1WithHttpInfo(relatedBusinessObjectRequest, includelinks);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get related Business Objects using a request object Operation to get related Business Objects for a specific relationship. Specify a list of fields to include in the response. The order of parameter usage and overrides is: all fields set to true overrides default overrides;  custom grid overrides field list settings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relatedBusinessObjectRequest">Request object containing all the possible parameters to get related Business Objects.</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>ApiResponse of RelatedBusinessObjectResponse</returns>
        public ApiResponse< RelatedBusinessObjectResponse > BusinessObjectGetRelatedBusinessObjectByRequestV1WithHttpInfo (RelatedBusinessObjectRequest relatedBusinessObjectRequest, bool? includelinks = null)
        {
            // verify the required parameter 'relatedBusinessObjectRequest' is set
            if (relatedBusinessObjectRequest == null)
                throw new ApiException(400, "Missing required parameter 'relatedBusinessObjectRequest' when calling BusinessObjectApi->BusinessObjectGetRelatedBusinessObjectByRequestV1");

            var localVarPath = "/api/V1/getrelatedbusinessobject";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (includelinks != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includelinks", includelinks)); // query parameter
            if (relatedBusinessObjectRequest != null && relatedBusinessObjectRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(relatedBusinessObjectRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = relatedBusinessObjectRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectGetRelatedBusinessObjectByRequestV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RelatedBusinessObjectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RelatedBusinessObjectResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RelatedBusinessObjectResponse)));
        }

        /// <summary>
        /// Get related Business Objects using a request object Operation to get related Business Objects for a specific relationship. Specify a list of fields to include in the response. The order of parameter usage and overrides is: all fields set to true overrides default overrides;  custom grid overrides field list settings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relatedBusinessObjectRequest">Request object containing all the possible parameters to get related Business Objects.</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>Task of RelatedBusinessObjectResponse</returns>
        public async System.Threading.Tasks.Task<RelatedBusinessObjectResponse> BusinessObjectGetRelatedBusinessObjectByRequestV1Async (RelatedBusinessObjectRequest relatedBusinessObjectRequest, bool? includelinks = null)
        {
             ApiResponse<RelatedBusinessObjectResponse> localVarResponse = await BusinessObjectGetRelatedBusinessObjectByRequestV1AsyncWithHttpInfo(relatedBusinessObjectRequest, includelinks);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get related Business Objects using a request object Operation to get related Business Objects for a specific relationship. Specify a list of fields to include in the response. The order of parameter usage and overrides is: all fields set to true overrides default overrides;  custom grid overrides field list settings.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relatedBusinessObjectRequest">Request object containing all the possible parameters to get related Business Objects.</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>Task of ApiResponse (RelatedBusinessObjectResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RelatedBusinessObjectResponse>> BusinessObjectGetRelatedBusinessObjectByRequestV1AsyncWithHttpInfo (RelatedBusinessObjectRequest relatedBusinessObjectRequest, bool? includelinks = null)
        {
            // verify the required parameter 'relatedBusinessObjectRequest' is set
            if (relatedBusinessObjectRequest == null)
                throw new ApiException(400, "Missing required parameter 'relatedBusinessObjectRequest' when calling BusinessObjectApi->BusinessObjectGetRelatedBusinessObjectByRequestV1");

            var localVarPath = "/api/V1/getrelatedbusinessobject";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (includelinks != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includelinks", includelinks)); // query parameter
            if (relatedBusinessObjectRequest != null && relatedBusinessObjectRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(relatedBusinessObjectRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = relatedBusinessObjectRequest; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectGetRelatedBusinessObjectByRequestV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RelatedBusinessObjectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RelatedBusinessObjectResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RelatedBusinessObjectResponse)));
        }

        /// <summary>
        /// Get related Business Objects by ID Operation to get the related objects for a Business Object relationship specifying all fields or default grid as the field to return.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object.</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to return.</param>
        /// <param name="pageNumber">Specify the page number of the result set to return. (optional)</param>
        /// <param name="pageSize">Specify the number of rows to return per page. (optional)</param>
        /// <param name="allfields">Flag to include all related Business Object fields.  Default is true if not supplied.  If true, then UseDefaultGrid is not used. (optional)</param>
        /// <param name="usedefaultgrid">Flag to trigger the use of the related Business Objects default grid for the list of fields to return. (optional)</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>RelatedBusinessObjectResponse</returns>
        public RelatedBusinessObjectResponse BusinessObjectGetRelatedBusinessObjectV1 (string parentbusobid, string parentbusobrecid, string relationshipid, int? pageNumber = null, int? pageSize = null, bool? allfields = null, bool? usedefaultgrid = null, bool? includelinks = null)
        {
             ApiResponse<RelatedBusinessObjectResponse> localVarResponse = BusinessObjectGetRelatedBusinessObjectV1WithHttpInfo(parentbusobid, parentbusobrecid, relationshipid, pageNumber, pageSize, allfields, usedefaultgrid, includelinks);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get related Business Objects by ID Operation to get the related objects for a Business Object relationship specifying all fields or default grid as the field to return.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object.</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to return.</param>
        /// <param name="pageNumber">Specify the page number of the result set to return. (optional)</param>
        /// <param name="pageSize">Specify the number of rows to return per page. (optional)</param>
        /// <param name="allfields">Flag to include all related Business Object fields.  Default is true if not supplied.  If true, then UseDefaultGrid is not used. (optional)</param>
        /// <param name="usedefaultgrid">Flag to trigger the use of the related Business Objects default grid for the list of fields to return. (optional)</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>ApiResponse of RelatedBusinessObjectResponse</returns>
        public ApiResponse< RelatedBusinessObjectResponse > BusinessObjectGetRelatedBusinessObjectV1WithHttpInfo (string parentbusobid, string parentbusobrecid, string relationshipid, int? pageNumber = null, int? pageSize = null, bool? allfields = null, bool? usedefaultgrid = null, bool? includelinks = null)
        {
            // verify the required parameter 'parentbusobid' is set
            if (parentbusobid == null)
                throw new ApiException(400, "Missing required parameter 'parentbusobid' when calling BusinessObjectApi->BusinessObjectGetRelatedBusinessObjectV1");
            // verify the required parameter 'parentbusobrecid' is set
            if (parentbusobrecid == null)
                throw new ApiException(400, "Missing required parameter 'parentbusobrecid' when calling BusinessObjectApi->BusinessObjectGetRelatedBusinessObjectV1");
            // verify the required parameter 'relationshipid' is set
            if (relationshipid == null)
                throw new ApiException(400, "Missing required parameter 'relationshipid' when calling BusinessObjectApi->BusinessObjectGetRelatedBusinessObjectV1");

            var localVarPath = "/api/V1/getrelatedbusinessobject/parentbusobid/{parentbusobid}/parentbusobrecid/{parentbusobrecid}/relationshipid/{relationshipid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parentbusobid != null) localVarPathParams.Add("parentbusobid", Configuration.ApiClient.ParameterToString(parentbusobid)); // path parameter
            if (parentbusobrecid != null) localVarPathParams.Add("parentbusobrecid", Configuration.ApiClient.ParameterToString(parentbusobrecid)); // path parameter
            if (relationshipid != null) localVarPathParams.Add("relationshipid", Configuration.ApiClient.ParameterToString(relationshipid)); // path parameter
            if (pageNumber != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (allfields != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "allfields", allfields)); // query parameter
            if (usedefaultgrid != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "usedefaultgrid", usedefaultgrid)); // query parameter
            if (includelinks != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includelinks", includelinks)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectGetRelatedBusinessObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RelatedBusinessObjectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RelatedBusinessObjectResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RelatedBusinessObjectResponse)));
        }

        /// <summary>
        /// Get related Business Objects by ID Operation to get the related objects for a Business Object relationship specifying all fields or default grid as the field to return.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object.</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to return.</param>
        /// <param name="pageNumber">Specify the page number of the result set to return. (optional)</param>
        /// <param name="pageSize">Specify the number of rows to return per page. (optional)</param>
        /// <param name="allfields">Flag to include all related Business Object fields.  Default is true if not supplied.  If true, then UseDefaultGrid is not used. (optional)</param>
        /// <param name="usedefaultgrid">Flag to trigger the use of the related Business Objects default grid for the list of fields to return. (optional)</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>Task of RelatedBusinessObjectResponse</returns>
        public async System.Threading.Tasks.Task<RelatedBusinessObjectResponse> BusinessObjectGetRelatedBusinessObjectV1Async (string parentbusobid, string parentbusobrecid, string relationshipid, int? pageNumber = null, int? pageSize = null, bool? allfields = null, bool? usedefaultgrid = null, bool? includelinks = null)
        {
             ApiResponse<RelatedBusinessObjectResponse> localVarResponse = await BusinessObjectGetRelatedBusinessObjectV1AsyncWithHttpInfo(parentbusobid, parentbusobrecid, relationshipid, pageNumber, pageSize, allfields, usedefaultgrid, includelinks);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get related Business Objects by ID Operation to get the related objects for a Business Object relationship specifying all fields or default grid as the field to return.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object.</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to return.</param>
        /// <param name="pageNumber">Specify the page number of the result set to return. (optional)</param>
        /// <param name="pageSize">Specify the number of rows to return per page. (optional)</param>
        /// <param name="allfields">Flag to include all related Business Object fields.  Default is true if not supplied.  If true, then UseDefaultGrid is not used. (optional)</param>
        /// <param name="usedefaultgrid">Flag to trigger the use of the related Business Objects default grid for the list of fields to return. (optional)</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>Task of ApiResponse (RelatedBusinessObjectResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RelatedBusinessObjectResponse>> BusinessObjectGetRelatedBusinessObjectV1AsyncWithHttpInfo (string parentbusobid, string parentbusobrecid, string relationshipid, int? pageNumber = null, int? pageSize = null, bool? allfields = null, bool? usedefaultgrid = null, bool? includelinks = null)
        {
            // verify the required parameter 'parentbusobid' is set
            if (parentbusobid == null)
                throw new ApiException(400, "Missing required parameter 'parentbusobid' when calling BusinessObjectApi->BusinessObjectGetRelatedBusinessObjectV1");
            // verify the required parameter 'parentbusobrecid' is set
            if (parentbusobrecid == null)
                throw new ApiException(400, "Missing required parameter 'parentbusobrecid' when calling BusinessObjectApi->BusinessObjectGetRelatedBusinessObjectV1");
            // verify the required parameter 'relationshipid' is set
            if (relationshipid == null)
                throw new ApiException(400, "Missing required parameter 'relationshipid' when calling BusinessObjectApi->BusinessObjectGetRelatedBusinessObjectV1");

            var localVarPath = "/api/V1/getrelatedbusinessobject/parentbusobid/{parentbusobid}/parentbusobrecid/{parentbusobrecid}/relationshipid/{relationshipid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parentbusobid != null) localVarPathParams.Add("parentbusobid", Configuration.ApiClient.ParameterToString(parentbusobid)); // path parameter
            if (parentbusobrecid != null) localVarPathParams.Add("parentbusobrecid", Configuration.ApiClient.ParameterToString(parentbusobrecid)); // path parameter
            if (relationshipid != null) localVarPathParams.Add("relationshipid", Configuration.ApiClient.ParameterToString(relationshipid)); // path parameter
            if (pageNumber != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (allfields != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "allfields", allfields)); // query parameter
            if (usedefaultgrid != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "usedefaultgrid", usedefaultgrid)); // query parameter
            if (includelinks != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includelinks", includelinks)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectGetRelatedBusinessObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RelatedBusinessObjectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RelatedBusinessObjectResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RelatedBusinessObjectResponse)));
        }

        /// <summary>
        /// Get related Business Objects custom grid Operation to get related Business Objects for a specific relationship. Specify a custom grid ID as the fields to return.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object.</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to return.</param>
        /// <param name="gridid">Specify the ID for the custom grid that contains the field list.</param>
        /// <param name="pageNumber">Specify the page number of the result set to return. (optional)</param>
        /// <param name="pageSize">Specify the number of rows to return per page. (optional)</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>RelatedBusinessObjectResponse</returns>
        public RelatedBusinessObjectResponse BusinessObjectGetRelatedBusinessObjectWithCustomGridV1 (string parentbusobid, string parentbusobrecid, string relationshipid, string gridid, int? pageNumber = null, int? pageSize = null, bool? includelinks = null)
        {
             ApiResponse<RelatedBusinessObjectResponse> localVarResponse = BusinessObjectGetRelatedBusinessObjectWithCustomGridV1WithHttpInfo(parentbusobid, parentbusobrecid, relationshipid, gridid, pageNumber, pageSize, includelinks);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get related Business Objects custom grid Operation to get related Business Objects for a specific relationship. Specify a custom grid ID as the fields to return.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object.</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to return.</param>
        /// <param name="gridid">Specify the ID for the custom grid that contains the field list.</param>
        /// <param name="pageNumber">Specify the page number of the result set to return. (optional)</param>
        /// <param name="pageSize">Specify the number of rows to return per page. (optional)</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>ApiResponse of RelatedBusinessObjectResponse</returns>
        public ApiResponse< RelatedBusinessObjectResponse > BusinessObjectGetRelatedBusinessObjectWithCustomGridV1WithHttpInfo (string parentbusobid, string parentbusobrecid, string relationshipid, string gridid, int? pageNumber = null, int? pageSize = null, bool? includelinks = null)
        {
            // verify the required parameter 'parentbusobid' is set
            if (parentbusobid == null)
                throw new ApiException(400, "Missing required parameter 'parentbusobid' when calling BusinessObjectApi->BusinessObjectGetRelatedBusinessObjectWithCustomGridV1");
            // verify the required parameter 'parentbusobrecid' is set
            if (parentbusobrecid == null)
                throw new ApiException(400, "Missing required parameter 'parentbusobrecid' when calling BusinessObjectApi->BusinessObjectGetRelatedBusinessObjectWithCustomGridV1");
            // verify the required parameter 'relationshipid' is set
            if (relationshipid == null)
                throw new ApiException(400, "Missing required parameter 'relationshipid' when calling BusinessObjectApi->BusinessObjectGetRelatedBusinessObjectWithCustomGridV1");
            // verify the required parameter 'gridid' is set
            if (gridid == null)
                throw new ApiException(400, "Missing required parameter 'gridid' when calling BusinessObjectApi->BusinessObjectGetRelatedBusinessObjectWithCustomGridV1");

            var localVarPath = "/api/V1/getrelatedbusinessobject/parentbusobid/{parentbusobid}/parentbusobrecid/{parentbusobrecid}/relationshipid/{relationshipid}/gridid/{gridid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parentbusobid != null) localVarPathParams.Add("parentbusobid", Configuration.ApiClient.ParameterToString(parentbusobid)); // path parameter
            if (parentbusobrecid != null) localVarPathParams.Add("parentbusobrecid", Configuration.ApiClient.ParameterToString(parentbusobrecid)); // path parameter
            if (relationshipid != null) localVarPathParams.Add("relationshipid", Configuration.ApiClient.ParameterToString(relationshipid)); // path parameter
            if (gridid != null) localVarPathParams.Add("gridid", Configuration.ApiClient.ParameterToString(gridid)); // path parameter
            if (pageNumber != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (includelinks != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includelinks", includelinks)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectGetRelatedBusinessObjectWithCustomGridV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RelatedBusinessObjectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RelatedBusinessObjectResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RelatedBusinessObjectResponse)));
        }

        /// <summary>
        /// Get related Business Objects custom grid Operation to get related Business Objects for a specific relationship. Specify a custom grid ID as the fields to return.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object.</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to return.</param>
        /// <param name="gridid">Specify the ID for the custom grid that contains the field list.</param>
        /// <param name="pageNumber">Specify the page number of the result set to return. (optional)</param>
        /// <param name="pageSize">Specify the number of rows to return per page. (optional)</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>Task of RelatedBusinessObjectResponse</returns>
        public async System.Threading.Tasks.Task<RelatedBusinessObjectResponse> BusinessObjectGetRelatedBusinessObjectWithCustomGridV1Async (string parentbusobid, string parentbusobrecid, string relationshipid, string gridid, int? pageNumber = null, int? pageSize = null, bool? includelinks = null)
        {
             ApiResponse<RelatedBusinessObjectResponse> localVarResponse = await BusinessObjectGetRelatedBusinessObjectWithCustomGridV1AsyncWithHttpInfo(parentbusobid, parentbusobrecid, relationshipid, gridid, pageNumber, pageSize, includelinks);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get related Business Objects custom grid Operation to get related Business Objects for a specific relationship. Specify a custom grid ID as the fields to return.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object.</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to return.</param>
        /// <param name="gridid">Specify the ID for the custom grid that contains the field list.</param>
        /// <param name="pageNumber">Specify the page number of the result set to return. (optional)</param>
        /// <param name="pageSize">Specify the number of rows to return per page. (optional)</param>
        /// <param name="includelinks">Flag to include hyperlinks in results. Default is false.  (optional)</param>
        /// <returns>Task of ApiResponse (RelatedBusinessObjectResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RelatedBusinessObjectResponse>> BusinessObjectGetRelatedBusinessObjectWithCustomGridV1AsyncWithHttpInfo (string parentbusobid, string parentbusobrecid, string relationshipid, string gridid, int? pageNumber = null, int? pageSize = null, bool? includelinks = null)
        {
            // verify the required parameter 'parentbusobid' is set
            if (parentbusobid == null)
                throw new ApiException(400, "Missing required parameter 'parentbusobid' when calling BusinessObjectApi->BusinessObjectGetRelatedBusinessObjectWithCustomGridV1");
            // verify the required parameter 'parentbusobrecid' is set
            if (parentbusobrecid == null)
                throw new ApiException(400, "Missing required parameter 'parentbusobrecid' when calling BusinessObjectApi->BusinessObjectGetRelatedBusinessObjectWithCustomGridV1");
            // verify the required parameter 'relationshipid' is set
            if (relationshipid == null)
                throw new ApiException(400, "Missing required parameter 'relationshipid' when calling BusinessObjectApi->BusinessObjectGetRelatedBusinessObjectWithCustomGridV1");
            // verify the required parameter 'gridid' is set
            if (gridid == null)
                throw new ApiException(400, "Missing required parameter 'gridid' when calling BusinessObjectApi->BusinessObjectGetRelatedBusinessObjectWithCustomGridV1");

            var localVarPath = "/api/V1/getrelatedbusinessobject/parentbusobid/{parentbusobid}/parentbusobrecid/{parentbusobrecid}/relationshipid/{relationshipid}/gridid/{gridid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parentbusobid != null) localVarPathParams.Add("parentbusobid", Configuration.ApiClient.ParameterToString(parentbusobid)); // path parameter
            if (parentbusobrecid != null) localVarPathParams.Add("parentbusobrecid", Configuration.ApiClient.ParameterToString(parentbusobrecid)); // path parameter
            if (relationshipid != null) localVarPathParams.Add("relationshipid", Configuration.ApiClient.ParameterToString(relationshipid)); // path parameter
            if (gridid != null) localVarPathParams.Add("gridid", Configuration.ApiClient.ParameterToString(gridid)); // path parameter
            if (pageNumber != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageNumber", pageNumber)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (includelinks != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "includelinks", includelinks)); // query parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectGetRelatedBusinessObjectWithCustomGridV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RelatedBusinessObjectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RelatedBusinessObjectResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RelatedBusinessObjectResponse)));
        }

        /// <summary>
        /// Link related Business Objects Operation to link related Business Objects. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object.</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to link.</param>
        /// <param name="busobid">Specify the Business Object ID of the Business Object to be linked.</param>
        /// <param name="busobrecid">Specify the Business Object record ID of the Business Object to be linked.</param>
        /// <returns>RelatedBusinessObjectResponse</returns>
        public RelatedBusinessObjectResponse BusinessObjectLinkRelatedBusinessObjectByRecIdV1 (string parentbusobid, string parentbusobrecid, string relationshipid, string busobid, string busobrecid)
        {
             ApiResponse<RelatedBusinessObjectResponse> localVarResponse = BusinessObjectLinkRelatedBusinessObjectByRecIdV1WithHttpInfo(parentbusobid, parentbusobrecid, relationshipid, busobid, busobrecid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Link related Business Objects Operation to link related Business Objects. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object.</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to link.</param>
        /// <param name="busobid">Specify the Business Object ID of the Business Object to be linked.</param>
        /// <param name="busobrecid">Specify the Business Object record ID of the Business Object to be linked.</param>
        /// <returns>ApiResponse of RelatedBusinessObjectResponse</returns>
        public ApiResponse< RelatedBusinessObjectResponse > BusinessObjectLinkRelatedBusinessObjectByRecIdV1WithHttpInfo (string parentbusobid, string parentbusobrecid, string relationshipid, string busobid, string busobrecid)
        {
            // verify the required parameter 'parentbusobid' is set
            if (parentbusobid == null)
                throw new ApiException(400, "Missing required parameter 'parentbusobid' when calling BusinessObjectApi->BusinessObjectLinkRelatedBusinessObjectByRecIdV1");
            // verify the required parameter 'parentbusobrecid' is set
            if (parentbusobrecid == null)
                throw new ApiException(400, "Missing required parameter 'parentbusobrecid' when calling BusinessObjectApi->BusinessObjectLinkRelatedBusinessObjectByRecIdV1");
            // verify the required parameter 'relationshipid' is set
            if (relationshipid == null)
                throw new ApiException(400, "Missing required parameter 'relationshipid' when calling BusinessObjectApi->BusinessObjectLinkRelatedBusinessObjectByRecIdV1");
            // verify the required parameter 'busobid' is set
            if (busobid == null)
                throw new ApiException(400, "Missing required parameter 'busobid' when calling BusinessObjectApi->BusinessObjectLinkRelatedBusinessObjectByRecIdV1");
            // verify the required parameter 'busobrecid' is set
            if (busobrecid == null)
                throw new ApiException(400, "Missing required parameter 'busobrecid' when calling BusinessObjectApi->BusinessObjectLinkRelatedBusinessObjectByRecIdV1");

            var localVarPath = "/api/V1/linkrelatedbusinessobject/parentbusobid/{parentbusobid}/parentbusobrecid/{parentbusobrecid}/relationshipid/{relationshipid}/busobid/{busobid}/busobrecid/{busobrecid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parentbusobid != null) localVarPathParams.Add("parentbusobid", Configuration.ApiClient.ParameterToString(parentbusobid)); // path parameter
            if (parentbusobrecid != null) localVarPathParams.Add("parentbusobrecid", Configuration.ApiClient.ParameterToString(parentbusobrecid)); // path parameter
            if (relationshipid != null) localVarPathParams.Add("relationshipid", Configuration.ApiClient.ParameterToString(relationshipid)); // path parameter
            if (busobid != null) localVarPathParams.Add("busobid", Configuration.ApiClient.ParameterToString(busobid)); // path parameter
            if (busobrecid != null) localVarPathParams.Add("busobrecid", Configuration.ApiClient.ParameterToString(busobrecid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectLinkRelatedBusinessObjectByRecIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RelatedBusinessObjectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RelatedBusinessObjectResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RelatedBusinessObjectResponse)));
        }

        /// <summary>
        /// Link related Business Objects Operation to link related Business Objects. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object.</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to link.</param>
        /// <param name="busobid">Specify the Business Object ID of the Business Object to be linked.</param>
        /// <param name="busobrecid">Specify the Business Object record ID of the Business Object to be linked.</param>
        /// <returns>Task of RelatedBusinessObjectResponse</returns>
        public async System.Threading.Tasks.Task<RelatedBusinessObjectResponse> BusinessObjectLinkRelatedBusinessObjectByRecIdV1Async (string parentbusobid, string parentbusobrecid, string relationshipid, string busobid, string busobrecid)
        {
             ApiResponse<RelatedBusinessObjectResponse> localVarResponse = await BusinessObjectLinkRelatedBusinessObjectByRecIdV1AsyncWithHttpInfo(parentbusobid, parentbusobrecid, relationshipid, busobid, busobrecid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Link related Business Objects Operation to link related Business Objects. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object.</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to link.</param>
        /// <param name="busobid">Specify the Business Object ID of the Business Object to be linked.</param>
        /// <param name="busobrecid">Specify the Business Object record ID of the Business Object to be linked.</param>
        /// <returns>Task of ApiResponse (RelatedBusinessObjectResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RelatedBusinessObjectResponse>> BusinessObjectLinkRelatedBusinessObjectByRecIdV1AsyncWithHttpInfo (string parentbusobid, string parentbusobrecid, string relationshipid, string busobid, string busobrecid)
        {
            // verify the required parameter 'parentbusobid' is set
            if (parentbusobid == null)
                throw new ApiException(400, "Missing required parameter 'parentbusobid' when calling BusinessObjectApi->BusinessObjectLinkRelatedBusinessObjectByRecIdV1");
            // verify the required parameter 'parentbusobrecid' is set
            if (parentbusobrecid == null)
                throw new ApiException(400, "Missing required parameter 'parentbusobrecid' when calling BusinessObjectApi->BusinessObjectLinkRelatedBusinessObjectByRecIdV1");
            // verify the required parameter 'relationshipid' is set
            if (relationshipid == null)
                throw new ApiException(400, "Missing required parameter 'relationshipid' when calling BusinessObjectApi->BusinessObjectLinkRelatedBusinessObjectByRecIdV1");
            // verify the required parameter 'busobid' is set
            if (busobid == null)
                throw new ApiException(400, "Missing required parameter 'busobid' when calling BusinessObjectApi->BusinessObjectLinkRelatedBusinessObjectByRecIdV1");
            // verify the required parameter 'busobrecid' is set
            if (busobrecid == null)
                throw new ApiException(400, "Missing required parameter 'busobrecid' when calling BusinessObjectApi->BusinessObjectLinkRelatedBusinessObjectByRecIdV1");

            var localVarPath = "/api/V1/linkrelatedbusinessobject/parentbusobid/{parentbusobid}/parentbusobrecid/{parentbusobrecid}/relationshipid/{relationshipid}/busobid/{busobid}/busobrecid/{busobrecid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parentbusobid != null) localVarPathParams.Add("parentbusobid", Configuration.ApiClient.ParameterToString(parentbusobid)); // path parameter
            if (parentbusobrecid != null) localVarPathParams.Add("parentbusobrecid", Configuration.ApiClient.ParameterToString(parentbusobrecid)); // path parameter
            if (relationshipid != null) localVarPathParams.Add("relationshipid", Configuration.ApiClient.ParameterToString(relationshipid)); // path parameter
            if (busobid != null) localVarPathParams.Add("busobid", Configuration.ApiClient.ParameterToString(busobid)); // path parameter
            if (busobrecid != null) localVarPathParams.Add("busobrecid", Configuration.ApiClient.ParameterToString(busobrecid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectLinkRelatedBusinessObjectByRecIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RelatedBusinessObjectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RelatedBusinessObjectResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RelatedBusinessObjectResponse)));
        }

        /// <summary>
        /// Remove an attachment by Business Object ID and public ID Operation to remove an attachment from a Business Object using the attachment record ID, Business Object ID, and Business Object public ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentid">Specify the internal ID of the attachment record.</param>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="publicid">Specify the Business Object public ID.</param>
        /// <returns></returns>
        public void BusinessObjectRemoveBusinessObjectAttachmentByIdAndPublicIdV1 (string attachmentid, string busobid, string publicid)
        {
             BusinessObjectRemoveBusinessObjectAttachmentByIdAndPublicIdV1WithHttpInfo(attachmentid, busobid, publicid);
        }

        /// <summary>
        /// Remove an attachment by Business Object ID and public ID Operation to remove an attachment from a Business Object using the attachment record ID, Business Object ID, and Business Object public ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentid">Specify the internal ID of the attachment record.</param>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="publicid">Specify the Business Object public ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BusinessObjectRemoveBusinessObjectAttachmentByIdAndPublicIdV1WithHttpInfo (string attachmentid, string busobid, string publicid)
        {
            // verify the required parameter 'attachmentid' is set
            if (attachmentid == null)
                throw new ApiException(400, "Missing required parameter 'attachmentid' when calling BusinessObjectApi->BusinessObjectRemoveBusinessObjectAttachmentByIdAndPublicIdV1");
            // verify the required parameter 'busobid' is set
            if (busobid == null)
                throw new ApiException(400, "Missing required parameter 'busobid' when calling BusinessObjectApi->BusinessObjectRemoveBusinessObjectAttachmentByIdAndPublicIdV1");
            // verify the required parameter 'publicid' is set
            if (publicid == null)
                throw new ApiException(400, "Missing required parameter 'publicid' when calling BusinessObjectApi->BusinessObjectRemoveBusinessObjectAttachmentByIdAndPublicIdV1");

            var localVarPath = "/api/V1/removebusinessobjectattachment/attachmentid/{attachmentid}/busobid/{busobid}/publicid/{publicid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentid != null) localVarPathParams.Add("attachmentid", Configuration.ApiClient.ParameterToString(attachmentid)); // path parameter
            if (busobid != null) localVarPathParams.Add("busobid", Configuration.ApiClient.ParameterToString(busobid)); // path parameter
            if (publicid != null) localVarPathParams.Add("publicid", Configuration.ApiClient.ParameterToString(publicid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectRemoveBusinessObjectAttachmentByIdAndPublicIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove an attachment by Business Object ID and public ID Operation to remove an attachment from a Business Object using the attachment record ID, Business Object ID, and Business Object public ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentid">Specify the internal ID of the attachment record.</param>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="publicid">Specify the Business Object public ID.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BusinessObjectRemoveBusinessObjectAttachmentByIdAndPublicIdV1Async (string attachmentid, string busobid, string publicid)
        {
             await BusinessObjectRemoveBusinessObjectAttachmentByIdAndPublicIdV1AsyncWithHttpInfo(attachmentid, busobid, publicid);

        }

        /// <summary>
        /// Remove an attachment by Business Object ID and public ID Operation to remove an attachment from a Business Object using the attachment record ID, Business Object ID, and Business Object public ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentid">Specify the internal ID of the attachment record.</param>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="publicid">Specify the Business Object public ID.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BusinessObjectRemoveBusinessObjectAttachmentByIdAndPublicIdV1AsyncWithHttpInfo (string attachmentid, string busobid, string publicid)
        {
            // verify the required parameter 'attachmentid' is set
            if (attachmentid == null)
                throw new ApiException(400, "Missing required parameter 'attachmentid' when calling BusinessObjectApi->BusinessObjectRemoveBusinessObjectAttachmentByIdAndPublicIdV1");
            // verify the required parameter 'busobid' is set
            if (busobid == null)
                throw new ApiException(400, "Missing required parameter 'busobid' when calling BusinessObjectApi->BusinessObjectRemoveBusinessObjectAttachmentByIdAndPublicIdV1");
            // verify the required parameter 'publicid' is set
            if (publicid == null)
                throw new ApiException(400, "Missing required parameter 'publicid' when calling BusinessObjectApi->BusinessObjectRemoveBusinessObjectAttachmentByIdAndPublicIdV1");

            var localVarPath = "/api/V1/removebusinessobjectattachment/attachmentid/{attachmentid}/busobid/{busobid}/publicid/{publicid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentid != null) localVarPathParams.Add("attachmentid", Configuration.ApiClient.ParameterToString(attachmentid)); // path parameter
            if (busobid != null) localVarPathParams.Add("busobid", Configuration.ApiClient.ParameterToString(busobid)); // path parameter
            if (publicid != null) localVarPathParams.Add("publicid", Configuration.ApiClient.ParameterToString(publicid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectRemoveBusinessObjectAttachmentByIdAndPublicIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove an attachment by Business Object ID and record ID Operation to remove an attachment from a Business Object using the attachment record ID, Business Object ID, and Business Object record ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentid">Specify the internal ID of the attachment record.</param>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <returns></returns>
        public void BusinessObjectRemoveBusinessObjectAttachmentByIdAndRecIdV1 (string attachmentid, string busobid, string busobrecid)
        {
             BusinessObjectRemoveBusinessObjectAttachmentByIdAndRecIdV1WithHttpInfo(attachmentid, busobid, busobrecid);
        }

        /// <summary>
        /// Remove an attachment by Business Object ID and record ID Operation to remove an attachment from a Business Object using the attachment record ID, Business Object ID, and Business Object record ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentid">Specify the internal ID of the attachment record.</param>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BusinessObjectRemoveBusinessObjectAttachmentByIdAndRecIdV1WithHttpInfo (string attachmentid, string busobid, string busobrecid)
        {
            // verify the required parameter 'attachmentid' is set
            if (attachmentid == null)
                throw new ApiException(400, "Missing required parameter 'attachmentid' when calling BusinessObjectApi->BusinessObjectRemoveBusinessObjectAttachmentByIdAndRecIdV1");
            // verify the required parameter 'busobid' is set
            if (busobid == null)
                throw new ApiException(400, "Missing required parameter 'busobid' when calling BusinessObjectApi->BusinessObjectRemoveBusinessObjectAttachmentByIdAndRecIdV1");
            // verify the required parameter 'busobrecid' is set
            if (busobrecid == null)
                throw new ApiException(400, "Missing required parameter 'busobrecid' when calling BusinessObjectApi->BusinessObjectRemoveBusinessObjectAttachmentByIdAndRecIdV1");

            var localVarPath = "/api/V1/removebusinessobjectattachment/attachmentid/{attachmentid}/busobid/{busobid}/busobrecid/{busobrecid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentid != null) localVarPathParams.Add("attachmentid", Configuration.ApiClient.ParameterToString(attachmentid)); // path parameter
            if (busobid != null) localVarPathParams.Add("busobid", Configuration.ApiClient.ParameterToString(busobid)); // path parameter
            if (busobrecid != null) localVarPathParams.Add("busobrecid", Configuration.ApiClient.ParameterToString(busobrecid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectRemoveBusinessObjectAttachmentByIdAndRecIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove an attachment by Business Object ID and record ID Operation to remove an attachment from a Business Object using the attachment record ID, Business Object ID, and Business Object record ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentid">Specify the internal ID of the attachment record.</param>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BusinessObjectRemoveBusinessObjectAttachmentByIdAndRecIdV1Async (string attachmentid, string busobid, string busobrecid)
        {
             await BusinessObjectRemoveBusinessObjectAttachmentByIdAndRecIdV1AsyncWithHttpInfo(attachmentid, busobid, busobrecid);

        }

        /// <summary>
        /// Remove an attachment by Business Object ID and record ID Operation to remove an attachment from a Business Object using the attachment record ID, Business Object ID, and Business Object record ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentid">Specify the internal ID of the attachment record.</param>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BusinessObjectRemoveBusinessObjectAttachmentByIdAndRecIdV1AsyncWithHttpInfo (string attachmentid, string busobid, string busobrecid)
        {
            // verify the required parameter 'attachmentid' is set
            if (attachmentid == null)
                throw new ApiException(400, "Missing required parameter 'attachmentid' when calling BusinessObjectApi->BusinessObjectRemoveBusinessObjectAttachmentByIdAndRecIdV1");
            // verify the required parameter 'busobid' is set
            if (busobid == null)
                throw new ApiException(400, "Missing required parameter 'busobid' when calling BusinessObjectApi->BusinessObjectRemoveBusinessObjectAttachmentByIdAndRecIdV1");
            // verify the required parameter 'busobrecid' is set
            if (busobrecid == null)
                throw new ApiException(400, "Missing required parameter 'busobrecid' when calling BusinessObjectApi->BusinessObjectRemoveBusinessObjectAttachmentByIdAndRecIdV1");

            var localVarPath = "/api/V1/removebusinessobjectattachment/attachmentid/{attachmentid}/busobid/{busobid}/busobrecid/{busobrecid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentid != null) localVarPathParams.Add("attachmentid", Configuration.ApiClient.ParameterToString(attachmentid)); // path parameter
            if (busobid != null) localVarPathParams.Add("busobid", Configuration.ApiClient.ParameterToString(busobid)); // path parameter
            if (busobrecid != null) localVarPathParams.Add("busobrecid", Configuration.ApiClient.ParameterToString(busobrecid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectRemoveBusinessObjectAttachmentByIdAndRecIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove an attachment by Business Object name and public ID Operation to remove an attachment from a Business Object using the attachment record ID, Business Object name, and Business Object record ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentid">Specify the internal ID of the attachment record.</param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="publicid">Specify the Business Object public ID.</param>
        /// <returns></returns>
        public void BusinessObjectRemoveBusinessObjectAttachmentByNameAndPublicIdV1 (string attachmentid, string busobname, string publicid)
        {
             BusinessObjectRemoveBusinessObjectAttachmentByNameAndPublicIdV1WithHttpInfo(attachmentid, busobname, publicid);
        }

        /// <summary>
        /// Remove an attachment by Business Object name and public ID Operation to remove an attachment from a Business Object using the attachment record ID, Business Object name, and Business Object record ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentid">Specify the internal ID of the attachment record.</param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="publicid">Specify the Business Object public ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BusinessObjectRemoveBusinessObjectAttachmentByNameAndPublicIdV1WithHttpInfo (string attachmentid, string busobname, string publicid)
        {
            // verify the required parameter 'attachmentid' is set
            if (attachmentid == null)
                throw new ApiException(400, "Missing required parameter 'attachmentid' when calling BusinessObjectApi->BusinessObjectRemoveBusinessObjectAttachmentByNameAndPublicIdV1");
            // verify the required parameter 'busobname' is set
            if (busobname == null)
                throw new ApiException(400, "Missing required parameter 'busobname' when calling BusinessObjectApi->BusinessObjectRemoveBusinessObjectAttachmentByNameAndPublicIdV1");
            // verify the required parameter 'publicid' is set
            if (publicid == null)
                throw new ApiException(400, "Missing required parameter 'publicid' when calling BusinessObjectApi->BusinessObjectRemoveBusinessObjectAttachmentByNameAndPublicIdV1");

            var localVarPath = "/api/V1/removebusinessobjectattachment/attachmentid/{attachmentid}/busobname/{busobname}/publicid/{publicid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentid != null) localVarPathParams.Add("attachmentid", Configuration.ApiClient.ParameterToString(attachmentid)); // path parameter
            if (busobname != null) localVarPathParams.Add("busobname", Configuration.ApiClient.ParameterToString(busobname)); // path parameter
            if (publicid != null) localVarPathParams.Add("publicid", Configuration.ApiClient.ParameterToString(publicid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectRemoveBusinessObjectAttachmentByNameAndPublicIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove an attachment by Business Object name and public ID Operation to remove an attachment from a Business Object using the attachment record ID, Business Object name, and Business Object record ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentid">Specify the internal ID of the attachment record.</param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="publicid">Specify the Business Object public ID.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BusinessObjectRemoveBusinessObjectAttachmentByNameAndPublicIdV1Async (string attachmentid, string busobname, string publicid)
        {
             await BusinessObjectRemoveBusinessObjectAttachmentByNameAndPublicIdV1AsyncWithHttpInfo(attachmentid, busobname, publicid);

        }

        /// <summary>
        /// Remove an attachment by Business Object name and public ID Operation to remove an attachment from a Business Object using the attachment record ID, Business Object name, and Business Object record ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentid">Specify the internal ID of the attachment record.</param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="publicid">Specify the Business Object public ID.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BusinessObjectRemoveBusinessObjectAttachmentByNameAndPublicIdV1AsyncWithHttpInfo (string attachmentid, string busobname, string publicid)
        {
            // verify the required parameter 'attachmentid' is set
            if (attachmentid == null)
                throw new ApiException(400, "Missing required parameter 'attachmentid' when calling BusinessObjectApi->BusinessObjectRemoveBusinessObjectAttachmentByNameAndPublicIdV1");
            // verify the required parameter 'busobname' is set
            if (busobname == null)
                throw new ApiException(400, "Missing required parameter 'busobname' when calling BusinessObjectApi->BusinessObjectRemoveBusinessObjectAttachmentByNameAndPublicIdV1");
            // verify the required parameter 'publicid' is set
            if (publicid == null)
                throw new ApiException(400, "Missing required parameter 'publicid' when calling BusinessObjectApi->BusinessObjectRemoveBusinessObjectAttachmentByNameAndPublicIdV1");

            var localVarPath = "/api/V1/removebusinessobjectattachment/attachmentid/{attachmentid}/busobname/{busobname}/publicid/{publicid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentid != null) localVarPathParams.Add("attachmentid", Configuration.ApiClient.ParameterToString(attachmentid)); // path parameter
            if (busobname != null) localVarPathParams.Add("busobname", Configuration.ApiClient.ParameterToString(busobname)); // path parameter
            if (publicid != null) localVarPathParams.Add("publicid", Configuration.ApiClient.ParameterToString(publicid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectRemoveBusinessObjectAttachmentByNameAndPublicIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove an attachment by Business Object name and record ID Operation to remove an attachment from a Business Object using the attachment record ID, Business Object name, and Business Object public ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentid">Specify the internal ID of the attachment record.</param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <returns></returns>
        public void BusinessObjectRemoveBusinessObjectAttachmentByNameAndRecIdV1 (string attachmentid, string busobname, string busobrecid)
        {
             BusinessObjectRemoveBusinessObjectAttachmentByNameAndRecIdV1WithHttpInfo(attachmentid, busobname, busobrecid);
        }

        /// <summary>
        /// Remove an attachment by Business Object name and record ID Operation to remove an attachment from a Business Object using the attachment record ID, Business Object name, and Business Object public ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentid">Specify the internal ID of the attachment record.</param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BusinessObjectRemoveBusinessObjectAttachmentByNameAndRecIdV1WithHttpInfo (string attachmentid, string busobname, string busobrecid)
        {
            // verify the required parameter 'attachmentid' is set
            if (attachmentid == null)
                throw new ApiException(400, "Missing required parameter 'attachmentid' when calling BusinessObjectApi->BusinessObjectRemoveBusinessObjectAttachmentByNameAndRecIdV1");
            // verify the required parameter 'busobname' is set
            if (busobname == null)
                throw new ApiException(400, "Missing required parameter 'busobname' when calling BusinessObjectApi->BusinessObjectRemoveBusinessObjectAttachmentByNameAndRecIdV1");
            // verify the required parameter 'busobrecid' is set
            if (busobrecid == null)
                throw new ApiException(400, "Missing required parameter 'busobrecid' when calling BusinessObjectApi->BusinessObjectRemoveBusinessObjectAttachmentByNameAndRecIdV1");

            var localVarPath = "/api/V1/removebusinessobjectattachment/attachmentid/{attachmentid}/busobname/{busobname}/busobrecid/{busobrecid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentid != null) localVarPathParams.Add("attachmentid", Configuration.ApiClient.ParameterToString(attachmentid)); // path parameter
            if (busobname != null) localVarPathParams.Add("busobname", Configuration.ApiClient.ParameterToString(busobname)); // path parameter
            if (busobrecid != null) localVarPathParams.Add("busobrecid", Configuration.ApiClient.ParameterToString(busobrecid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectRemoveBusinessObjectAttachmentByNameAndRecIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Remove an attachment by Business Object name and record ID Operation to remove an attachment from a Business Object using the attachment record ID, Business Object name, and Business Object public ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentid">Specify the internal ID of the attachment record.</param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BusinessObjectRemoveBusinessObjectAttachmentByNameAndRecIdV1Async (string attachmentid, string busobname, string busobrecid)
        {
             await BusinessObjectRemoveBusinessObjectAttachmentByNameAndRecIdV1AsyncWithHttpInfo(attachmentid, busobname, busobrecid);

        }

        /// <summary>
        /// Remove an attachment by Business Object name and record ID Operation to remove an attachment from a Business Object using the attachment record ID, Business Object name, and Business Object public ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attachmentid">Specify the internal ID of the attachment record.</param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="busobrecid">Specify the Business Object record ID.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BusinessObjectRemoveBusinessObjectAttachmentByNameAndRecIdV1AsyncWithHttpInfo (string attachmentid, string busobname, string busobrecid)
        {
            // verify the required parameter 'attachmentid' is set
            if (attachmentid == null)
                throw new ApiException(400, "Missing required parameter 'attachmentid' when calling BusinessObjectApi->BusinessObjectRemoveBusinessObjectAttachmentByNameAndRecIdV1");
            // verify the required parameter 'busobname' is set
            if (busobname == null)
                throw new ApiException(400, "Missing required parameter 'busobname' when calling BusinessObjectApi->BusinessObjectRemoveBusinessObjectAttachmentByNameAndRecIdV1");
            // verify the required parameter 'busobrecid' is set
            if (busobrecid == null)
                throw new ApiException(400, "Missing required parameter 'busobrecid' when calling BusinessObjectApi->BusinessObjectRemoveBusinessObjectAttachmentByNameAndRecIdV1");

            var localVarPath = "/api/V1/removebusinessobjectattachment/attachmentid/{attachmentid}/busobname/{busobname}/busobrecid/{busobrecid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attachmentid != null) localVarPathParams.Add("attachmentid", Configuration.ApiClient.ParameterToString(attachmentid)); // path parameter
            if (busobname != null) localVarPathParams.Add("busobname", Configuration.ApiClient.ParameterToString(busobname)); // path parameter
            if (busobrecid != null) localVarPathParams.Add("busobrecid", Configuration.ApiClient.ParameterToString(busobrecid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectRemoveBusinessObjectAttachmentByNameAndRecIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Attach a Business Object to a Business Object Operation to attach a Business Object to a Business Object. This links the Business Object but does not create a relationship between the two. (Use \&quot;Link Related Business Objects\&quot; to create a relationship.)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object used to specify the Business Objects to attach. You can use Business Object name or ID and Business Object record ID or public ID.</param>
        /// <returns>AttachmentsResponse</returns>
        public AttachmentsResponse BusinessObjectSaveBusinessObjectAttachmentBusObV1 (SaveBusObAttachmentRequest request)
        {
             ApiResponse<AttachmentsResponse> localVarResponse = BusinessObjectSaveBusinessObjectAttachmentBusObV1WithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Attach a Business Object to a Business Object Operation to attach a Business Object to a Business Object. This links the Business Object but does not create a relationship between the two. (Use \&quot;Link Related Business Objects\&quot; to create a relationship.)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object used to specify the Business Objects to attach. You can use Business Object name or ID and Business Object record ID or public ID.</param>
        /// <returns>ApiResponse of AttachmentsResponse</returns>
        public ApiResponse< AttachmentsResponse > BusinessObjectSaveBusinessObjectAttachmentBusObV1WithHttpInfo (SaveBusObAttachmentRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling BusinessObjectApi->BusinessObjectSaveBusinessObjectAttachmentBusObV1");

            var localVarPath = "/api/V1/savebusinessobjectattachmentbusob";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectSaveBusinessObjectAttachmentBusObV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachmentsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentsResponse)));
        }

        /// <summary>
        /// Attach a Business Object to a Business Object Operation to attach a Business Object to a Business Object. This links the Business Object but does not create a relationship between the two. (Use \&quot;Link Related Business Objects\&quot; to create a relationship.)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object used to specify the Business Objects to attach. You can use Business Object name or ID and Business Object record ID or public ID.</param>
        /// <returns>Task of AttachmentsResponse</returns>
        public async System.Threading.Tasks.Task<AttachmentsResponse> BusinessObjectSaveBusinessObjectAttachmentBusObV1Async (SaveBusObAttachmentRequest request)
        {
             ApiResponse<AttachmentsResponse> localVarResponse = await BusinessObjectSaveBusinessObjectAttachmentBusObV1AsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Attach a Business Object to a Business Object Operation to attach a Business Object to a Business Object. This links the Business Object but does not create a relationship between the two. (Use \&quot;Link Related Business Objects\&quot; to create a relationship.)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object used to specify the Business Objects to attach. You can use Business Object name or ID and Business Object record ID or public ID.</param>
        /// <returns>Task of ApiResponse (AttachmentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AttachmentsResponse>> BusinessObjectSaveBusinessObjectAttachmentBusObV1AsyncWithHttpInfo (SaveBusObAttachmentRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling BusinessObjectApi->BusinessObjectSaveBusinessObjectAttachmentBusObV1");

            var localVarPath = "/api/V1/savebusinessobjectattachmentbusob";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectSaveBusinessObjectAttachmentBusObV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachmentsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentsResponse)));
        }

        /// <summary>
        /// Attach a file via UNC Operation to attach a file to a Business Object via a path (UNC recommended).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object used to specify the file path (UNC recommended) and the Business Object. You can use Business Object name or ID and Business Object record ID or public ID.</param>
        /// <returns>AttachmentsResponse</returns>
        public AttachmentsResponse BusinessObjectSaveBusinessObjectAttachmentLinkV1 (SaveLinkAttachmentRequest request)
        {
             ApiResponse<AttachmentsResponse> localVarResponse = BusinessObjectSaveBusinessObjectAttachmentLinkV1WithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Attach a file via UNC Operation to attach a file to a Business Object via a path (UNC recommended).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object used to specify the file path (UNC recommended) and the Business Object. You can use Business Object name or ID and Business Object record ID or public ID.</param>
        /// <returns>ApiResponse of AttachmentsResponse</returns>
        public ApiResponse< AttachmentsResponse > BusinessObjectSaveBusinessObjectAttachmentLinkV1WithHttpInfo (SaveLinkAttachmentRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling BusinessObjectApi->BusinessObjectSaveBusinessObjectAttachmentLinkV1");

            var localVarPath = "/api/V1/savebusinessobjectattachmentlink";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectSaveBusinessObjectAttachmentLinkV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachmentsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentsResponse)));
        }

        /// <summary>
        /// Attach a file via UNC Operation to attach a file to a Business Object via a path (UNC recommended).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object used to specify the file path (UNC recommended) and the Business Object. You can use Business Object name or ID and Business Object record ID or public ID.</param>
        /// <returns>Task of AttachmentsResponse</returns>
        public async System.Threading.Tasks.Task<AttachmentsResponse> BusinessObjectSaveBusinessObjectAttachmentLinkV1Async (SaveLinkAttachmentRequest request)
        {
             ApiResponse<AttachmentsResponse> localVarResponse = await BusinessObjectSaveBusinessObjectAttachmentLinkV1AsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Attach a file via UNC Operation to attach a file to a Business Object via a path (UNC recommended).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object used to specify the file path (UNC recommended) and the Business Object. You can use Business Object name or ID and Business Object record ID or public ID.</param>
        /// <returns>Task of ApiResponse (AttachmentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AttachmentsResponse>> BusinessObjectSaveBusinessObjectAttachmentLinkV1AsyncWithHttpInfo (SaveLinkAttachmentRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling BusinessObjectApi->BusinessObjectSaveBusinessObjectAttachmentLinkV1");

            var localVarPath = "/api/V1/savebusinessobjectattachmentlink";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectSaveBusinessObjectAttachmentLinkV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachmentsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentsResponse)));
        }

        /// <summary>
        /// Attach a URL path Operation to attach a URL path to a Business Object.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object used to specify the URL path and Business Object. You can use Business Object name or ID and Business Object record ID or public ID.</param>
        /// <returns>AttachmentsResponse</returns>
        public AttachmentsResponse BusinessObjectSaveBusinessObjectAttachmentUrlV1 (SaveUrlAttachmentRequest request)
        {
             ApiResponse<AttachmentsResponse> localVarResponse = BusinessObjectSaveBusinessObjectAttachmentUrlV1WithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Attach a URL path Operation to attach a URL path to a Business Object.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object used to specify the URL path and Business Object. You can use Business Object name or ID and Business Object record ID or public ID.</param>
        /// <returns>ApiResponse of AttachmentsResponse</returns>
        public ApiResponse< AttachmentsResponse > BusinessObjectSaveBusinessObjectAttachmentUrlV1WithHttpInfo (SaveUrlAttachmentRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling BusinessObjectApi->BusinessObjectSaveBusinessObjectAttachmentUrlV1");

            var localVarPath = "/api/V1/savebusinessobjectattachmenturl";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectSaveBusinessObjectAttachmentUrlV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachmentsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentsResponse)));
        }

        /// <summary>
        /// Attach a URL path Operation to attach a URL path to a Business Object.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object used to specify the URL path and Business Object. You can use Business Object name or ID and Business Object record ID or public ID.</param>
        /// <returns>Task of AttachmentsResponse</returns>
        public async System.Threading.Tasks.Task<AttachmentsResponse> BusinessObjectSaveBusinessObjectAttachmentUrlV1Async (SaveUrlAttachmentRequest request)
        {
             ApiResponse<AttachmentsResponse> localVarResponse = await BusinessObjectSaveBusinessObjectAttachmentUrlV1AsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Attach a URL path Operation to attach a URL path to a Business Object.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object used to specify the URL path and Business Object. You can use Business Object name or ID and Business Object record ID or public ID.</param>
        /// <returns>Task of ApiResponse (AttachmentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AttachmentsResponse>> BusinessObjectSaveBusinessObjectAttachmentUrlV1AsyncWithHttpInfo (SaveUrlAttachmentRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling BusinessObjectApi->BusinessObjectSaveBusinessObjectAttachmentUrlV1");

            var localVarPath = "/api/V1/savebusinessobjectattachmenturl";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectSaveBusinessObjectAttachmentUrlV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AttachmentsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentsResponse)));
        }

        /// <summary>
        /// Create or update a batch of Business Objects Operation that creates or updates an array of Business Objects in a batch. To update, specify record ID or public ID. To create, leave record ID and public ID empty.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Specify the array of Business Object templates. </param>
        /// <returns>BatchSaveResponse</returns>
        public BatchSaveResponse BusinessObjectSaveBusinessObjectBatchV1 (BatchSaveRequest request)
        {
             ApiResponse<BatchSaveResponse> localVarResponse = BusinessObjectSaveBusinessObjectBatchV1WithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create or update a batch of Business Objects Operation that creates or updates an array of Business Objects in a batch. To update, specify record ID or public ID. To create, leave record ID and public ID empty.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Specify the array of Business Object templates. </param>
        /// <returns>ApiResponse of BatchSaveResponse</returns>
        public ApiResponse< BatchSaveResponse > BusinessObjectSaveBusinessObjectBatchV1WithHttpInfo (BatchSaveRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling BusinessObjectApi->BusinessObjectSaveBusinessObjectBatchV1");

            var localVarPath = "/api/V1/savebusinessobjectbatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectSaveBusinessObjectBatchV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchSaveResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchSaveResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchSaveResponse)));
        }

        /// <summary>
        /// Create or update a batch of Business Objects Operation that creates or updates an array of Business Objects in a batch. To update, specify record ID or public ID. To create, leave record ID and public ID empty.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Specify the array of Business Object templates. </param>
        /// <returns>Task of BatchSaveResponse</returns>
        public async System.Threading.Tasks.Task<BatchSaveResponse> BusinessObjectSaveBusinessObjectBatchV1Async (BatchSaveRequest request)
        {
             ApiResponse<BatchSaveResponse> localVarResponse = await BusinessObjectSaveBusinessObjectBatchV1AsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create or update a batch of Business Objects Operation that creates or updates an array of Business Objects in a batch. To update, specify record ID or public ID. To create, leave record ID and public ID empty.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Specify the array of Business Object templates. </param>
        /// <returns>Task of ApiResponse (BatchSaveResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BatchSaveResponse>> BusinessObjectSaveBusinessObjectBatchV1AsyncWithHttpInfo (BatchSaveRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling BusinessObjectApi->BusinessObjectSaveBusinessObjectBatchV1");

            var localVarPath = "/api/V1/savebusinessobjectbatch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectSaveBusinessObjectBatchV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BatchSaveResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BatchSaveResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BatchSaveResponse)));
        }

        /// <summary>
        /// Create or Update a Business Object Operation that creates a new Business Object or updates an existing Business Object. To update, specify record ID or public ID. To create, leave record ID and public ID empty.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Specify a list of fields from a Business Object template. </param>
        /// <returns>SaveResponse</returns>
        public SaveResponse BusinessObjectSaveBusinessObjectV1 (SaveRequest request)
        {
             ApiResponse<SaveResponse> localVarResponse = BusinessObjectSaveBusinessObjectV1WithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create or Update a Business Object Operation that creates a new Business Object or updates an existing Business Object. To update, specify record ID or public ID. To create, leave record ID and public ID empty.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Specify a list of fields from a Business Object template. </param>
        /// <returns>ApiResponse of SaveResponse</returns>
        public ApiResponse< SaveResponse > BusinessObjectSaveBusinessObjectV1WithHttpInfo (SaveRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling BusinessObjectApi->BusinessObjectSaveBusinessObjectV1");

            var localVarPath = "/api/V1/savebusinessobject";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectSaveBusinessObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaveResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaveResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaveResponse)));
        }

        /// <summary>
        /// Create or Update a Business Object Operation that creates a new Business Object or updates an existing Business Object. To update, specify record ID or public ID. To create, leave record ID and public ID empty.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Specify a list of fields from a Business Object template. </param>
        /// <returns>Task of SaveResponse</returns>
        public async System.Threading.Tasks.Task<SaveResponse> BusinessObjectSaveBusinessObjectV1Async (SaveRequest request)
        {
             ApiResponse<SaveResponse> localVarResponse = await BusinessObjectSaveBusinessObjectV1AsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create or Update a Business Object Operation that creates a new Business Object or updates an existing Business Object. To update, specify record ID or public ID. To create, leave record ID and public ID empty.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Specify a list of fields from a Business Object template. </param>
        /// <returns>Task of ApiResponse (SaveResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SaveResponse>> BusinessObjectSaveBusinessObjectV1AsyncWithHttpInfo (SaveRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling BusinessObjectApi->BusinessObjectSaveBusinessObjectV1");

            var localVarPath = "/api/V1/savebusinessobject";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectSaveBusinessObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SaveResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SaveResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SaveResponse)));
        }

        /// <summary>
        /// Create or update a related Business Object Operation that creates or updates a related Business Object. To update, specify record ID or public ID. To create, leave record ID and public ID empty.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object specifying the parent the Business Object, the Relationship, and field values for the Business Object to create or update. </param>
        /// <returns>RelatedSaveResponse</returns>
        public RelatedSaveResponse BusinessObjectSaveRelatedBusinessObjectV1 (RelatedSaveRequest request)
        {
             ApiResponse<RelatedSaveResponse> localVarResponse = BusinessObjectSaveRelatedBusinessObjectV1WithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create or update a related Business Object Operation that creates or updates a related Business Object. To update, specify record ID or public ID. To create, leave record ID and public ID empty.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object specifying the parent the Business Object, the Relationship, and field values for the Business Object to create or update. </param>
        /// <returns>ApiResponse of RelatedSaveResponse</returns>
        public ApiResponse< RelatedSaveResponse > BusinessObjectSaveRelatedBusinessObjectV1WithHttpInfo (RelatedSaveRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling BusinessObjectApi->BusinessObjectSaveRelatedBusinessObjectV1");

            var localVarPath = "/api/V1/saverelatedbusinessobject";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectSaveRelatedBusinessObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RelatedSaveResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RelatedSaveResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RelatedSaveResponse)));
        }

        /// <summary>
        /// Create or update a related Business Object Operation that creates or updates a related Business Object. To update, specify record ID or public ID. To create, leave record ID and public ID empty.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object specifying the parent the Business Object, the Relationship, and field values for the Business Object to create or update. </param>
        /// <returns>Task of RelatedSaveResponse</returns>
        public async System.Threading.Tasks.Task<RelatedSaveResponse> BusinessObjectSaveRelatedBusinessObjectV1Async (RelatedSaveRequest request)
        {
             ApiResponse<RelatedSaveResponse> localVarResponse = await BusinessObjectSaveRelatedBusinessObjectV1AsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create or update a related Business Object Operation that creates or updates a related Business Object. To update, specify record ID or public ID. To create, leave record ID and public ID empty.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Request object specifying the parent the Business Object, the Relationship, and field values for the Business Object to create or update. </param>
        /// <returns>Task of ApiResponse (RelatedSaveResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RelatedSaveResponse>> BusinessObjectSaveRelatedBusinessObjectV1AsyncWithHttpInfo (RelatedSaveRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling BusinessObjectApi->BusinessObjectSaveRelatedBusinessObjectV1");

            var localVarPath = "/api/V1/saverelatedbusinessobject";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectSaveRelatedBusinessObjectV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RelatedSaveResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RelatedSaveResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RelatedSaveResponse)));
        }

        /// <summary>
        /// UnLink related Business Objects Operation to unlink related Business Objects.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object.</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to unlink.</param>
        /// <param name="busobid">Specify the Business Object ID of the Business Object to be unlinked.</param>
        /// <param name="busobrecid">Specify the Business Object record ID of the Business Object to be unlinked.</param>
        /// <returns>RelatedBusinessObjectResponse</returns>
        public RelatedBusinessObjectResponse BusinessObjectUnLinkRelatedBusinessObjectByRecIdV1 (string parentbusobid, string parentbusobrecid, string relationshipid, string busobid, string busobrecid)
        {
             ApiResponse<RelatedBusinessObjectResponse> localVarResponse = BusinessObjectUnLinkRelatedBusinessObjectByRecIdV1WithHttpInfo(parentbusobid, parentbusobrecid, relationshipid, busobid, busobrecid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// UnLink related Business Objects Operation to unlink related Business Objects.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object.</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to unlink.</param>
        /// <param name="busobid">Specify the Business Object ID of the Business Object to be unlinked.</param>
        /// <param name="busobrecid">Specify the Business Object record ID of the Business Object to be unlinked.</param>
        /// <returns>ApiResponse of RelatedBusinessObjectResponse</returns>
        public ApiResponse< RelatedBusinessObjectResponse > BusinessObjectUnLinkRelatedBusinessObjectByRecIdV1WithHttpInfo (string parentbusobid, string parentbusobrecid, string relationshipid, string busobid, string busobrecid)
        {
            // verify the required parameter 'parentbusobid' is set
            if (parentbusobid == null)
                throw new ApiException(400, "Missing required parameter 'parentbusobid' when calling BusinessObjectApi->BusinessObjectUnLinkRelatedBusinessObjectByRecIdV1");
            // verify the required parameter 'parentbusobrecid' is set
            if (parentbusobrecid == null)
                throw new ApiException(400, "Missing required parameter 'parentbusobrecid' when calling BusinessObjectApi->BusinessObjectUnLinkRelatedBusinessObjectByRecIdV1");
            // verify the required parameter 'relationshipid' is set
            if (relationshipid == null)
                throw new ApiException(400, "Missing required parameter 'relationshipid' when calling BusinessObjectApi->BusinessObjectUnLinkRelatedBusinessObjectByRecIdV1");
            // verify the required parameter 'busobid' is set
            if (busobid == null)
                throw new ApiException(400, "Missing required parameter 'busobid' when calling BusinessObjectApi->BusinessObjectUnLinkRelatedBusinessObjectByRecIdV1");
            // verify the required parameter 'busobrecid' is set
            if (busobrecid == null)
                throw new ApiException(400, "Missing required parameter 'busobrecid' when calling BusinessObjectApi->BusinessObjectUnLinkRelatedBusinessObjectByRecIdV1");

            var localVarPath = "/api/V1/unlinkrelatedbusinessobject/parentbusobid/{parentbusobid}/parentbusobrecid/{parentbusobrecid}/relationshipid/{relationshipid}/busobid/{busobid}/busobrecid/{busobrecid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parentbusobid != null) localVarPathParams.Add("parentbusobid", Configuration.ApiClient.ParameterToString(parentbusobid)); // path parameter
            if (parentbusobrecid != null) localVarPathParams.Add("parentbusobrecid", Configuration.ApiClient.ParameterToString(parentbusobrecid)); // path parameter
            if (relationshipid != null) localVarPathParams.Add("relationshipid", Configuration.ApiClient.ParameterToString(relationshipid)); // path parameter
            if (busobid != null) localVarPathParams.Add("busobid", Configuration.ApiClient.ParameterToString(busobid)); // path parameter
            if (busobrecid != null) localVarPathParams.Add("busobrecid", Configuration.ApiClient.ParameterToString(busobrecid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectUnLinkRelatedBusinessObjectByRecIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RelatedBusinessObjectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RelatedBusinessObjectResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RelatedBusinessObjectResponse)));
        }

        /// <summary>
        /// UnLink related Business Objects Operation to unlink related Business Objects.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object.</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to unlink.</param>
        /// <param name="busobid">Specify the Business Object ID of the Business Object to be unlinked.</param>
        /// <param name="busobrecid">Specify the Business Object record ID of the Business Object to be unlinked.</param>
        /// <returns>Task of RelatedBusinessObjectResponse</returns>
        public async System.Threading.Tasks.Task<RelatedBusinessObjectResponse> BusinessObjectUnLinkRelatedBusinessObjectByRecIdV1Async (string parentbusobid, string parentbusobrecid, string relationshipid, string busobid, string busobrecid)
        {
             ApiResponse<RelatedBusinessObjectResponse> localVarResponse = await BusinessObjectUnLinkRelatedBusinessObjectByRecIdV1AsyncWithHttpInfo(parentbusobid, parentbusobrecid, relationshipid, busobid, busobrecid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// UnLink related Business Objects Operation to unlink related Business Objects.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentbusobid">Specify the Business Object ID for the parent Business Object.</param>
        /// <param name="parentbusobrecid">Specify the record ID for the parent Business Object.</param>
        /// <param name="relationshipid">Specify the Relationship ID for the related Business Object you want to unlink.</param>
        /// <param name="busobid">Specify the Business Object ID of the Business Object to be unlinked.</param>
        /// <param name="busobrecid">Specify the Business Object record ID of the Business Object to be unlinked.</param>
        /// <returns>Task of ApiResponse (RelatedBusinessObjectResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RelatedBusinessObjectResponse>> BusinessObjectUnLinkRelatedBusinessObjectByRecIdV1AsyncWithHttpInfo (string parentbusobid, string parentbusobrecid, string relationshipid, string busobid, string busobrecid)
        {
            // verify the required parameter 'parentbusobid' is set
            if (parentbusobid == null)
                throw new ApiException(400, "Missing required parameter 'parentbusobid' when calling BusinessObjectApi->BusinessObjectUnLinkRelatedBusinessObjectByRecIdV1");
            // verify the required parameter 'parentbusobrecid' is set
            if (parentbusobrecid == null)
                throw new ApiException(400, "Missing required parameter 'parentbusobrecid' when calling BusinessObjectApi->BusinessObjectUnLinkRelatedBusinessObjectByRecIdV1");
            // verify the required parameter 'relationshipid' is set
            if (relationshipid == null)
                throw new ApiException(400, "Missing required parameter 'relationshipid' when calling BusinessObjectApi->BusinessObjectUnLinkRelatedBusinessObjectByRecIdV1");
            // verify the required parameter 'busobid' is set
            if (busobid == null)
                throw new ApiException(400, "Missing required parameter 'busobid' when calling BusinessObjectApi->BusinessObjectUnLinkRelatedBusinessObjectByRecIdV1");
            // verify the required parameter 'busobrecid' is set
            if (busobrecid == null)
                throw new ApiException(400, "Missing required parameter 'busobrecid' when calling BusinessObjectApi->BusinessObjectUnLinkRelatedBusinessObjectByRecIdV1");

            var localVarPath = "/api/V1/unlinkrelatedbusinessobject/parentbusobid/{parentbusobid}/parentbusobrecid/{parentbusobrecid}/relationshipid/{relationshipid}/busobid/{busobid}/busobrecid/{busobrecid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parentbusobid != null) localVarPathParams.Add("parentbusobid", Configuration.ApiClient.ParameterToString(parentbusobid)); // path parameter
            if (parentbusobrecid != null) localVarPathParams.Add("parentbusobrecid", Configuration.ApiClient.ParameterToString(parentbusobrecid)); // path parameter
            if (relationshipid != null) localVarPathParams.Add("relationshipid", Configuration.ApiClient.ParameterToString(relationshipid)); // path parameter
            if (busobid != null) localVarPathParams.Add("busobid", Configuration.ApiClient.ParameterToString(busobid)); // path parameter
            if (busobrecid != null) localVarPathParams.Add("busobrecid", Configuration.ApiClient.ParameterToString(busobrecid)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectUnLinkRelatedBusinessObjectByRecIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RelatedBusinessObjectResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RelatedBusinessObjectResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RelatedBusinessObjectResponse)));
        }

        /// <summary>
        /// Upload an attachment by Business Object ID and public ID Operation to upload an attachment to a Business Object record using a Business Object ID and public ID. The body of the request is the byte array of the file part being uploaded.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="filename">Specify the name of the file being uploaded. If no attachment name is provided, the file name is used.</param>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="publicid">Specify the Business Object public ID  to attach the file to.</param>
        /// <param name="offset">The offset is the starting index of the file part being uploaded.  If this is the first part then the offset will be zero.</param>
        /// <param name="totalsize">The entire file size in bytes.</param>
        /// <param name="attachmentid">Specify the attachment ID of an uploaded file to upload subsequent parts and ensure each part gets appended to the parts that have already been uploaded. (optional)</param>
        /// <param name="displaytext">Specify the attachment name, which is the display text for the attachment record. (optional)</param>
        /// <returns>string</returns>
        public string BusinessObjectUploadBusinessObjectAttachmentByIdAndPublicIdV1 (byte[] body, string filename, string busobid, string publicid, int? offset, int? totalsize, string attachmentid = null, string displaytext = null)
        {
             ApiResponse<string> localVarResponse = BusinessObjectUploadBusinessObjectAttachmentByIdAndPublicIdV1WithHttpInfo(body, filename, busobid, publicid, offset, totalsize, attachmentid, displaytext);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload an attachment by Business Object ID and public ID Operation to upload an attachment to a Business Object record using a Business Object ID and public ID. The body of the request is the byte array of the file part being uploaded.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="filename">Specify the name of the file being uploaded. If no attachment name is provided, the file name is used.</param>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="publicid">Specify the Business Object public ID  to attach the file to.</param>
        /// <param name="offset">The offset is the starting index of the file part being uploaded.  If this is the first part then the offset will be zero.</param>
        /// <param name="totalsize">The entire file size in bytes.</param>
        /// <param name="attachmentid">Specify the attachment ID of an uploaded file to upload subsequent parts and ensure each part gets appended to the parts that have already been uploaded. (optional)</param>
        /// <param name="displaytext">Specify the attachment name, which is the display text for the attachment record. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > BusinessObjectUploadBusinessObjectAttachmentByIdAndPublicIdV1WithHttpInfo (byte[] body, string filename, string busobid, string publicid, int? offset, int? totalsize, string attachmentid = null, string displaytext = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByIdAndPublicIdV1");
            // verify the required parameter 'filename' is set
            if (filename == null)
                throw new ApiException(400, "Missing required parameter 'filename' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByIdAndPublicIdV1");
            // verify the required parameter 'busobid' is set
            if (busobid == null)
                throw new ApiException(400, "Missing required parameter 'busobid' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByIdAndPublicIdV1");
            // verify the required parameter 'publicid' is set
            if (publicid == null)
                throw new ApiException(400, "Missing required parameter 'publicid' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByIdAndPublicIdV1");
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByIdAndPublicIdV1");
            // verify the required parameter 'totalsize' is set
            if (totalsize == null)
                throw new ApiException(400, "Missing required parameter 'totalsize' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByIdAndPublicIdV1");

            var localVarPath = "/api/V1/uploadbusinessobjectattachment/filename/{filename}/busobid/{busobid}/publicid/{publicid}/offset/{offset}/totalsize/{totalsize}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filename != null) localVarPathParams.Add("filename", Configuration.ApiClient.ParameterToString(filename)); // path parameter
            if (busobid != null) localVarPathParams.Add("busobid", Configuration.ApiClient.ParameterToString(busobid)); // path parameter
            if (publicid != null) localVarPathParams.Add("publicid", Configuration.ApiClient.ParameterToString(publicid)); // path parameter
            if (offset != null) localVarPathParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // path parameter
            if (totalsize != null) localVarPathParams.Add("totalsize", Configuration.ApiClient.ParameterToString(totalsize)); // path parameter
            if (attachmentid != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "attachmentid", attachmentid)); // query parameter
            if (displaytext != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "displaytext", displaytext)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectUploadBusinessObjectAttachmentByIdAndPublicIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Upload an attachment by Business Object ID and public ID Operation to upload an attachment to a Business Object record using a Business Object ID and public ID. The body of the request is the byte array of the file part being uploaded.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="filename">Specify the name of the file being uploaded. If no attachment name is provided, the file name is used.</param>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="publicid">Specify the Business Object public ID  to attach the file to.</param>
        /// <param name="offset">The offset is the starting index of the file part being uploaded.  If this is the first part then the offset will be zero.</param>
        /// <param name="totalsize">The entire file size in bytes.</param>
        /// <param name="attachmentid">Specify the attachment ID of an uploaded file to upload subsequent parts and ensure each part gets appended to the parts that have already been uploaded. (optional)</param>
        /// <param name="displaytext">Specify the attachment name, which is the display text for the attachment record. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> BusinessObjectUploadBusinessObjectAttachmentByIdAndPublicIdV1Async (byte[] body, string filename, string busobid, string publicid, int? offset, int? totalsize, string attachmentid = null, string displaytext = null)
        {
             ApiResponse<string> localVarResponse = await BusinessObjectUploadBusinessObjectAttachmentByIdAndPublicIdV1AsyncWithHttpInfo(body, filename, busobid, publicid, offset, totalsize, attachmentid, displaytext);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload an attachment by Business Object ID and public ID Operation to upload an attachment to a Business Object record using a Business Object ID and public ID. The body of the request is the byte array of the file part being uploaded.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="filename">Specify the name of the file being uploaded. If no attachment name is provided, the file name is used.</param>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="publicid">Specify the Business Object public ID  to attach the file to.</param>
        /// <param name="offset">The offset is the starting index of the file part being uploaded.  If this is the first part then the offset will be zero.</param>
        /// <param name="totalsize">The entire file size in bytes.</param>
        /// <param name="attachmentid">Specify the attachment ID of an uploaded file to upload subsequent parts and ensure each part gets appended to the parts that have already been uploaded. (optional)</param>
        /// <param name="displaytext">Specify the attachment name, which is the display text for the attachment record. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> BusinessObjectUploadBusinessObjectAttachmentByIdAndPublicIdV1AsyncWithHttpInfo (byte[] body, string filename, string busobid, string publicid, int? offset, int? totalsize, string attachmentid = null, string displaytext = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByIdAndPublicIdV1");
            // verify the required parameter 'filename' is set
            if (filename == null)
                throw new ApiException(400, "Missing required parameter 'filename' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByIdAndPublicIdV1");
            // verify the required parameter 'busobid' is set
            if (busobid == null)
                throw new ApiException(400, "Missing required parameter 'busobid' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByIdAndPublicIdV1");
            // verify the required parameter 'publicid' is set
            if (publicid == null)
                throw new ApiException(400, "Missing required parameter 'publicid' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByIdAndPublicIdV1");
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByIdAndPublicIdV1");
            // verify the required parameter 'totalsize' is set
            if (totalsize == null)
                throw new ApiException(400, "Missing required parameter 'totalsize' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByIdAndPublicIdV1");

            var localVarPath = "/api/V1/uploadbusinessobjectattachment/filename/{filename}/busobid/{busobid}/publicid/{publicid}/offset/{offset}/totalsize/{totalsize}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filename != null) localVarPathParams.Add("filename", Configuration.ApiClient.ParameterToString(filename)); // path parameter
            if (busobid != null) localVarPathParams.Add("busobid", Configuration.ApiClient.ParameterToString(busobid)); // path parameter
            if (publicid != null) localVarPathParams.Add("publicid", Configuration.ApiClient.ParameterToString(publicid)); // path parameter
            if (offset != null) localVarPathParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // path parameter
            if (totalsize != null) localVarPathParams.Add("totalsize", Configuration.ApiClient.ParameterToString(totalsize)); // path parameter
            if (attachmentid != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "attachmentid", attachmentid)); // query parameter
            if (displaytext != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "displaytext", displaytext)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectUploadBusinessObjectAttachmentByIdAndPublicIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Upload an attachment by Business Object ID and record ID Operation to upload an attachment to a Business Object record using a Business Object ID and record ID. The body of the request is the byte array of the file part being uploaded.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="filename">Specify the name of the file being uploaded. If no attachment name is provided, the file name is used.</param>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid">Specify the Business Object record ID to attach the file to.</param>
        /// <param name="offset">The offset is the starting index of the file part being uploaded.  If this is the first part then the offset will be zero.</param>
        /// <param name="totalsize">The entire file size in bytes.</param>
        /// <param name="attachmentid">Specify the attachment ID of an uploaded file to upload subsequent parts and ensure each part gets appended to the parts that have already been uploaded. (optional)</param>
        /// <param name="displaytext">Specify the attachment name, which is the display text for the attachment record. (optional)</param>
        /// <returns>string</returns>
        public string BusinessObjectUploadBusinessObjectAttachmentByIdAndRecIdV1 (byte[] body, string filename, string busobid, string busobrecid, int? offset, int? totalsize, string attachmentid = null, string displaytext = null)
        {
             ApiResponse<string> localVarResponse = BusinessObjectUploadBusinessObjectAttachmentByIdAndRecIdV1WithHttpInfo(body, filename, busobid, busobrecid, offset, totalsize, attachmentid, displaytext);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload an attachment by Business Object ID and record ID Operation to upload an attachment to a Business Object record using a Business Object ID and record ID. The body of the request is the byte array of the file part being uploaded.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="filename">Specify the name of the file being uploaded. If no attachment name is provided, the file name is used.</param>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid">Specify the Business Object record ID to attach the file to.</param>
        /// <param name="offset">The offset is the starting index of the file part being uploaded.  If this is the first part then the offset will be zero.</param>
        /// <param name="totalsize">The entire file size in bytes.</param>
        /// <param name="attachmentid">Specify the attachment ID of an uploaded file to upload subsequent parts and ensure each part gets appended to the parts that have already been uploaded. (optional)</param>
        /// <param name="displaytext">Specify the attachment name, which is the display text for the attachment record. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > BusinessObjectUploadBusinessObjectAttachmentByIdAndRecIdV1WithHttpInfo (byte[] body, string filename, string busobid, string busobrecid, int? offset, int? totalsize, string attachmentid = null, string displaytext = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByIdAndRecIdV1");
            // verify the required parameter 'filename' is set
            if (filename == null)
                throw new ApiException(400, "Missing required parameter 'filename' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByIdAndRecIdV1");
            // verify the required parameter 'busobid' is set
            if (busobid == null)
                throw new ApiException(400, "Missing required parameter 'busobid' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByIdAndRecIdV1");
            // verify the required parameter 'busobrecid' is set
            if (busobrecid == null)
                throw new ApiException(400, "Missing required parameter 'busobrecid' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByIdAndRecIdV1");
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByIdAndRecIdV1");
            // verify the required parameter 'totalsize' is set
            if (totalsize == null)
                throw new ApiException(400, "Missing required parameter 'totalsize' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByIdAndRecIdV1");

            var localVarPath = "/api/V1/uploadbusinessobjectattachment/filename/{filename}/busobid/{busobid}/busobrecid/{busobrecid}/offset/{offset}/totalsize/{totalsize}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filename != null) localVarPathParams.Add("filename", Configuration.ApiClient.ParameterToString(filename)); // path parameter
            if (busobid != null) localVarPathParams.Add("busobid", Configuration.ApiClient.ParameterToString(busobid)); // path parameter
            if (busobrecid != null) localVarPathParams.Add("busobrecid", Configuration.ApiClient.ParameterToString(busobrecid)); // path parameter
            if (offset != null) localVarPathParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // path parameter
            if (totalsize != null) localVarPathParams.Add("totalsize", Configuration.ApiClient.ParameterToString(totalsize)); // path parameter
            if (attachmentid != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "attachmentid", attachmentid)); // query parameter
            if (displaytext != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "displaytext", displaytext)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectUploadBusinessObjectAttachmentByIdAndRecIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Upload an attachment by Business Object ID and record ID Operation to upload an attachment to a Business Object record using a Business Object ID and record ID. The body of the request is the byte array of the file part being uploaded.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="filename">Specify the name of the file being uploaded. If no attachment name is provided, the file name is used.</param>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid">Specify the Business Object record ID to attach the file to.</param>
        /// <param name="offset">The offset is the starting index of the file part being uploaded.  If this is the first part then the offset will be zero.</param>
        /// <param name="totalsize">The entire file size in bytes.</param>
        /// <param name="attachmentid">Specify the attachment ID of an uploaded file to upload subsequent parts and ensure each part gets appended to the parts that have already been uploaded. (optional)</param>
        /// <param name="displaytext">Specify the attachment name, which is the display text for the attachment record. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> BusinessObjectUploadBusinessObjectAttachmentByIdAndRecIdV1Async (byte[] body, string filename, string busobid, string busobrecid, int? offset, int? totalsize, string attachmentid = null, string displaytext = null)
        {
             ApiResponse<string> localVarResponse = await BusinessObjectUploadBusinessObjectAttachmentByIdAndRecIdV1AsyncWithHttpInfo(body, filename, busobid, busobrecid, offset, totalsize, attachmentid, displaytext);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload an attachment by Business Object ID and record ID Operation to upload an attachment to a Business Object record using a Business Object ID and record ID. The body of the request is the byte array of the file part being uploaded.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="filename">Specify the name of the file being uploaded. If no attachment name is provided, the file name is used.</param>
        /// <param name="busobid">Specify the Business Object ID.</param>
        /// <param name="busobrecid">Specify the Business Object record ID to attach the file to.</param>
        /// <param name="offset">The offset is the starting index of the file part being uploaded.  If this is the first part then the offset will be zero.</param>
        /// <param name="totalsize">The entire file size in bytes.</param>
        /// <param name="attachmentid">Specify the attachment ID of an uploaded file to upload subsequent parts and ensure each part gets appended to the parts that have already been uploaded. (optional)</param>
        /// <param name="displaytext">Specify the attachment name, which is the display text for the attachment record. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> BusinessObjectUploadBusinessObjectAttachmentByIdAndRecIdV1AsyncWithHttpInfo (byte[] body, string filename, string busobid, string busobrecid, int? offset, int? totalsize, string attachmentid = null, string displaytext = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByIdAndRecIdV1");
            // verify the required parameter 'filename' is set
            if (filename == null)
                throw new ApiException(400, "Missing required parameter 'filename' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByIdAndRecIdV1");
            // verify the required parameter 'busobid' is set
            if (busobid == null)
                throw new ApiException(400, "Missing required parameter 'busobid' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByIdAndRecIdV1");
            // verify the required parameter 'busobrecid' is set
            if (busobrecid == null)
                throw new ApiException(400, "Missing required parameter 'busobrecid' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByIdAndRecIdV1");
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByIdAndRecIdV1");
            // verify the required parameter 'totalsize' is set
            if (totalsize == null)
                throw new ApiException(400, "Missing required parameter 'totalsize' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByIdAndRecIdV1");

            var localVarPath = "/api/V1/uploadbusinessobjectattachment/filename/{filename}/busobid/{busobid}/busobrecid/{busobrecid}/offset/{offset}/totalsize/{totalsize}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filename != null) localVarPathParams.Add("filename", Configuration.ApiClient.ParameterToString(filename)); // path parameter
            if (busobid != null) localVarPathParams.Add("busobid", Configuration.ApiClient.ParameterToString(busobid)); // path parameter
            if (busobrecid != null) localVarPathParams.Add("busobrecid", Configuration.ApiClient.ParameterToString(busobrecid)); // path parameter
            if (offset != null) localVarPathParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // path parameter
            if (totalsize != null) localVarPathParams.Add("totalsize", Configuration.ApiClient.ParameterToString(totalsize)); // path parameter
            if (attachmentid != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "attachmentid", attachmentid)); // query parameter
            if (displaytext != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "displaytext", displaytext)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectUploadBusinessObjectAttachmentByIdAndRecIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Upload an attachment by Business Object name and public ID Operation to upload an attachment to a Business Object record using a Business Object name and public ID. The body of the request is the byte array of the file part being uploaded.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="filename">Specify the name of the file being uploaded. If no attachment name is provided, the file name is used.</param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="publicid">Specify the Business Object public ID  to attach the file to.</param>
        /// <param name="offset">The offset is the starting index of the file part being uploaded.  If this is the first part then the offset will be zero.</param>
        /// <param name="totalsize">The entire file size in bytes.</param>
        /// <param name="attachmentid">Specify the attachment ID of an uploaded file to upload subsequent parts and ensure each part gets appended to the parts that have already been uploaded. (optional)</param>
        /// <param name="displaytext">Specify the attachment name, which is the display text for the attachment record. (optional)</param>
        /// <returns>string</returns>
        public string BusinessObjectUploadBusinessObjectAttachmentByNameAndPublicIdV1 (byte[] body, string filename, string busobname, string publicid, int? offset, int? totalsize, string attachmentid = null, string displaytext = null)
        {
             ApiResponse<string> localVarResponse = BusinessObjectUploadBusinessObjectAttachmentByNameAndPublicIdV1WithHttpInfo(body, filename, busobname, publicid, offset, totalsize, attachmentid, displaytext);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload an attachment by Business Object name and public ID Operation to upload an attachment to a Business Object record using a Business Object name and public ID. The body of the request is the byte array of the file part being uploaded.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="filename">Specify the name of the file being uploaded. If no attachment name is provided, the file name is used.</param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="publicid">Specify the Business Object public ID  to attach the file to.</param>
        /// <param name="offset">The offset is the starting index of the file part being uploaded.  If this is the first part then the offset will be zero.</param>
        /// <param name="totalsize">The entire file size in bytes.</param>
        /// <param name="attachmentid">Specify the attachment ID of an uploaded file to upload subsequent parts and ensure each part gets appended to the parts that have already been uploaded. (optional)</param>
        /// <param name="displaytext">Specify the attachment name, which is the display text for the attachment record. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > BusinessObjectUploadBusinessObjectAttachmentByNameAndPublicIdV1WithHttpInfo (byte[] body, string filename, string busobname, string publicid, int? offset, int? totalsize, string attachmentid = null, string displaytext = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByNameAndPublicIdV1");
            // verify the required parameter 'filename' is set
            if (filename == null)
                throw new ApiException(400, "Missing required parameter 'filename' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByNameAndPublicIdV1");
            // verify the required parameter 'busobname' is set
            if (busobname == null)
                throw new ApiException(400, "Missing required parameter 'busobname' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByNameAndPublicIdV1");
            // verify the required parameter 'publicid' is set
            if (publicid == null)
                throw new ApiException(400, "Missing required parameter 'publicid' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByNameAndPublicIdV1");
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByNameAndPublicIdV1");
            // verify the required parameter 'totalsize' is set
            if (totalsize == null)
                throw new ApiException(400, "Missing required parameter 'totalsize' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByNameAndPublicIdV1");

            var localVarPath = "/api/V1/uploadbusinessobjectattachment/filename/{filename}/busobname/{busobname}/publicid/{publicid}/offset/{offset}/totalsize/{totalsize}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filename != null) localVarPathParams.Add("filename", Configuration.ApiClient.ParameterToString(filename)); // path parameter
            if (busobname != null) localVarPathParams.Add("busobname", Configuration.ApiClient.ParameterToString(busobname)); // path parameter
            if (publicid != null) localVarPathParams.Add("publicid", Configuration.ApiClient.ParameterToString(publicid)); // path parameter
            if (offset != null) localVarPathParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // path parameter
            if (totalsize != null) localVarPathParams.Add("totalsize", Configuration.ApiClient.ParameterToString(totalsize)); // path parameter
            if (attachmentid != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "attachmentid", attachmentid)); // query parameter
            if (displaytext != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "displaytext", displaytext)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectUploadBusinessObjectAttachmentByNameAndPublicIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Upload an attachment by Business Object name and public ID Operation to upload an attachment to a Business Object record using a Business Object name and public ID. The body of the request is the byte array of the file part being uploaded.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="filename">Specify the name of the file being uploaded. If no attachment name is provided, the file name is used.</param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="publicid">Specify the Business Object public ID  to attach the file to.</param>
        /// <param name="offset">The offset is the starting index of the file part being uploaded.  If this is the first part then the offset will be zero.</param>
        /// <param name="totalsize">The entire file size in bytes.</param>
        /// <param name="attachmentid">Specify the attachment ID of an uploaded file to upload subsequent parts and ensure each part gets appended to the parts that have already been uploaded. (optional)</param>
        /// <param name="displaytext">Specify the attachment name, which is the display text for the attachment record. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> BusinessObjectUploadBusinessObjectAttachmentByNameAndPublicIdV1Async (byte[] body, string filename, string busobname, string publicid, int? offset, int? totalsize, string attachmentid = null, string displaytext = null)
        {
             ApiResponse<string> localVarResponse = await BusinessObjectUploadBusinessObjectAttachmentByNameAndPublicIdV1AsyncWithHttpInfo(body, filename, busobname, publicid, offset, totalsize, attachmentid, displaytext);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload an attachment by Business Object name and public ID Operation to upload an attachment to a Business Object record using a Business Object name and public ID. The body of the request is the byte array of the file part being uploaded.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="filename">Specify the name of the file being uploaded. If no attachment name is provided, the file name is used.</param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="publicid">Specify the Business Object public ID  to attach the file to.</param>
        /// <param name="offset">The offset is the starting index of the file part being uploaded.  If this is the first part then the offset will be zero.</param>
        /// <param name="totalsize">The entire file size in bytes.</param>
        /// <param name="attachmentid">Specify the attachment ID of an uploaded file to upload subsequent parts and ensure each part gets appended to the parts that have already been uploaded. (optional)</param>
        /// <param name="displaytext">Specify the attachment name, which is the display text for the attachment record. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> BusinessObjectUploadBusinessObjectAttachmentByNameAndPublicIdV1AsyncWithHttpInfo (byte[] body, string filename, string busobname, string publicid, int? offset, int? totalsize, string attachmentid = null, string displaytext = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByNameAndPublicIdV1");
            // verify the required parameter 'filename' is set
            if (filename == null)
                throw new ApiException(400, "Missing required parameter 'filename' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByNameAndPublicIdV1");
            // verify the required parameter 'busobname' is set
            if (busobname == null)
                throw new ApiException(400, "Missing required parameter 'busobname' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByNameAndPublicIdV1");
            // verify the required parameter 'publicid' is set
            if (publicid == null)
                throw new ApiException(400, "Missing required parameter 'publicid' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByNameAndPublicIdV1");
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByNameAndPublicIdV1");
            // verify the required parameter 'totalsize' is set
            if (totalsize == null)
                throw new ApiException(400, "Missing required parameter 'totalsize' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByNameAndPublicIdV1");

            var localVarPath = "/api/V1/uploadbusinessobjectattachment/filename/{filename}/busobname/{busobname}/publicid/{publicid}/offset/{offset}/totalsize/{totalsize}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filename != null) localVarPathParams.Add("filename", Configuration.ApiClient.ParameterToString(filename)); // path parameter
            if (busobname != null) localVarPathParams.Add("busobname", Configuration.ApiClient.ParameterToString(busobname)); // path parameter
            if (publicid != null) localVarPathParams.Add("publicid", Configuration.ApiClient.ParameterToString(publicid)); // path parameter
            if (offset != null) localVarPathParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // path parameter
            if (totalsize != null) localVarPathParams.Add("totalsize", Configuration.ApiClient.ParameterToString(totalsize)); // path parameter
            if (attachmentid != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "attachmentid", attachmentid)); // query parameter
            if (displaytext != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "displaytext", displaytext)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectUploadBusinessObjectAttachmentByNameAndPublicIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Upload an attachment by Business Object name and record ID Operation to upload an attachment to a Business Object record using a Business Object name and record ID. The body of the request is the byte array of the file part being uploaded.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="filename">Specify the name of the file being uploaded. If no attachment name is provided, the file name is used.</param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="busobrecid">Specify the Business Object record ID to attach the file to.</param>
        /// <param name="offset">The offset is the starting index of the file part being uploaded.  If this is the first part then the offset will be zero.</param>
        /// <param name="totalsize">The entire file size in bytes.</param>
        /// <param name="attachmentid">Specify the attachment ID of an uploaded file to upload subsequent parts and ensure each part gets appended to the parts that have already been uploaded. (optional)</param>
        /// <param name="displaytext">Specify the attachment name, which is the display text for the attachment record. (optional)</param>
        /// <returns>string</returns>
        public string BusinessObjectUploadBusinessObjectAttachmentByNameAndRecIdV1 (byte[] body, string filename, string busobname, string busobrecid, int? offset, int? totalsize, string attachmentid = null, string displaytext = null)
        {
             ApiResponse<string> localVarResponse = BusinessObjectUploadBusinessObjectAttachmentByNameAndRecIdV1WithHttpInfo(body, filename, busobname, busobrecid, offset, totalsize, attachmentid, displaytext);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload an attachment by Business Object name and record ID Operation to upload an attachment to a Business Object record using a Business Object name and record ID. The body of the request is the byte array of the file part being uploaded.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="filename">Specify the name of the file being uploaded. If no attachment name is provided, the file name is used.</param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="busobrecid">Specify the Business Object record ID to attach the file to.</param>
        /// <param name="offset">The offset is the starting index of the file part being uploaded.  If this is the first part then the offset will be zero.</param>
        /// <param name="totalsize">The entire file size in bytes.</param>
        /// <param name="attachmentid">Specify the attachment ID of an uploaded file to upload subsequent parts and ensure each part gets appended to the parts that have already been uploaded. (optional)</param>
        /// <param name="displaytext">Specify the attachment name, which is the display text for the attachment record. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > BusinessObjectUploadBusinessObjectAttachmentByNameAndRecIdV1WithHttpInfo (byte[] body, string filename, string busobname, string busobrecid, int? offset, int? totalsize, string attachmentid = null, string displaytext = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByNameAndRecIdV1");
            // verify the required parameter 'filename' is set
            if (filename == null)
                throw new ApiException(400, "Missing required parameter 'filename' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByNameAndRecIdV1");
            // verify the required parameter 'busobname' is set
            if (busobname == null)
                throw new ApiException(400, "Missing required parameter 'busobname' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByNameAndRecIdV1");
            // verify the required parameter 'busobrecid' is set
            if (busobrecid == null)
                throw new ApiException(400, "Missing required parameter 'busobrecid' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByNameAndRecIdV1");
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByNameAndRecIdV1");
            // verify the required parameter 'totalsize' is set
            if (totalsize == null)
                throw new ApiException(400, "Missing required parameter 'totalsize' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByNameAndRecIdV1");

            var localVarPath = "/api/V1/uploadbusinessobjectattachment/filename/{filename}/busobname/{busobname}/busobrecid/{busobrecid}/offset/{offset}/totalsize/{totalsize}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filename != null) localVarPathParams.Add("filename", Configuration.ApiClient.ParameterToString(filename)); // path parameter
            if (busobname != null) localVarPathParams.Add("busobname", Configuration.ApiClient.ParameterToString(busobname)); // path parameter
            if (busobrecid != null) localVarPathParams.Add("busobrecid", Configuration.ApiClient.ParameterToString(busobrecid)); // path parameter
            if (offset != null) localVarPathParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // path parameter
            if (totalsize != null) localVarPathParams.Add("totalsize", Configuration.ApiClient.ParameterToString(totalsize)); // path parameter
            if (attachmentid != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "attachmentid", attachmentid)); // query parameter
            if (displaytext != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "displaytext", displaytext)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectUploadBusinessObjectAttachmentByNameAndRecIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Upload an attachment by Business Object name and record ID Operation to upload an attachment to a Business Object record using a Business Object name and record ID. The body of the request is the byte array of the file part being uploaded.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="filename">Specify the name of the file being uploaded. If no attachment name is provided, the file name is used.</param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="busobrecid">Specify the Business Object record ID to attach the file to.</param>
        /// <param name="offset">The offset is the starting index of the file part being uploaded.  If this is the first part then the offset will be zero.</param>
        /// <param name="totalsize">The entire file size in bytes.</param>
        /// <param name="attachmentid">Specify the attachment ID of an uploaded file to upload subsequent parts and ensure each part gets appended to the parts that have already been uploaded. (optional)</param>
        /// <param name="displaytext">Specify the attachment name, which is the display text for the attachment record. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> BusinessObjectUploadBusinessObjectAttachmentByNameAndRecIdV1Async (byte[] body, string filename, string busobname, string busobrecid, int? offset, int? totalsize, string attachmentid = null, string displaytext = null)
        {
             ApiResponse<string> localVarResponse = await BusinessObjectUploadBusinessObjectAttachmentByNameAndRecIdV1AsyncWithHttpInfo(body, filename, busobname, busobrecid, offset, totalsize, attachmentid, displaytext);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload an attachment by Business Object name and record ID Operation to upload an attachment to a Business Object record using a Business Object name and record ID. The body of the request is the byte array of the file part being uploaded.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="filename">Specify the name of the file being uploaded. If no attachment name is provided, the file name is used.</param>
        /// <param name="busobname">Specify the Business Object name.</param>
        /// <param name="busobrecid">Specify the Business Object record ID to attach the file to.</param>
        /// <param name="offset">The offset is the starting index of the file part being uploaded.  If this is the first part then the offset will be zero.</param>
        /// <param name="totalsize">The entire file size in bytes.</param>
        /// <param name="attachmentid">Specify the attachment ID of an uploaded file to upload subsequent parts and ensure each part gets appended to the parts that have already been uploaded. (optional)</param>
        /// <param name="displaytext">Specify the attachment name, which is the display text for the attachment record. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> BusinessObjectUploadBusinessObjectAttachmentByNameAndRecIdV1AsyncWithHttpInfo (byte[] body, string filename, string busobname, string busobrecid, int? offset, int? totalsize, string attachmentid = null, string displaytext = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByNameAndRecIdV1");
            // verify the required parameter 'filename' is set
            if (filename == null)
                throw new ApiException(400, "Missing required parameter 'filename' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByNameAndRecIdV1");
            // verify the required parameter 'busobname' is set
            if (busobname == null)
                throw new ApiException(400, "Missing required parameter 'busobname' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByNameAndRecIdV1");
            // verify the required parameter 'busobrecid' is set
            if (busobrecid == null)
                throw new ApiException(400, "Missing required parameter 'busobrecid' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByNameAndRecIdV1");
            // verify the required parameter 'offset' is set
            if (offset == null)
                throw new ApiException(400, "Missing required parameter 'offset' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByNameAndRecIdV1");
            // verify the required parameter 'totalsize' is set
            if (totalsize == null)
                throw new ApiException(400, "Missing required parameter 'totalsize' when calling BusinessObjectApi->BusinessObjectUploadBusinessObjectAttachmentByNameAndRecIdV1");

            var localVarPath = "/api/V1/uploadbusinessobjectattachment/filename/{filename}/busobname/{busobname}/busobrecid/{busobrecid}/offset/{offset}/totalsize/{totalsize}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/octet-stream"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filename != null) localVarPathParams.Add("filename", Configuration.ApiClient.ParameterToString(filename)); // path parameter
            if (busobname != null) localVarPathParams.Add("busobname", Configuration.ApiClient.ParameterToString(busobname)); // path parameter
            if (busobrecid != null) localVarPathParams.Add("busobrecid", Configuration.ApiClient.ParameterToString(busobrecid)); // path parameter
            if (offset != null) localVarPathParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // path parameter
            if (totalsize != null) localVarPathParams.Add("totalsize", Configuration.ApiClient.ParameterToString(totalsize)); // path parameter
            if (attachmentid != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "attachmentid", attachmentid)); // query parameter
            if (displaytext != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "displaytext", displaytext)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BusinessObjectUploadBusinessObjectAttachmentByNameAndRecIdV1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
