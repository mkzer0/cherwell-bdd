/* 
 * Cherwell Rest API
 *
 * <a href=\"../../index.html\">Cherwell Rest API Documentation</a><br>Select version options from the header drop-down list (to the left of the Client Key box). Then, click Explore to view different versions of operations.
 *
 * OpenAPI spec version: 9.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// QuickSearchSpecificByIdRequest
    /// </summary>
    [DataContract]
    public partial class QuickSearchSpecificByIdRequest :  IEquatable<QuickSearchSpecificByIdRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QuickSearchSpecificByIdRequest" /> class.
        /// </summary>
        /// <param name="BusObIds">BusObIds.</param>
        /// <param name="StandIn">StandIn.</param>
        /// <param name="Ascending">Ascending.</param>
        /// <param name="NonFinalState">NonFinalState.</param>
        /// <param name="SearchAnyWords">SearchAnyWords.</param>
        /// <param name="SearchAttachments">SearchAttachments.</param>
        /// <param name="SearchRelated">SearchRelated.</param>
        /// <param name="SearchText">SearchText.</param>
        /// <param name="SelectedChangedLimit">SelectedChangedLimit.</param>
        /// <param name="SelectedSortByFieldId">SelectedSortByFieldId.</param>
        /// <param name="UseSortBy">UseSortBy.</param>
        /// <param name="SpecificSearchTargetId">SpecificSearchTargetId.</param>
        /// <param name="IsBusObTarget">IsBusObTarget.</param>
        public QuickSearchSpecificByIdRequest(List<string> BusObIds = default(List<string>), string StandIn = default(string), bool? Ascending = default(bool?), bool? NonFinalState = default(bool?), bool? SearchAnyWords = default(bool?), bool? SearchAttachments = default(bool?), bool? SearchRelated = default(bool?), string SearchText = default(string), ChangedLimit SelectedChangedLimit = default(ChangedLimit), string SelectedSortByFieldId = default(string), bool? UseSortBy = default(bool?), string SpecificSearchTargetId = default(string), bool? IsBusObTarget = default(bool?))
        {
            this.BusObIds = BusObIds;
            this.StandIn = StandIn;
            this.Ascending = Ascending;
            this.NonFinalState = NonFinalState;
            this.SearchAnyWords = SearchAnyWords;
            this.SearchAttachments = SearchAttachments;
            this.SearchRelated = SearchRelated;
            this.SearchText = SearchText;
            this.SelectedChangedLimit = SelectedChangedLimit;
            this.SelectedSortByFieldId = SelectedSortByFieldId;
            this.UseSortBy = UseSortBy;
            this.SpecificSearchTargetId = SpecificSearchTargetId;
            this.IsBusObTarget = IsBusObTarget;
        }
        
        /// <summary>
        /// Gets or Sets BusObIds
        /// </summary>
        [DataMember(Name="busObIds", EmitDefaultValue=false)]
        public List<string> BusObIds { get; set; }

        /// <summary>
        /// Gets or Sets StandIn
        /// </summary>
        [DataMember(Name="standIn", EmitDefaultValue=false)]
        public string StandIn { get; set; }

        /// <summary>
        /// Gets or Sets Ascending
        /// </summary>
        [DataMember(Name="ascending", EmitDefaultValue=false)]
        public bool? Ascending { get; set; }

        /// <summary>
        /// Gets or Sets NonFinalState
        /// </summary>
        [DataMember(Name="nonFinalState", EmitDefaultValue=false)]
        public bool? NonFinalState { get; set; }

        /// <summary>
        /// Gets or Sets SearchAnyWords
        /// </summary>
        [DataMember(Name="searchAnyWords", EmitDefaultValue=false)]
        public bool? SearchAnyWords { get; set; }

        /// <summary>
        /// Gets or Sets SearchAttachments
        /// </summary>
        [DataMember(Name="searchAttachments", EmitDefaultValue=false)]
        public bool? SearchAttachments { get; set; }

        /// <summary>
        /// Gets or Sets SearchRelated
        /// </summary>
        [DataMember(Name="searchRelated", EmitDefaultValue=false)]
        public bool? SearchRelated { get; set; }

        /// <summary>
        /// Gets or Sets SearchText
        /// </summary>
        [DataMember(Name="searchText", EmitDefaultValue=false)]
        public string SearchText { get; set; }

        /// <summary>
        /// Gets or Sets SelectedChangedLimit
        /// </summary>
        [DataMember(Name="selectedChangedLimit", EmitDefaultValue=false)]
        public ChangedLimit SelectedChangedLimit { get; set; }

        /// <summary>
        /// Gets or Sets SelectedSortByFieldId
        /// </summary>
        [DataMember(Name="selectedSortByFieldId", EmitDefaultValue=false)]
        public string SelectedSortByFieldId { get; set; }

        /// <summary>
        /// Gets or Sets UseSortBy
        /// </summary>
        [DataMember(Name="useSortBy", EmitDefaultValue=false)]
        public bool? UseSortBy { get; set; }

        /// <summary>
        /// Gets or Sets SpecificSearchTargetId
        /// </summary>
        [DataMember(Name="specificSearchTargetId", EmitDefaultValue=false)]
        public string SpecificSearchTargetId { get; set; }

        /// <summary>
        /// Gets or Sets IsBusObTarget
        /// </summary>
        [DataMember(Name="isBusObTarget", EmitDefaultValue=false)]
        public bool? IsBusObTarget { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QuickSearchSpecificByIdRequest {\n");
            sb.Append("  BusObIds: ").Append(BusObIds).Append("\n");
            sb.Append("  StandIn: ").Append(StandIn).Append("\n");
            sb.Append("  Ascending: ").Append(Ascending).Append("\n");
            sb.Append("  NonFinalState: ").Append(NonFinalState).Append("\n");
            sb.Append("  SearchAnyWords: ").Append(SearchAnyWords).Append("\n");
            sb.Append("  SearchAttachments: ").Append(SearchAttachments).Append("\n");
            sb.Append("  SearchRelated: ").Append(SearchRelated).Append("\n");
            sb.Append("  SearchText: ").Append(SearchText).Append("\n");
            sb.Append("  SelectedChangedLimit: ").Append(SelectedChangedLimit).Append("\n");
            sb.Append("  SelectedSortByFieldId: ").Append(SelectedSortByFieldId).Append("\n");
            sb.Append("  UseSortBy: ").Append(UseSortBy).Append("\n");
            sb.Append("  SpecificSearchTargetId: ").Append(SpecificSearchTargetId).Append("\n");
            sb.Append("  IsBusObTarget: ").Append(IsBusObTarget).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QuickSearchSpecificByIdRequest);
        }

        /// <summary>
        /// Returns true if QuickSearchSpecificByIdRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of QuickSearchSpecificByIdRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuickSearchSpecificByIdRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BusObIds == input.BusObIds ||
                    this.BusObIds != null &&
                    this.BusObIds.SequenceEqual(input.BusObIds)
                ) && 
                (
                    this.StandIn == input.StandIn ||
                    (this.StandIn != null &&
                    this.StandIn.Equals(input.StandIn))
                ) && 
                (
                    this.Ascending == input.Ascending ||
                    (this.Ascending != null &&
                    this.Ascending.Equals(input.Ascending))
                ) && 
                (
                    this.NonFinalState == input.NonFinalState ||
                    (this.NonFinalState != null &&
                    this.NonFinalState.Equals(input.NonFinalState))
                ) && 
                (
                    this.SearchAnyWords == input.SearchAnyWords ||
                    (this.SearchAnyWords != null &&
                    this.SearchAnyWords.Equals(input.SearchAnyWords))
                ) && 
                (
                    this.SearchAttachments == input.SearchAttachments ||
                    (this.SearchAttachments != null &&
                    this.SearchAttachments.Equals(input.SearchAttachments))
                ) && 
                (
                    this.SearchRelated == input.SearchRelated ||
                    (this.SearchRelated != null &&
                    this.SearchRelated.Equals(input.SearchRelated))
                ) && 
                (
                    this.SearchText == input.SearchText ||
                    (this.SearchText != null &&
                    this.SearchText.Equals(input.SearchText))
                ) && 
                (
                    this.SelectedChangedLimit == input.SelectedChangedLimit ||
                    (this.SelectedChangedLimit != null &&
                    this.SelectedChangedLimit.Equals(input.SelectedChangedLimit))
                ) && 
                (
                    this.SelectedSortByFieldId == input.SelectedSortByFieldId ||
                    (this.SelectedSortByFieldId != null &&
                    this.SelectedSortByFieldId.Equals(input.SelectedSortByFieldId))
                ) && 
                (
                    this.UseSortBy == input.UseSortBy ||
                    (this.UseSortBy != null &&
                    this.UseSortBy.Equals(input.UseSortBy))
                ) && 
                (
                    this.SpecificSearchTargetId == input.SpecificSearchTargetId ||
                    (this.SpecificSearchTargetId != null &&
                    this.SpecificSearchTargetId.Equals(input.SpecificSearchTargetId))
                ) && 
                (
                    this.IsBusObTarget == input.IsBusObTarget ||
                    (this.IsBusObTarget != null &&
                    this.IsBusObTarget.Equals(input.IsBusObTarget))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BusObIds != null)
                    hashCode = hashCode * 59 + this.BusObIds.GetHashCode();
                if (this.StandIn != null)
                    hashCode = hashCode * 59 + this.StandIn.GetHashCode();
                if (this.Ascending != null)
                    hashCode = hashCode * 59 + this.Ascending.GetHashCode();
                if (this.NonFinalState != null)
                    hashCode = hashCode * 59 + this.NonFinalState.GetHashCode();
                if (this.SearchAnyWords != null)
                    hashCode = hashCode * 59 + this.SearchAnyWords.GetHashCode();
                if (this.SearchAttachments != null)
                    hashCode = hashCode * 59 + this.SearchAttachments.GetHashCode();
                if (this.SearchRelated != null)
                    hashCode = hashCode * 59 + this.SearchRelated.GetHashCode();
                if (this.SearchText != null)
                    hashCode = hashCode * 59 + this.SearchText.GetHashCode();
                if (this.SelectedChangedLimit != null)
                    hashCode = hashCode * 59 + this.SelectedChangedLimit.GetHashCode();
                if (this.SelectedSortByFieldId != null)
                    hashCode = hashCode * 59 + this.SelectedSortByFieldId.GetHashCode();
                if (this.UseSortBy != null)
                    hashCode = hashCode * 59 + this.UseSortBy.GetHashCode();
                if (this.SpecificSearchTargetId != null)
                    hashCode = hashCode * 59 + this.SpecificSearchTargetId.GetHashCode();
                if (this.IsBusObTarget != null)
                    hashCode = hashCode * 59 + this.IsBusObTarget.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
