/* 
 * Cherwell Rest API
 *
 * <a href=\"../../index.html\">Cherwell Rest API Documentation</a><br>Select version options from the header drop-down list (to the left of the Client Key box). Then, click Explore to view different versions of operations.
 *
 * OpenAPI spec version: 9.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AttachmentsRequest
    /// </summary>
    [DataContract]
    public partial class AttachmentsRequest :  IEquatable<AttachmentsRequest>, IValidatableObject
    {
        /// <summary>
        /// Defines AttachmentTypes
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AttachmentTypesEnum
        {
            
            /// <summary>
            /// Enum Imported for value: Imported
            /// </summary>
            [EnumMember(Value = "Imported")]
            Imported = 1,
            
            /// <summary>
            /// Enum Linked for value: Linked
            /// </summary>
            [EnumMember(Value = "Linked")]
            Linked = 2,
            
            /// <summary>
            /// Enum URL for value: URL
            /// </summary>
            [EnumMember(Value = "URL")]
            URL = 3
        }


        /// <summary>
        /// Gets or Sets AttachmentTypes
        /// </summary>
        [DataMember(Name="attachmentTypes", EmitDefaultValue=false)]
        public List<AttachmentTypesEnum> AttachmentTypes { get; set; }
        /// <summary>
        /// Defines Types
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypesEnum
        {
            
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,
            
            /// <summary>
            /// Enum File for value: File
            /// </summary>
            [EnumMember(Value = "File")]
            File = 2,
            
            /// <summary>
            /// Enum FileManagerFile for value: FileManagerFile
            /// </summary>
            [EnumMember(Value = "FileManagerFile")]
            FileManagerFile = 3,
            
            /// <summary>
            /// Enum BusOb for value: BusOb
            /// </summary>
            [EnumMember(Value = "BusOb")]
            BusOb = 4,
            
            /// <summary>
            /// Enum History for value: History
            /// </summary>
            [EnumMember(Value = "History")]
            History = 5,
            
            /// <summary>
            /// Enum Other for value: Other
            /// </summary>
            [EnumMember(Value = "Other")]
            Other = 6
        }


        /// <summary>
        /// Gets or Sets Types
        /// </summary>
        [DataMember(Name="types", EmitDefaultValue=false)]
        public List<TypesEnum> Types { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentsRequest" /> class.
        /// </summary>
        /// <param name="AttachmentId">AttachmentId.</param>
        /// <param name="AttachmentTypes">AttachmentTypes.</param>
        /// <param name="BusObId">BusObId.</param>
        /// <param name="BusObName">BusObName.</param>
        /// <param name="BusObPublicId">BusObPublicId.</param>
        /// <param name="BusObRecId">BusObRecId.</param>
        /// <param name="IncludeLinks">IncludeLinks.</param>
        /// <param name="Types">Types.</param>
        public AttachmentsRequest(string AttachmentId = default(string), List<AttachmentTypesEnum> AttachmentTypes = default(List<AttachmentTypesEnum>), string BusObId = default(string), string BusObName = default(string), string BusObPublicId = default(string), string BusObRecId = default(string), bool? IncludeLinks = default(bool?), List<TypesEnum> Types = default(List<TypesEnum>))
        {
            this.AttachmentId = AttachmentId;
            this.AttachmentTypes = AttachmentTypes;
            this.BusObId = BusObId;
            this.BusObName = BusObName;
            this.BusObPublicId = BusObPublicId;
            this.BusObRecId = BusObRecId;
            this.IncludeLinks = IncludeLinks;
            this.Types = Types;
        }
        
        /// <summary>
        /// Gets or Sets AttachmentId
        /// </summary>
        [DataMember(Name="attachmentId", EmitDefaultValue=false)]
        public string AttachmentId { get; set; }


        /// <summary>
        /// Gets or Sets BusObId
        /// </summary>
        [DataMember(Name="busObId", EmitDefaultValue=false)]
        public string BusObId { get; set; }

        /// <summary>
        /// Gets or Sets BusObName
        /// </summary>
        [DataMember(Name="busObName", EmitDefaultValue=false)]
        public string BusObName { get; set; }

        /// <summary>
        /// Gets or Sets BusObPublicId
        /// </summary>
        [DataMember(Name="busObPublicId", EmitDefaultValue=false)]
        public string BusObPublicId { get; set; }

        /// <summary>
        /// Gets or Sets BusObRecId
        /// </summary>
        [DataMember(Name="busObRecId", EmitDefaultValue=false)]
        public string BusObRecId { get; set; }

        /// <summary>
        /// Gets or Sets IncludeLinks
        /// </summary>
        [DataMember(Name="includeLinks", EmitDefaultValue=false)]
        public bool? IncludeLinks { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AttachmentsRequest {\n");
            sb.Append("  AttachmentId: ").Append(AttachmentId).Append("\n");
            sb.Append("  AttachmentTypes: ").Append(AttachmentTypes).Append("\n");
            sb.Append("  BusObId: ").Append(BusObId).Append("\n");
            sb.Append("  BusObName: ").Append(BusObName).Append("\n");
            sb.Append("  BusObPublicId: ").Append(BusObPublicId).Append("\n");
            sb.Append("  BusObRecId: ").Append(BusObRecId).Append("\n");
            sb.Append("  IncludeLinks: ").Append(IncludeLinks).Append("\n");
            sb.Append("  Types: ").Append(Types).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AttachmentsRequest);
        }

        /// <summary>
        /// Returns true if AttachmentsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AttachmentsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AttachmentsRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AttachmentId == input.AttachmentId ||
                    (this.AttachmentId != null &&
                    this.AttachmentId.Equals(input.AttachmentId))
                ) && 
                (
                    this.AttachmentTypes == input.AttachmentTypes ||
                    this.AttachmentTypes != null &&
                    this.AttachmentTypes.SequenceEqual(input.AttachmentTypes)
                ) && 
                (
                    this.BusObId == input.BusObId ||
                    (this.BusObId != null &&
                    this.BusObId.Equals(input.BusObId))
                ) && 
                (
                    this.BusObName == input.BusObName ||
                    (this.BusObName != null &&
                    this.BusObName.Equals(input.BusObName))
                ) && 
                (
                    this.BusObPublicId == input.BusObPublicId ||
                    (this.BusObPublicId != null &&
                    this.BusObPublicId.Equals(input.BusObPublicId))
                ) && 
                (
                    this.BusObRecId == input.BusObRecId ||
                    (this.BusObRecId != null &&
                    this.BusObRecId.Equals(input.BusObRecId))
                ) && 
                (
                    this.IncludeLinks == input.IncludeLinks ||
                    (this.IncludeLinks != null &&
                    this.IncludeLinks.Equals(input.IncludeLinks))
                ) && 
                (
                    this.Types == input.Types ||
                    this.Types != null &&
                    this.Types.SequenceEqual(input.Types)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AttachmentId != null)
                    hashCode = hashCode * 59 + this.AttachmentId.GetHashCode();
                if (this.AttachmentTypes != null)
                    hashCode = hashCode * 59 + this.AttachmentTypes.GetHashCode();
                if (this.BusObId != null)
                    hashCode = hashCode * 59 + this.BusObId.GetHashCode();
                if (this.BusObName != null)
                    hashCode = hashCode * 59 + this.BusObName.GetHashCode();
                if (this.BusObPublicId != null)
                    hashCode = hashCode * 59 + this.BusObPublicId.GetHashCode();
                if (this.BusObRecId != null)
                    hashCode = hashCode * 59 + this.BusObRecId.GetHashCode();
                if (this.IncludeLinks != null)
                    hashCode = hashCode * 59 + this.IncludeLinks.GetHashCode();
                if (this.Types != null)
                    hashCode = hashCode * 59 + this.Types.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
