/* 
 * Cherwell Rest API
 *
 * <a href=\"../../index.html\">Cherwell Rest API Documentation</a><br>Select version options from the header drop-down list (to the left of the Client Key box). Then, click Explore to view different versions of operations.
 *
 * OpenAPI spec version: 9.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SearchFolder
    /// </summary>
    [DataContract]
    public partial class SearchFolder :  IEquatable<SearchFolder>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchFolder" /> class.
        /// </summary>
        /// <param name="Association">Association.</param>
        /// <param name="ChildFolders">ChildFolders.</param>
        /// <param name="ChildItems">ChildItems.</param>
        /// <param name="FolderId">FolderId.</param>
        /// <param name="FolderName">FolderName.</param>
        /// <param name="Links">Links.</param>
        /// <param name="LocalizedScopeName">LocalizedScopeName.</param>
        /// <param name="ParentFolderId">ParentFolderId.</param>
        /// <param name="Scope">Scope.</param>
        /// <param name="ScopeOwner">ScopeOwner.</param>
        public SearchFolder(string Association = default(string), List<SearchFolder> ChildFolders = default(List<SearchFolder>), List<SearchItem> ChildItems = default(List<SearchItem>), string FolderId = default(string), string FolderName = default(string), List<Link> Links = default(List<Link>), string LocalizedScopeName = default(string), string ParentFolderId = default(string), string Scope = default(string), string ScopeOwner = default(string))
        {
            this.Association = Association;
            this.ChildFolders = ChildFolders;
            this.ChildItems = ChildItems;
            this.FolderId = FolderId;
            this.FolderName = FolderName;
            this.Links = Links;
            this.LocalizedScopeName = LocalizedScopeName;
            this.ParentFolderId = ParentFolderId;
            this.Scope = Scope;
            this.ScopeOwner = ScopeOwner;
        }
        
        /// <summary>
        /// Gets or Sets Association
        /// </summary>
        [DataMember(Name="association", EmitDefaultValue=false)]
        public string Association { get; set; }

        /// <summary>
        /// Gets or Sets ChildFolders
        /// </summary>
        [DataMember(Name="childFolders", EmitDefaultValue=false)]
        public List<SearchFolder> ChildFolders { get; set; }

        /// <summary>
        /// Gets or Sets ChildItems
        /// </summary>
        [DataMember(Name="childItems", EmitDefaultValue=false)]
        public List<SearchItem> ChildItems { get; set; }

        /// <summary>
        /// Gets or Sets FolderId
        /// </summary>
        [DataMember(Name="folderId", EmitDefaultValue=false)]
        public string FolderId { get; set; }

        /// <summary>
        /// Gets or Sets FolderName
        /// </summary>
        [DataMember(Name="folderName", EmitDefaultValue=false)]
        public string FolderName { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Gets or Sets LocalizedScopeName
        /// </summary>
        [DataMember(Name="localizedScopeName", EmitDefaultValue=false)]
        public string LocalizedScopeName { get; set; }

        /// <summary>
        /// Gets or Sets ParentFolderId
        /// </summary>
        [DataMember(Name="parentFolderId", EmitDefaultValue=false)]
        public string ParentFolderId { get; set; }

        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [DataMember(Name="scope", EmitDefaultValue=false)]
        public string Scope { get; set; }

        /// <summary>
        /// Gets or Sets ScopeOwner
        /// </summary>
        [DataMember(Name="scopeOwner", EmitDefaultValue=false)]
        public string ScopeOwner { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SearchFolder {\n");
            sb.Append("  Association: ").Append(Association).Append("\n");
            sb.Append("  ChildFolders: ").Append(ChildFolders).Append("\n");
            sb.Append("  ChildItems: ").Append(ChildItems).Append("\n");
            sb.Append("  FolderId: ").Append(FolderId).Append("\n");
            sb.Append("  FolderName: ").Append(FolderName).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  LocalizedScopeName: ").Append(LocalizedScopeName).Append("\n");
            sb.Append("  ParentFolderId: ").Append(ParentFolderId).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  ScopeOwner: ").Append(ScopeOwner).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchFolder);
        }

        /// <summary>
        /// Returns true if SearchFolder instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchFolder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchFolder input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Association == input.Association ||
                    (this.Association != null &&
                    this.Association.Equals(input.Association))
                ) && 
                (
                    this.ChildFolders == input.ChildFolders ||
                    this.ChildFolders != null &&
                    this.ChildFolders.SequenceEqual(input.ChildFolders)
                ) && 
                (
                    this.ChildItems == input.ChildItems ||
                    this.ChildItems != null &&
                    this.ChildItems.SequenceEqual(input.ChildItems)
                ) && 
                (
                    this.FolderId == input.FolderId ||
                    (this.FolderId != null &&
                    this.FolderId.Equals(input.FolderId))
                ) && 
                (
                    this.FolderName == input.FolderName ||
                    (this.FolderName != null &&
                    this.FolderName.Equals(input.FolderName))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                ) && 
                (
                    this.LocalizedScopeName == input.LocalizedScopeName ||
                    (this.LocalizedScopeName != null &&
                    this.LocalizedScopeName.Equals(input.LocalizedScopeName))
                ) && 
                (
                    this.ParentFolderId == input.ParentFolderId ||
                    (this.ParentFolderId != null &&
                    this.ParentFolderId.Equals(input.ParentFolderId))
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.ScopeOwner == input.ScopeOwner ||
                    (this.ScopeOwner != null &&
                    this.ScopeOwner.Equals(input.ScopeOwner))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Association != null)
                    hashCode = hashCode * 59 + this.Association.GetHashCode();
                if (this.ChildFolders != null)
                    hashCode = hashCode * 59 + this.ChildFolders.GetHashCode();
                if (this.ChildItems != null)
                    hashCode = hashCode * 59 + this.ChildItems.GetHashCode();
                if (this.FolderId != null)
                    hashCode = hashCode * 59 + this.FolderId.GetHashCode();
                if (this.FolderName != null)
                    hashCode = hashCode * 59 + this.FolderName.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                if (this.LocalizedScopeName != null)
                    hashCode = hashCode * 59 + this.LocalizedScopeName.GetHashCode();
                if (this.ParentFolderId != null)
                    hashCode = hashCode * 59 + this.ParentFolderId.GetHashCode();
                if (this.Scope != null)
                    hashCode = hashCode * 59 + this.Scope.GetHashCode();
                if (this.ScopeOwner != null)
                    hashCode = hashCode * 59 + this.ScopeOwner.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
