/* 
 * Cherwell Rest API
 *
 * <a href=\"../../index.html\">Cherwell Rest API Documentation</a><br>Select version options from the header drop-down list (to the left of the Client Key box). Then, click Explore to view different versions of operations.
 *
 * OpenAPI spec version: 9.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TeamSaveRequest
    /// </summary>
    [DataContract]
    public partial class TeamSaveRequest :  IEquatable<TeamSaveRequest>, IValidatableObject
    {
        /// <summary>
        /// Defines TeamType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TeamTypeEnum
        {
            
            /// <summary>
            /// Enum User for value: User
            /// </summary>
            [EnumMember(Value = "User")]
            User = 1,
            
            /// <summary>
            /// Enum CustomerWorkgroup for value: CustomerWorkgroup
            /// </summary>
            [EnumMember(Value = "CustomerWorkgroup")]
            CustomerWorkgroup = 2
        }

        /// <summary>
        /// Gets or Sets TeamType
        /// </summary>
        [DataMember(Name="teamType", EmitDefaultValue=false)]
        public TeamTypeEnum? TeamType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TeamSaveRequest" /> class.
        /// </summary>
        /// <param name="Description">Description.</param>
        /// <param name="EmailAlias">EmailAlias.</param>
        /// <param name="Image">Image.</param>
        /// <param name="TeamId">TeamId.</param>
        /// <param name="TeamName">TeamName.</param>
        /// <param name="TeamType">TeamType.</param>
        public TeamSaveRequest(string Description = default(string), string EmailAlias = default(string), string Image = default(string), string TeamId = default(string), string TeamName = default(string), TeamTypeEnum? TeamType = default(TeamTypeEnum?))
        {
            this.Description = Description;
            this.EmailAlias = EmailAlias;
            this.Image = Image;
            this.TeamId = TeamId;
            this.TeamName = TeamName;
            this.TeamType = TeamType;
        }
        
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets EmailAlias
        /// </summary>
        [DataMember(Name="emailAlias", EmitDefaultValue=false)]
        public string EmailAlias { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name="image", EmitDefaultValue=false)]
        public string Image { get; set; }

        /// <summary>
        /// Gets or Sets TeamId
        /// </summary>
        [DataMember(Name="teamId", EmitDefaultValue=false)]
        public string TeamId { get; set; }

        /// <summary>
        /// Gets or Sets TeamName
        /// </summary>
        [DataMember(Name="teamName", EmitDefaultValue=false)]
        public string TeamName { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TeamSaveRequest {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EmailAlias: ").Append(EmailAlias).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  TeamId: ").Append(TeamId).Append("\n");
            sb.Append("  TeamName: ").Append(TeamName).Append("\n");
            sb.Append("  TeamType: ").Append(TeamType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TeamSaveRequest);
        }

        /// <summary>
        /// Returns true if TeamSaveRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TeamSaveRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TeamSaveRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.EmailAlias == input.EmailAlias ||
                    (this.EmailAlias != null &&
                    this.EmailAlias.Equals(input.EmailAlias))
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.TeamId == input.TeamId ||
                    (this.TeamId != null &&
                    this.TeamId.Equals(input.TeamId))
                ) && 
                (
                    this.TeamName == input.TeamName ||
                    (this.TeamName != null &&
                    this.TeamName.Equals(input.TeamName))
                ) && 
                (
                    this.TeamType == input.TeamType ||
                    (this.TeamType != null &&
                    this.TeamType.Equals(input.TeamType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.EmailAlias != null)
                    hashCode = hashCode * 59 + this.EmailAlias.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                if (this.TeamId != null)
                    hashCode = hashCode * 59 + this.TeamId.GetHashCode();
                if (this.TeamName != null)
                    hashCode = hashCode * 59 + this.TeamName.GetHashCode();
                if (this.TeamType != null)
                    hashCode = hashCode * 59 + this.TeamType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
