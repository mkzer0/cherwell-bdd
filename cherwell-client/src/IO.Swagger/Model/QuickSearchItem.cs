/* 
 * Cherwell Rest API
 *
 * <a href=\"../../index.html\">Cherwell Rest API Documentation</a><br>Select version options from the header drop-down list (to the left of the Client Key box). Then, click Explore to view different versions of operations.
 *
 * OpenAPI spec version: 9.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// QuickSearchItem
    /// </summary>
    [DataContract]
    public partial class QuickSearchItem :  IEquatable<QuickSearchItem>, IValidatableObject
    {
        /// <summary>
        /// Defines ChangedOption
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ChangedOptionEnum
        {
            
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,
            
            /// <summary>
            /// Enum Use for value: Use
            /// </summary>
            [EnumMember(Value = "Use")]
            Use = 2,
            
            /// <summary>
            /// Enum Display for value: Display
            /// </summary>
            [EnumMember(Value = "Display")]
            Display = 3,
            
            /// <summary>
            /// Enum UseAndDisplay for value: UseAndDisplay
            /// </summary>
            [EnumMember(Value = "UseAndDisplay")]
            UseAndDisplay = 4
        }

        /// <summary>
        /// Gets or Sets ChangedOption
        /// </summary>
        [DataMember(Name="changedOption", EmitDefaultValue=false)]
        public ChangedOptionEnum? ChangedOption { get; set; }
        /// <summary>
        /// Defines NonFinalStateOption
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NonFinalStateOptionEnum
        {
            
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,
            
            /// <summary>
            /// Enum Use for value: Use
            /// </summary>
            [EnumMember(Value = "Use")]
            Use = 2,
            
            /// <summary>
            /// Enum Display for value: Display
            /// </summary>
            [EnumMember(Value = "Display")]
            Display = 3,
            
            /// <summary>
            /// Enum UseAndDisplay for value: UseAndDisplay
            /// </summary>
            [EnumMember(Value = "UseAndDisplay")]
            UseAndDisplay = 4
        }

        /// <summary>
        /// Gets or Sets NonFinalStateOption
        /// </summary>
        [DataMember(Name="nonFinalStateOption", EmitDefaultValue=false)]
        public NonFinalStateOptionEnum? NonFinalStateOption { get; set; }
        /// <summary>
        /// Defines SearchAnyWordsOption
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SearchAnyWordsOptionEnum
        {
            
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,
            
            /// <summary>
            /// Enum Use for value: Use
            /// </summary>
            [EnumMember(Value = "Use")]
            Use = 2,
            
            /// <summary>
            /// Enum Display for value: Display
            /// </summary>
            [EnumMember(Value = "Display")]
            Display = 3,
            
            /// <summary>
            /// Enum UseAndDisplay for value: UseAndDisplay
            /// </summary>
            [EnumMember(Value = "UseAndDisplay")]
            UseAndDisplay = 4
        }

        /// <summary>
        /// Gets or Sets SearchAnyWordsOption
        /// </summary>
        [DataMember(Name="searchAnyWordsOption", EmitDefaultValue=false)]
        public SearchAnyWordsOptionEnum? SearchAnyWordsOption { get; set; }
        /// <summary>
        /// Defines SearchAttachmentsOption
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SearchAttachmentsOptionEnum
        {
            
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,
            
            /// <summary>
            /// Enum Use for value: Use
            /// </summary>
            [EnumMember(Value = "Use")]
            Use = 2,
            
            /// <summary>
            /// Enum Display for value: Display
            /// </summary>
            [EnumMember(Value = "Display")]
            Display = 3,
            
            /// <summary>
            /// Enum UseAndDisplay for value: UseAndDisplay
            /// </summary>
            [EnumMember(Value = "UseAndDisplay")]
            UseAndDisplay = 4
        }

        /// <summary>
        /// Gets or Sets SearchAttachmentsOption
        /// </summary>
        [DataMember(Name="searchAttachmentsOption", EmitDefaultValue=false)]
        public SearchAttachmentsOptionEnum? SearchAttachmentsOption { get; set; }
        /// <summary>
        /// Defines SearchRelatedOption
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SearchRelatedOptionEnum
        {
            
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,
            
            /// <summary>
            /// Enum Use for value: Use
            /// </summary>
            [EnumMember(Value = "Use")]
            Use = 2,
            
            /// <summary>
            /// Enum Display for value: Display
            /// </summary>
            [EnumMember(Value = "Display")]
            Display = 3,
            
            /// <summary>
            /// Enum UseAndDisplay for value: UseAndDisplay
            /// </summary>
            [EnumMember(Value = "UseAndDisplay")]
            UseAndDisplay = 4
        }

        /// <summary>
        /// Gets or Sets SearchRelatedOption
        /// </summary>
        [DataMember(Name="searchRelatedOption", EmitDefaultValue=false)]
        public SearchRelatedOptionEnum? SearchRelatedOption { get; set; }
        /// <summary>
        /// Defines SearchTargetType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SearchTargetTypeEnum
        {
            
            /// <summary>
            /// Enum BusOb for value: BusOb
            /// </summary>
            [EnumMember(Value = "BusOb")]
            BusOb = 1,
            
            /// <summary>
            /// Enum DocRepository for value: DocRepository
            /// </summary>
            [EnumMember(Value = "DocRepository")]
            DocRepository = 2
        }

        /// <summary>
        /// Gets or Sets SearchTargetType
        /// </summary>
        [DataMember(Name="searchTargetType", EmitDefaultValue=false)]
        public SearchTargetTypeEnum? SearchTargetType { get; set; }
        /// <summary>
        /// Defines SortByOption
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SortByOptionEnum
        {
            
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,
            
            /// <summary>
            /// Enum Use for value: Use
            /// </summary>
            [EnumMember(Value = "Use")]
            Use = 2,
            
            /// <summary>
            /// Enum Display for value: Display
            /// </summary>
            [EnumMember(Value = "Display")]
            Display = 3,
            
            /// <summary>
            /// Enum UseAndDisplay for value: UseAndDisplay
            /// </summary>
            [EnumMember(Value = "UseAndDisplay")]
            UseAndDisplay = 4
        }

        /// <summary>
        /// Gets or Sets SortByOption
        /// </summary>
        [DataMember(Name="sortByOption", EmitDefaultValue=false)]
        public SortByOptionEnum? SortByOption { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="QuickSearchItem" /> class.
        /// </summary>
        /// <param name="Ascending">Ascending.</param>
        /// <param name="ChangedLimits">ChangedLimits.</param>
        /// <param name="ChangedOption">ChangedOption.</param>
        /// <param name="DisplayName">DisplayName.</param>
        /// <param name="GalleryImage">GalleryImage.</param>
        /// <param name="HasAnyOptions">HasAnyOptions.</param>
        /// <param name="NonFinalStateOption">NonFinalStateOption.</param>
        /// <param name="SearchAnyWordsOption">SearchAnyWordsOption.</param>
        /// <param name="SearchAttachmentsOption">SearchAttachmentsOption.</param>
        /// <param name="SearchRelatedOption">SearchRelatedOption.</param>
        /// <param name="SearchTargetId">SearchTargetId.</param>
        /// <param name="SearchTargetType">SearchTargetType.</param>
        /// <param name="SelectedChangedLimit">SelectedChangedLimit.</param>
        /// <param name="SelectedSortByFieldId">SelectedSortByFieldId.</param>
        /// <param name="SortByFields">SortByFields.</param>
        /// <param name="SortByOption">SortByOption.</param>
        /// <param name="WatermarkText">WatermarkText.</param>
        public QuickSearchItem(bool? Ascending = default(bool?), List<ChangedLimit> ChangedLimits = default(List<ChangedLimit>), ChangedOptionEnum? ChangedOption = default(ChangedOptionEnum?), string DisplayName = default(string), string GalleryImage = default(string), bool? HasAnyOptions = default(bool?), NonFinalStateOptionEnum? NonFinalStateOption = default(NonFinalStateOptionEnum?), SearchAnyWordsOptionEnum? SearchAnyWordsOption = default(SearchAnyWordsOptionEnum?), SearchAttachmentsOptionEnum? SearchAttachmentsOption = default(SearchAttachmentsOptionEnum?), SearchRelatedOptionEnum? SearchRelatedOption = default(SearchRelatedOptionEnum?), string SearchTargetId = default(string), SearchTargetTypeEnum? SearchTargetType = default(SearchTargetTypeEnum?), ChangedLimit SelectedChangedLimit = default(ChangedLimit), string SelectedSortByFieldId = default(string), List<KeyValuePairStringString> SortByFields = default(List<KeyValuePairStringString>), SortByOptionEnum? SortByOption = default(SortByOptionEnum?), string WatermarkText = default(string))
        {
            this.Ascending = Ascending;
            this.ChangedLimits = ChangedLimits;
            this.ChangedOption = ChangedOption;
            this.DisplayName = DisplayName;
            this.GalleryImage = GalleryImage;
            this.HasAnyOptions = HasAnyOptions;
            this.NonFinalStateOption = NonFinalStateOption;
            this.SearchAnyWordsOption = SearchAnyWordsOption;
            this.SearchAttachmentsOption = SearchAttachmentsOption;
            this.SearchRelatedOption = SearchRelatedOption;
            this.SearchTargetId = SearchTargetId;
            this.SearchTargetType = SearchTargetType;
            this.SelectedChangedLimit = SelectedChangedLimit;
            this.SelectedSortByFieldId = SelectedSortByFieldId;
            this.SortByFields = SortByFields;
            this.SortByOption = SortByOption;
            this.WatermarkText = WatermarkText;
        }
        
        /// <summary>
        /// Gets or Sets Ascending
        /// </summary>
        [DataMember(Name="ascending", EmitDefaultValue=false)]
        public bool? Ascending { get; set; }

        /// <summary>
        /// Gets or Sets ChangedLimits
        /// </summary>
        [DataMember(Name="changedLimits", EmitDefaultValue=false)]
        public List<ChangedLimit> ChangedLimits { get; set; }


        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets GalleryImage
        /// </summary>
        [DataMember(Name="galleryImage", EmitDefaultValue=false)]
        public string GalleryImage { get; set; }

        /// <summary>
        /// Gets or Sets HasAnyOptions
        /// </summary>
        [DataMember(Name="hasAnyOptions", EmitDefaultValue=false)]
        public bool? HasAnyOptions { get; set; }





        /// <summary>
        /// Gets or Sets SearchTargetId
        /// </summary>
        [DataMember(Name="searchTargetId", EmitDefaultValue=false)]
        public string SearchTargetId { get; set; }


        /// <summary>
        /// Gets or Sets SelectedChangedLimit
        /// </summary>
        [DataMember(Name="selectedChangedLimit", EmitDefaultValue=false)]
        public ChangedLimit SelectedChangedLimit { get; set; }

        /// <summary>
        /// Gets or Sets SelectedSortByFieldId
        /// </summary>
        [DataMember(Name="selectedSortByFieldId", EmitDefaultValue=false)]
        public string SelectedSortByFieldId { get; set; }

        /// <summary>
        /// Gets or Sets SortByFields
        /// </summary>
        [DataMember(Name="sortByFields", EmitDefaultValue=false)]
        public List<KeyValuePairStringString> SortByFields { get; set; }


        /// <summary>
        /// Gets or Sets WatermarkText
        /// </summary>
        [DataMember(Name="watermarkText", EmitDefaultValue=false)]
        public string WatermarkText { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QuickSearchItem {\n");
            sb.Append("  Ascending: ").Append(Ascending).Append("\n");
            sb.Append("  ChangedLimits: ").Append(ChangedLimits).Append("\n");
            sb.Append("  ChangedOption: ").Append(ChangedOption).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  GalleryImage: ").Append(GalleryImage).Append("\n");
            sb.Append("  HasAnyOptions: ").Append(HasAnyOptions).Append("\n");
            sb.Append("  NonFinalStateOption: ").Append(NonFinalStateOption).Append("\n");
            sb.Append("  SearchAnyWordsOption: ").Append(SearchAnyWordsOption).Append("\n");
            sb.Append("  SearchAttachmentsOption: ").Append(SearchAttachmentsOption).Append("\n");
            sb.Append("  SearchRelatedOption: ").Append(SearchRelatedOption).Append("\n");
            sb.Append("  SearchTargetId: ").Append(SearchTargetId).Append("\n");
            sb.Append("  SearchTargetType: ").Append(SearchTargetType).Append("\n");
            sb.Append("  SelectedChangedLimit: ").Append(SelectedChangedLimit).Append("\n");
            sb.Append("  SelectedSortByFieldId: ").Append(SelectedSortByFieldId).Append("\n");
            sb.Append("  SortByFields: ").Append(SortByFields).Append("\n");
            sb.Append("  SortByOption: ").Append(SortByOption).Append("\n");
            sb.Append("  WatermarkText: ").Append(WatermarkText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QuickSearchItem);
        }

        /// <summary>
        /// Returns true if QuickSearchItem instances are equal
        /// </summary>
        /// <param name="input">Instance of QuickSearchItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuickSearchItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Ascending == input.Ascending ||
                    (this.Ascending != null &&
                    this.Ascending.Equals(input.Ascending))
                ) && 
                (
                    this.ChangedLimits == input.ChangedLimits ||
                    this.ChangedLimits != null &&
                    this.ChangedLimits.SequenceEqual(input.ChangedLimits)
                ) && 
                (
                    this.ChangedOption == input.ChangedOption ||
                    (this.ChangedOption != null &&
                    this.ChangedOption.Equals(input.ChangedOption))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.GalleryImage == input.GalleryImage ||
                    (this.GalleryImage != null &&
                    this.GalleryImage.Equals(input.GalleryImage))
                ) && 
                (
                    this.HasAnyOptions == input.HasAnyOptions ||
                    (this.HasAnyOptions != null &&
                    this.HasAnyOptions.Equals(input.HasAnyOptions))
                ) && 
                (
                    this.NonFinalStateOption == input.NonFinalStateOption ||
                    (this.NonFinalStateOption != null &&
                    this.NonFinalStateOption.Equals(input.NonFinalStateOption))
                ) && 
                (
                    this.SearchAnyWordsOption == input.SearchAnyWordsOption ||
                    (this.SearchAnyWordsOption != null &&
                    this.SearchAnyWordsOption.Equals(input.SearchAnyWordsOption))
                ) && 
                (
                    this.SearchAttachmentsOption == input.SearchAttachmentsOption ||
                    (this.SearchAttachmentsOption != null &&
                    this.SearchAttachmentsOption.Equals(input.SearchAttachmentsOption))
                ) && 
                (
                    this.SearchRelatedOption == input.SearchRelatedOption ||
                    (this.SearchRelatedOption != null &&
                    this.SearchRelatedOption.Equals(input.SearchRelatedOption))
                ) && 
                (
                    this.SearchTargetId == input.SearchTargetId ||
                    (this.SearchTargetId != null &&
                    this.SearchTargetId.Equals(input.SearchTargetId))
                ) && 
                (
                    this.SearchTargetType == input.SearchTargetType ||
                    (this.SearchTargetType != null &&
                    this.SearchTargetType.Equals(input.SearchTargetType))
                ) && 
                (
                    this.SelectedChangedLimit == input.SelectedChangedLimit ||
                    (this.SelectedChangedLimit != null &&
                    this.SelectedChangedLimit.Equals(input.SelectedChangedLimit))
                ) && 
                (
                    this.SelectedSortByFieldId == input.SelectedSortByFieldId ||
                    (this.SelectedSortByFieldId != null &&
                    this.SelectedSortByFieldId.Equals(input.SelectedSortByFieldId))
                ) && 
                (
                    this.SortByFields == input.SortByFields ||
                    this.SortByFields != null &&
                    this.SortByFields.SequenceEqual(input.SortByFields)
                ) && 
                (
                    this.SortByOption == input.SortByOption ||
                    (this.SortByOption != null &&
                    this.SortByOption.Equals(input.SortByOption))
                ) && 
                (
                    this.WatermarkText == input.WatermarkText ||
                    (this.WatermarkText != null &&
                    this.WatermarkText.Equals(input.WatermarkText))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ascending != null)
                    hashCode = hashCode * 59 + this.Ascending.GetHashCode();
                if (this.ChangedLimits != null)
                    hashCode = hashCode * 59 + this.ChangedLimits.GetHashCode();
                if (this.ChangedOption != null)
                    hashCode = hashCode * 59 + this.ChangedOption.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.GalleryImage != null)
                    hashCode = hashCode * 59 + this.GalleryImage.GetHashCode();
                if (this.HasAnyOptions != null)
                    hashCode = hashCode * 59 + this.HasAnyOptions.GetHashCode();
                if (this.NonFinalStateOption != null)
                    hashCode = hashCode * 59 + this.NonFinalStateOption.GetHashCode();
                if (this.SearchAnyWordsOption != null)
                    hashCode = hashCode * 59 + this.SearchAnyWordsOption.GetHashCode();
                if (this.SearchAttachmentsOption != null)
                    hashCode = hashCode * 59 + this.SearchAttachmentsOption.GetHashCode();
                if (this.SearchRelatedOption != null)
                    hashCode = hashCode * 59 + this.SearchRelatedOption.GetHashCode();
                if (this.SearchTargetId != null)
                    hashCode = hashCode * 59 + this.SearchTargetId.GetHashCode();
                if (this.SearchTargetType != null)
                    hashCode = hashCode * 59 + this.SearchTargetType.GetHashCode();
                if (this.SelectedChangedLimit != null)
                    hashCode = hashCode * 59 + this.SelectedChangedLimit.GetHashCode();
                if (this.SelectedSortByFieldId != null)
                    hashCode = hashCode * 59 + this.SelectedSortByFieldId.GetHashCode();
                if (this.SortByFields != null)
                    hashCode = hashCode * 59 + this.SortByFields.GetHashCode();
                if (this.SortByOption != null)
                    hashCode = hashCode * 59 + this.SortByOption.GetHashCode();
                if (this.WatermarkText != null)
                    hashCode = hashCode * 59 + this.WatermarkText.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
