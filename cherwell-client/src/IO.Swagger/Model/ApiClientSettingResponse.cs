/* 
 * Cherwell Rest API
 *
 * <a href=\"../../index.html\">Cherwell Rest API Documentation</a><br>Select version options from the header drop-down list (to the left of the Client Key box). Then, click Explore to view different versions of operations.
 *
 * OpenAPI spec version: 9.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ApiClientSettingResponse
    /// </summary>
    [DataContract]
    public partial class ApiClientSettingResponse :  IEquatable<ApiClientSettingResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiClientSettingResponse" /> class.
        /// </summary>
        /// <param name="Name">Name.</param>
        /// <param name="Description">Description.</param>
        /// <param name="Culture">Culture.</param>
        /// <param name="ClientKey">ClientKey.</param>
        /// <param name="TokenLifespanMinutes">TokenLifespanMinutes.</param>
        /// <param name="RefreshTokenLifespanMinutes">RefreshTokenLifespanMinutes.</param>
        /// <param name="ApiAccessIsEnabled">ApiAccessIsEnabled.</param>
        /// <param name="AllowAnonymousAccess">AllowAnonymousAccess.</param>
        /// <param name="StandInKey">StandInKey.</param>
        /// <param name="ErrorCode">ErrorCode.</param>
        /// <param name="ErrorMessage">ErrorMessage.</param>
        /// <param name="HasError">HasError.</param>
        public ApiClientSettingResponse(string Name = default(string), string Description = default(string), string Culture = default(string), string ClientKey = default(string), int? TokenLifespanMinutes = default(int?), int? RefreshTokenLifespanMinutes = default(int?), bool? ApiAccessIsEnabled = default(bool?), bool? AllowAnonymousAccess = default(bool?), string StandInKey = default(string), string ErrorCode = default(string), string ErrorMessage = default(string), bool? HasError = default(bool?))
        {
            this.Name = Name;
            this.Description = Description;
            this.Culture = Culture;
            this.ClientKey = ClientKey;
            this.TokenLifespanMinutes = TokenLifespanMinutes;
            this.RefreshTokenLifespanMinutes = RefreshTokenLifespanMinutes;
            this.ApiAccessIsEnabled = ApiAccessIsEnabled;
            this.AllowAnonymousAccess = AllowAnonymousAccess;
            this.StandInKey = StandInKey;
            this.ErrorCode = ErrorCode;
            this.ErrorMessage = ErrorMessage;
            this.HasError = HasError;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Culture
        /// </summary>
        [DataMember(Name="culture", EmitDefaultValue=false)]
        public string Culture { get; set; }

        /// <summary>
        /// Gets or Sets ClientKey
        /// </summary>
        [DataMember(Name="clientKey", EmitDefaultValue=false)]
        public string ClientKey { get; set; }

        /// <summary>
        /// Gets or Sets TokenLifespanMinutes
        /// </summary>
        [DataMember(Name="tokenLifespanMinutes", EmitDefaultValue=false)]
        public int? TokenLifespanMinutes { get; set; }

        /// <summary>
        /// Gets or Sets RefreshTokenLifespanMinutes
        /// </summary>
        [DataMember(Name="refreshTokenLifespanMinutes", EmitDefaultValue=false)]
        public int? RefreshTokenLifespanMinutes { get; set; }

        /// <summary>
        /// Gets or Sets ApiAccessIsEnabled
        /// </summary>
        [DataMember(Name="apiAccessIsEnabled", EmitDefaultValue=false)]
        public bool? ApiAccessIsEnabled { get; set; }

        /// <summary>
        /// Gets or Sets AllowAnonymousAccess
        /// </summary>
        [DataMember(Name="allowAnonymousAccess", EmitDefaultValue=false)]
        public bool? AllowAnonymousAccess { get; set; }

        /// <summary>
        /// Gets or Sets StandInKey
        /// </summary>
        [DataMember(Name="standInKey", EmitDefaultValue=false)]
        public string StandInKey { get; set; }

        /// <summary>
        /// Gets or Sets ErrorCode
        /// </summary>
        [DataMember(Name="errorCode", EmitDefaultValue=false)]
        public string ErrorCode { get; set; }

        /// <summary>
        /// Gets or Sets ErrorMessage
        /// </summary>
        [DataMember(Name="errorMessage", EmitDefaultValue=false)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Gets or Sets HasError
        /// </summary>
        [DataMember(Name="hasError", EmitDefaultValue=false)]
        public bool? HasError { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiClientSettingResponse {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Culture: ").Append(Culture).Append("\n");
            sb.Append("  ClientKey: ").Append(ClientKey).Append("\n");
            sb.Append("  TokenLifespanMinutes: ").Append(TokenLifespanMinutes).Append("\n");
            sb.Append("  RefreshTokenLifespanMinutes: ").Append(RefreshTokenLifespanMinutes).Append("\n");
            sb.Append("  ApiAccessIsEnabled: ").Append(ApiAccessIsEnabled).Append("\n");
            sb.Append("  AllowAnonymousAccess: ").Append(AllowAnonymousAccess).Append("\n");
            sb.Append("  StandInKey: ").Append(StandInKey).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  HasError: ").Append(HasError).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApiClientSettingResponse);
        }

        /// <summary>
        /// Returns true if ApiClientSettingResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ApiClientSettingResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiClientSettingResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Culture == input.Culture ||
                    (this.Culture != null &&
                    this.Culture.Equals(input.Culture))
                ) && 
                (
                    this.ClientKey == input.ClientKey ||
                    (this.ClientKey != null &&
                    this.ClientKey.Equals(input.ClientKey))
                ) && 
                (
                    this.TokenLifespanMinutes == input.TokenLifespanMinutes ||
                    (this.TokenLifespanMinutes != null &&
                    this.TokenLifespanMinutes.Equals(input.TokenLifespanMinutes))
                ) && 
                (
                    this.RefreshTokenLifespanMinutes == input.RefreshTokenLifespanMinutes ||
                    (this.RefreshTokenLifespanMinutes != null &&
                    this.RefreshTokenLifespanMinutes.Equals(input.RefreshTokenLifespanMinutes))
                ) && 
                (
                    this.ApiAccessIsEnabled == input.ApiAccessIsEnabled ||
                    (this.ApiAccessIsEnabled != null &&
                    this.ApiAccessIsEnabled.Equals(input.ApiAccessIsEnabled))
                ) && 
                (
                    this.AllowAnonymousAccess == input.AllowAnonymousAccess ||
                    (this.AllowAnonymousAccess != null &&
                    this.AllowAnonymousAccess.Equals(input.AllowAnonymousAccess))
                ) && 
                (
                    this.StandInKey == input.StandInKey ||
                    (this.StandInKey != null &&
                    this.StandInKey.Equals(input.StandInKey))
                ) && 
                (
                    this.ErrorCode == input.ErrorCode ||
                    (this.ErrorCode != null &&
                    this.ErrorCode.Equals(input.ErrorCode))
                ) && 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    (this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(input.ErrorMessage))
                ) && 
                (
                    this.HasError == input.HasError ||
                    (this.HasError != null &&
                    this.HasError.Equals(input.HasError))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Culture != null)
                    hashCode = hashCode * 59 + this.Culture.GetHashCode();
                if (this.ClientKey != null)
                    hashCode = hashCode * 59 + this.ClientKey.GetHashCode();
                if (this.TokenLifespanMinutes != null)
                    hashCode = hashCode * 59 + this.TokenLifespanMinutes.GetHashCode();
                if (this.RefreshTokenLifespanMinutes != null)
                    hashCode = hashCode * 59 + this.RefreshTokenLifespanMinutes.GetHashCode();
                if (this.ApiAccessIsEnabled != null)
                    hashCode = hashCode * 59 + this.ApiAccessIsEnabled.GetHashCode();
                if (this.AllowAnonymousAccess != null)
                    hashCode = hashCode * 59 + this.AllowAnonymousAccess.GetHashCode();
                if (this.StandInKey != null)
                    hashCode = hashCode * 59 + this.StandInKey.GetHashCode();
                if (this.ErrorCode != null)
                    hashCode = hashCode * 59 + this.ErrorCode.GetHashCode();
                if (this.ErrorMessage != null)
                    hashCode = hashCode * 59 + this.ErrorMessage.GetHashCode();
                if (this.HasError != null)
                    hashCode = hashCode * 59 + this.HasError.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
