/* 
 * Cherwell Rest API
 *
 * <a href=\"../../index.html\">Cherwell Rest API Documentation</a><br>Select version options from the header drop-down list (to the left of the Client Key box). Then, click Explore to view different versions of operations.
 *
 * OpenAPI spec version: 9.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BusinessObjectPermission
    /// </summary>
    [DataContract]
    public partial class BusinessObjectPermission :  IEquatable<BusinessObjectPermission>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BusinessObjectPermission" /> class.
        /// </summary>
        /// <param name="BusObId">BusObId.</param>
        /// <param name="BusObName">BusObName.</param>
        /// <param name="DepartmentMemberEdit">DepartmentMemberEdit.</param>
        /// <param name="DepartmentMemberView">DepartmentMemberView.</param>
        /// <param name="Edit">Edit.</param>
        /// <param name="FieldPermissions">FieldPermissions.</param>
        /// <param name="ManagerOfOwnerEdit">ManagerOfOwnerEdit.</param>
        /// <param name="ManagerOfOwnerView">ManagerOfOwnerView.</param>
        /// <param name="OwnerEdit">OwnerEdit.</param>
        /// <param name="OwnerView">OwnerView.</param>
        /// <param name="TeamEdit">TeamEdit.</param>
        /// <param name="TeamManagerOfOwnerEdit">TeamManagerOfOwnerEdit.</param>
        /// <param name="TeamManagerOfOwnerView">TeamManagerOfOwnerView.</param>
        /// <param name="TeamView">TeamView.</param>
        /// <param name="View">View.</param>
        public BusinessObjectPermission(string BusObId = default(string), string BusObName = default(string), bool? DepartmentMemberEdit = default(bool?), bool? DepartmentMemberView = default(bool?), bool? Edit = default(bool?), List<FieldPermission> FieldPermissions = default(List<FieldPermission>), bool? ManagerOfOwnerEdit = default(bool?), bool? ManagerOfOwnerView = default(bool?), bool? OwnerEdit = default(bool?), bool? OwnerView = default(bool?), bool? TeamEdit = default(bool?), bool? TeamManagerOfOwnerEdit = default(bool?), bool? TeamManagerOfOwnerView = default(bool?), bool? TeamView = default(bool?), bool? View = default(bool?))
        {
            this.BusObId = BusObId;
            this.BusObName = BusObName;
            this.DepartmentMemberEdit = DepartmentMemberEdit;
            this.DepartmentMemberView = DepartmentMemberView;
            this.Edit = Edit;
            this.FieldPermissions = FieldPermissions;
            this.ManagerOfOwnerEdit = ManagerOfOwnerEdit;
            this.ManagerOfOwnerView = ManagerOfOwnerView;
            this.OwnerEdit = OwnerEdit;
            this.OwnerView = OwnerView;
            this.TeamEdit = TeamEdit;
            this.TeamManagerOfOwnerEdit = TeamManagerOfOwnerEdit;
            this.TeamManagerOfOwnerView = TeamManagerOfOwnerView;
            this.TeamView = TeamView;
            this.View = View;
        }
        
        /// <summary>
        /// Gets or Sets BusObId
        /// </summary>
        [DataMember(Name="busObId", EmitDefaultValue=false)]
        public string BusObId { get; set; }

        /// <summary>
        /// Gets or Sets BusObName
        /// </summary>
        [DataMember(Name="busObName", EmitDefaultValue=false)]
        public string BusObName { get; set; }

        /// <summary>
        /// Gets or Sets DepartmentMemberEdit
        /// </summary>
        [DataMember(Name="departmentMemberEdit", EmitDefaultValue=false)]
        public bool? DepartmentMemberEdit { get; set; }

        /// <summary>
        /// Gets or Sets DepartmentMemberView
        /// </summary>
        [DataMember(Name="departmentMemberView", EmitDefaultValue=false)]
        public bool? DepartmentMemberView { get; set; }

        /// <summary>
        /// Gets or Sets Edit
        /// </summary>
        [DataMember(Name="edit", EmitDefaultValue=false)]
        public bool? Edit { get; set; }

        /// <summary>
        /// Gets or Sets FieldPermissions
        /// </summary>
        [DataMember(Name="fieldPermissions", EmitDefaultValue=false)]
        public List<FieldPermission> FieldPermissions { get; set; }

        /// <summary>
        /// Gets or Sets ManagerOfOwnerEdit
        /// </summary>
        [DataMember(Name="managerOfOwnerEdit", EmitDefaultValue=false)]
        public bool? ManagerOfOwnerEdit { get; set; }

        /// <summary>
        /// Gets or Sets ManagerOfOwnerView
        /// </summary>
        [DataMember(Name="managerOfOwnerView", EmitDefaultValue=false)]
        public bool? ManagerOfOwnerView { get; set; }

        /// <summary>
        /// Gets or Sets OwnerEdit
        /// </summary>
        [DataMember(Name="ownerEdit", EmitDefaultValue=false)]
        public bool? OwnerEdit { get; set; }

        /// <summary>
        /// Gets or Sets OwnerView
        /// </summary>
        [DataMember(Name="ownerView", EmitDefaultValue=false)]
        public bool? OwnerView { get; set; }

        /// <summary>
        /// Gets or Sets TeamEdit
        /// </summary>
        [DataMember(Name="teamEdit", EmitDefaultValue=false)]
        public bool? TeamEdit { get; set; }

        /// <summary>
        /// Gets or Sets TeamManagerOfOwnerEdit
        /// </summary>
        [DataMember(Name="teamManagerOfOwnerEdit", EmitDefaultValue=false)]
        public bool? TeamManagerOfOwnerEdit { get; set; }

        /// <summary>
        /// Gets or Sets TeamManagerOfOwnerView
        /// </summary>
        [DataMember(Name="teamManagerOfOwnerView", EmitDefaultValue=false)]
        public bool? TeamManagerOfOwnerView { get; set; }

        /// <summary>
        /// Gets or Sets TeamView
        /// </summary>
        [DataMember(Name="teamView", EmitDefaultValue=false)]
        public bool? TeamView { get; set; }

        /// <summary>
        /// Gets or Sets View
        /// </summary>
        [DataMember(Name="view", EmitDefaultValue=false)]
        public bool? View { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BusinessObjectPermission {\n");
            sb.Append("  BusObId: ").Append(BusObId).Append("\n");
            sb.Append("  BusObName: ").Append(BusObName).Append("\n");
            sb.Append("  DepartmentMemberEdit: ").Append(DepartmentMemberEdit).Append("\n");
            sb.Append("  DepartmentMemberView: ").Append(DepartmentMemberView).Append("\n");
            sb.Append("  Edit: ").Append(Edit).Append("\n");
            sb.Append("  FieldPermissions: ").Append(FieldPermissions).Append("\n");
            sb.Append("  ManagerOfOwnerEdit: ").Append(ManagerOfOwnerEdit).Append("\n");
            sb.Append("  ManagerOfOwnerView: ").Append(ManagerOfOwnerView).Append("\n");
            sb.Append("  OwnerEdit: ").Append(OwnerEdit).Append("\n");
            sb.Append("  OwnerView: ").Append(OwnerView).Append("\n");
            sb.Append("  TeamEdit: ").Append(TeamEdit).Append("\n");
            sb.Append("  TeamManagerOfOwnerEdit: ").Append(TeamManagerOfOwnerEdit).Append("\n");
            sb.Append("  TeamManagerOfOwnerView: ").Append(TeamManagerOfOwnerView).Append("\n");
            sb.Append("  TeamView: ").Append(TeamView).Append("\n");
            sb.Append("  View: ").Append(View).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BusinessObjectPermission);
        }

        /// <summary>
        /// Returns true if BusinessObjectPermission instances are equal
        /// </summary>
        /// <param name="input">Instance of BusinessObjectPermission to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BusinessObjectPermission input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BusObId == input.BusObId ||
                    (this.BusObId != null &&
                    this.BusObId.Equals(input.BusObId))
                ) && 
                (
                    this.BusObName == input.BusObName ||
                    (this.BusObName != null &&
                    this.BusObName.Equals(input.BusObName))
                ) && 
                (
                    this.DepartmentMemberEdit == input.DepartmentMemberEdit ||
                    (this.DepartmentMemberEdit != null &&
                    this.DepartmentMemberEdit.Equals(input.DepartmentMemberEdit))
                ) && 
                (
                    this.DepartmentMemberView == input.DepartmentMemberView ||
                    (this.DepartmentMemberView != null &&
                    this.DepartmentMemberView.Equals(input.DepartmentMemberView))
                ) && 
                (
                    this.Edit == input.Edit ||
                    (this.Edit != null &&
                    this.Edit.Equals(input.Edit))
                ) && 
                (
                    this.FieldPermissions == input.FieldPermissions ||
                    this.FieldPermissions != null &&
                    this.FieldPermissions.SequenceEqual(input.FieldPermissions)
                ) && 
                (
                    this.ManagerOfOwnerEdit == input.ManagerOfOwnerEdit ||
                    (this.ManagerOfOwnerEdit != null &&
                    this.ManagerOfOwnerEdit.Equals(input.ManagerOfOwnerEdit))
                ) && 
                (
                    this.ManagerOfOwnerView == input.ManagerOfOwnerView ||
                    (this.ManagerOfOwnerView != null &&
                    this.ManagerOfOwnerView.Equals(input.ManagerOfOwnerView))
                ) && 
                (
                    this.OwnerEdit == input.OwnerEdit ||
                    (this.OwnerEdit != null &&
                    this.OwnerEdit.Equals(input.OwnerEdit))
                ) && 
                (
                    this.OwnerView == input.OwnerView ||
                    (this.OwnerView != null &&
                    this.OwnerView.Equals(input.OwnerView))
                ) && 
                (
                    this.TeamEdit == input.TeamEdit ||
                    (this.TeamEdit != null &&
                    this.TeamEdit.Equals(input.TeamEdit))
                ) && 
                (
                    this.TeamManagerOfOwnerEdit == input.TeamManagerOfOwnerEdit ||
                    (this.TeamManagerOfOwnerEdit != null &&
                    this.TeamManagerOfOwnerEdit.Equals(input.TeamManagerOfOwnerEdit))
                ) && 
                (
                    this.TeamManagerOfOwnerView == input.TeamManagerOfOwnerView ||
                    (this.TeamManagerOfOwnerView != null &&
                    this.TeamManagerOfOwnerView.Equals(input.TeamManagerOfOwnerView))
                ) && 
                (
                    this.TeamView == input.TeamView ||
                    (this.TeamView != null &&
                    this.TeamView.Equals(input.TeamView))
                ) && 
                (
                    this.View == input.View ||
                    (this.View != null &&
                    this.View.Equals(input.View))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BusObId != null)
                    hashCode = hashCode * 59 + this.BusObId.GetHashCode();
                if (this.BusObName != null)
                    hashCode = hashCode * 59 + this.BusObName.GetHashCode();
                if (this.DepartmentMemberEdit != null)
                    hashCode = hashCode * 59 + this.DepartmentMemberEdit.GetHashCode();
                if (this.DepartmentMemberView != null)
                    hashCode = hashCode * 59 + this.DepartmentMemberView.GetHashCode();
                if (this.Edit != null)
                    hashCode = hashCode * 59 + this.Edit.GetHashCode();
                if (this.FieldPermissions != null)
                    hashCode = hashCode * 59 + this.FieldPermissions.GetHashCode();
                if (this.ManagerOfOwnerEdit != null)
                    hashCode = hashCode * 59 + this.ManagerOfOwnerEdit.GetHashCode();
                if (this.ManagerOfOwnerView != null)
                    hashCode = hashCode * 59 + this.ManagerOfOwnerView.GetHashCode();
                if (this.OwnerEdit != null)
                    hashCode = hashCode * 59 + this.OwnerEdit.GetHashCode();
                if (this.OwnerView != null)
                    hashCode = hashCode * 59 + this.OwnerView.GetHashCode();
                if (this.TeamEdit != null)
                    hashCode = hashCode * 59 + this.TeamEdit.GetHashCode();
                if (this.TeamManagerOfOwnerEdit != null)
                    hashCode = hashCode * 59 + this.TeamManagerOfOwnerEdit.GetHashCode();
                if (this.TeamManagerOfOwnerView != null)
                    hashCode = hashCode * 59 + this.TeamManagerOfOwnerView.GetHashCode();
                if (this.TeamView != null)
                    hashCode = hashCode * 59 + this.TeamView.GetHashCode();
                if (this.View != null)
                    hashCode = hashCode * 59 + this.View.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
