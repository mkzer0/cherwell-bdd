/* 
 * Cherwell Rest API
 *
 * <a href=\"../../index.html\">Cherwell Rest API Documentation</a><br>Select version options from the header drop-down list (to the left of the Client Key box). Then, click Explore to view different versions of operations.
 *
 * OpenAPI spec version: 9.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SearchResultsResponse
    /// </summary>
    [DataContract]
    public partial class SearchResultsResponse :  IEquatable<SearchResultsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchResultsResponse" /> class.
        /// </summary>
        /// <param name="BusinessObjects">BusinessObjects.</param>
        /// <param name="HasPrompts">HasPrompts.</param>
        /// <param name="Links">Links.</param>
        /// <param name="Prompts">Prompts.</param>
        /// <param name="SearchResultsFields">SearchResultsFields.</param>
        /// <param name="TotalRows">TotalRows.</param>
        public SearchResultsResponse(List<ReadResponse> BusinessObjects = default(List<ReadResponse>), bool? HasPrompts = default(bool?), List<Link> Links = default(List<Link>), List<Prompt> Prompts = default(List<Prompt>), List<Field> SearchResultsFields = default(List<Field>), long? TotalRows = default(long?))
        {
            this.BusinessObjects = BusinessObjects;
            this.HasPrompts = HasPrompts;
            this.Links = Links;
            this.Prompts = Prompts;
            this.SearchResultsFields = SearchResultsFields;
            this.TotalRows = TotalRows;
        }
        
        /// <summary>
        /// Gets or Sets BusinessObjects
        /// </summary>
        [DataMember(Name="businessObjects", EmitDefaultValue=false)]
        public List<ReadResponse> BusinessObjects { get; set; }

        /// <summary>
        /// Gets or Sets HasPrompts
        /// </summary>
        [DataMember(Name="hasPrompts", EmitDefaultValue=false)]
        public bool? HasPrompts { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Gets or Sets Prompts
        /// </summary>
        [DataMember(Name="prompts", EmitDefaultValue=false)]
        public List<Prompt> Prompts { get; set; }

        /// <summary>
        /// Gets or Sets SearchResultsFields
        /// </summary>
        [DataMember(Name="searchResultsFields", EmitDefaultValue=false)]
        public List<Field> SearchResultsFields { get; set; }

        /// <summary>
        /// Gets or Sets TotalRows
        /// </summary>
        [DataMember(Name="totalRows", EmitDefaultValue=false)]
        public long? TotalRows { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SearchResultsResponse {\n");
            sb.Append("  BusinessObjects: ").Append(BusinessObjects).Append("\n");
            sb.Append("  HasPrompts: ").Append(HasPrompts).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Prompts: ").Append(Prompts).Append("\n");
            sb.Append("  SearchResultsFields: ").Append(SearchResultsFields).Append("\n");
            sb.Append("  TotalRows: ").Append(TotalRows).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchResultsResponse);
        }

        /// <summary>
        /// Returns true if SearchResultsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchResultsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchResultsResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BusinessObjects == input.BusinessObjects ||
                    this.BusinessObjects != null &&
                    this.BusinessObjects.SequenceEqual(input.BusinessObjects)
                ) && 
                (
                    this.HasPrompts == input.HasPrompts ||
                    (this.HasPrompts != null &&
                    this.HasPrompts.Equals(input.HasPrompts))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                ) && 
                (
                    this.Prompts == input.Prompts ||
                    this.Prompts != null &&
                    this.Prompts.SequenceEqual(input.Prompts)
                ) && 
                (
                    this.SearchResultsFields == input.SearchResultsFields ||
                    this.SearchResultsFields != null &&
                    this.SearchResultsFields.SequenceEqual(input.SearchResultsFields)
                ) && 
                (
                    this.TotalRows == input.TotalRows ||
                    (this.TotalRows != null &&
                    this.TotalRows.Equals(input.TotalRows))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BusinessObjects != null)
                    hashCode = hashCode * 59 + this.BusinessObjects.GetHashCode();
                if (this.HasPrompts != null)
                    hashCode = hashCode * 59 + this.HasPrompts.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                if (this.Prompts != null)
                    hashCode = hashCode * 59 + this.Prompts.GetHashCode();
                if (this.SearchResultsFields != null)
                    hashCode = hashCode * 59 + this.SearchResultsFields.GetHashCode();
                if (this.TotalRows != null)
                    hashCode = hashCode * 59 + this.TotalRows.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
