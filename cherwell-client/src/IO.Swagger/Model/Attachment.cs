/* 
 * Cherwell Rest API
 *
 * <a href=\"../../index.html\">Cherwell Rest API Documentation</a><br>Select version options from the header drop-down list (to the left of the Client Key box). Then, click Explore to view different versions of operations.
 *
 * OpenAPI spec version: 9.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Attachment
    /// </summary>
    [DataContract]
    public partial class Attachment :  IEquatable<Attachment>, IValidatableObject
    {
        /// <summary>
        /// Defines AttachmentType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AttachmentTypeEnum
        {
            
            /// <summary>
            /// Enum Imported for value: Imported
            /// </summary>
            [EnumMember(Value = "Imported")]
            Imported = 1,
            
            /// <summary>
            /// Enum Linked for value: Linked
            /// </summary>
            [EnumMember(Value = "Linked")]
            Linked = 2,
            
            /// <summary>
            /// Enum URL for value: URL
            /// </summary>
            [EnumMember(Value = "URL")]
            URL = 3
        }

        /// <summary>
        /// Gets or Sets AttachmentType
        /// </summary>
        [DataMember(Name="attachmentType", EmitDefaultValue=false)]
        public AttachmentTypeEnum? AttachmentType { get; set; }
        /// <summary>
        /// Defines Scope
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ScopeEnum
        {
            
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,
            
            /// <summary>
            /// Enum Global for value: Global
            /// </summary>
            [EnumMember(Value = "Global")]
            Global = 2,
            
            /// <summary>
            /// Enum Team for value: Team
            /// </summary>
            [EnumMember(Value = "Team")]
            Team = 3,
            
            /// <summary>
            /// Enum Persona for value: Persona
            /// </summary>
            [EnumMember(Value = "Persona")]
            Persona = 4,
            
            /// <summary>
            /// Enum SecurityGroup for value: SecurityGroup
            /// </summary>
            [EnumMember(Value = "SecurityGroup")]
            SecurityGroup = 5,
            
            /// <summary>
            /// Enum User for value: User
            /// </summary>
            [EnumMember(Value = "User")]
            User = 6,
            
            /// <summary>
            /// Enum UserInPersona for value: UserInPersona
            /// </summary>
            [EnumMember(Value = "UserInPersona")]
            UserInPersona = 7,
            
            /// <summary>
            /// Enum OtherUsers for value: OtherUsers
            /// </summary>
            [EnumMember(Value = "OtherUsers")]
            OtherUsers = 8,
            
            /// <summary>
            /// Enum Core for value: Core
            /// </summary>
            [EnumMember(Value = "Core")]
            Core = 9,
            
            /// <summary>
            /// Enum BusIntel for value: BusIntel
            /// </summary>
            [EnumMember(Value = "BusIntel")]
            BusIntel = 10,
            
            /// <summary>
            /// Enum FromResource for value: FromResource
            /// </summary>
            [EnumMember(Value = "FromResource")]
            FromResource = 11,
            
            /// <summary>
            /// Enum Site for value: Site
            /// </summary>
            [EnumMember(Value = "Site")]
            Site = 12,
            
            /// <summary>
            /// Enum Custom for value: Custom
            /// </summary>
            [EnumMember(Value = "Custom")]
            Custom = 13
        }

        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [DataMember(Name="scope", EmitDefaultValue=false)]
        public ScopeEnum? Scope { get; set; }
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,
            
            /// <summary>
            /// Enum File for value: File
            /// </summary>
            [EnumMember(Value = "File")]
            File = 2,
            
            /// <summary>
            /// Enum FileManagerFile for value: FileManagerFile
            /// </summary>
            [EnumMember(Value = "FileManagerFile")]
            FileManagerFile = 3,
            
            /// <summary>
            /// Enum BusOb for value: BusOb
            /// </summary>
            [EnumMember(Value = "BusOb")]
            BusOb = 4,
            
            /// <summary>
            /// Enum History for value: History
            /// </summary>
            [EnumMember(Value = "History")]
            History = 5,
            
            /// <summary>
            /// Enum Other for value: Other
            /// </summary>
            [EnumMember(Value = "Other")]
            Other = 6
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Attachment" /> class.
        /// </summary>
        /// <param name="AttachedBusObId">AttachedBusObId.</param>
        /// <param name="AttachedBusObRecId">AttachedBusObRecId.</param>
        /// <param name="AttachmentFileId">AttachmentFileId.</param>
        /// <param name="AttachmentFileName">AttachmentFileName.</param>
        /// <param name="AttachmentFileType">AttachmentFileType.</param>
        /// <param name="AttachmentId">AttachmentId.</param>
        /// <param name="AttachmentType">AttachmentType.</param>
        /// <param name="BusObId">BusObId.</param>
        /// <param name="BusObRecId">BusObRecId.</param>
        /// <param name="Comment">Comment.</param>
        /// <param name="Created">Created.</param>
        /// <param name="DisplayText">DisplayText.</param>
        /// <param name="Links">Links.</param>
        /// <param name="Owner">Owner.</param>
        /// <param name="Scope">Scope.</param>
        /// <param name="ScopeOwner">ScopeOwner.</param>
        /// <param name="Type">Type.</param>
        public Attachment(string AttachedBusObId = default(string), string AttachedBusObRecId = default(string), string AttachmentFileId = default(string), string AttachmentFileName = default(string), string AttachmentFileType = default(string), string AttachmentId = default(string), AttachmentTypeEnum? AttachmentType = default(AttachmentTypeEnum?), string BusObId = default(string), string BusObRecId = default(string), string Comment = default(string), DateTime? Created = default(DateTime?), string DisplayText = default(string), List<Link> Links = default(List<Link>), string Owner = default(string), ScopeEnum? Scope = default(ScopeEnum?), string ScopeOwner = default(string), TypeEnum? Type = default(TypeEnum?))
        {
            this.AttachedBusObId = AttachedBusObId;
            this.AttachedBusObRecId = AttachedBusObRecId;
            this.AttachmentFileId = AttachmentFileId;
            this.AttachmentFileName = AttachmentFileName;
            this.AttachmentFileType = AttachmentFileType;
            this.AttachmentId = AttachmentId;
            this.AttachmentType = AttachmentType;
            this.BusObId = BusObId;
            this.BusObRecId = BusObRecId;
            this.Comment = Comment;
            this.Created = Created;
            this.DisplayText = DisplayText;
            this.Links = Links;
            this.Owner = Owner;
            this.Scope = Scope;
            this.ScopeOwner = ScopeOwner;
            this.Type = Type;
        }
        
        /// <summary>
        /// Gets or Sets AttachedBusObId
        /// </summary>
        [DataMember(Name="attachedBusObId", EmitDefaultValue=false)]
        public string AttachedBusObId { get; set; }

        /// <summary>
        /// Gets or Sets AttachedBusObRecId
        /// </summary>
        [DataMember(Name="attachedBusObRecId", EmitDefaultValue=false)]
        public string AttachedBusObRecId { get; set; }

        /// <summary>
        /// Gets or Sets AttachmentFileId
        /// </summary>
        [DataMember(Name="attachmentFileId", EmitDefaultValue=false)]
        public string AttachmentFileId { get; set; }

        /// <summary>
        /// Gets or Sets AttachmentFileName
        /// </summary>
        [DataMember(Name="attachmentFileName", EmitDefaultValue=false)]
        public string AttachmentFileName { get; set; }

        /// <summary>
        /// Gets or Sets AttachmentFileType
        /// </summary>
        [DataMember(Name="attachmentFileType", EmitDefaultValue=false)]
        public string AttachmentFileType { get; set; }

        /// <summary>
        /// Gets or Sets AttachmentId
        /// </summary>
        [DataMember(Name="attachmentId", EmitDefaultValue=false)]
        public string AttachmentId { get; set; }


        /// <summary>
        /// Gets or Sets BusObId
        /// </summary>
        [DataMember(Name="busObId", EmitDefaultValue=false)]
        public string BusObId { get; set; }

        /// <summary>
        /// Gets or Sets BusObRecId
        /// </summary>
        [DataMember(Name="busObRecId", EmitDefaultValue=false)]
        public string BusObRecId { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime? Created { get; set; }

        /// <summary>
        /// Gets or Sets DisplayText
        /// </summary>
        [DataMember(Name="displayText", EmitDefaultValue=false)]
        public string DisplayText { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public List<Link> Links { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name="owner", EmitDefaultValue=false)]
        public string Owner { get; set; }


        /// <summary>
        /// Gets or Sets ScopeOwner
        /// </summary>
        [DataMember(Name="scopeOwner", EmitDefaultValue=false)]
        public string ScopeOwner { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Attachment {\n");
            sb.Append("  AttachedBusObId: ").Append(AttachedBusObId).Append("\n");
            sb.Append("  AttachedBusObRecId: ").Append(AttachedBusObRecId).Append("\n");
            sb.Append("  AttachmentFileId: ").Append(AttachmentFileId).Append("\n");
            sb.Append("  AttachmentFileName: ").Append(AttachmentFileName).Append("\n");
            sb.Append("  AttachmentFileType: ").Append(AttachmentFileType).Append("\n");
            sb.Append("  AttachmentId: ").Append(AttachmentId).Append("\n");
            sb.Append("  AttachmentType: ").Append(AttachmentType).Append("\n");
            sb.Append("  BusObId: ").Append(BusObId).Append("\n");
            sb.Append("  BusObRecId: ").Append(BusObRecId).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  DisplayText: ").Append(DisplayText).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  ScopeOwner: ").Append(ScopeOwner).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Attachment);
        }

        /// <summary>
        /// Returns true if Attachment instances are equal
        /// </summary>
        /// <param name="input">Instance of Attachment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Attachment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AttachedBusObId == input.AttachedBusObId ||
                    (this.AttachedBusObId != null &&
                    this.AttachedBusObId.Equals(input.AttachedBusObId))
                ) && 
                (
                    this.AttachedBusObRecId == input.AttachedBusObRecId ||
                    (this.AttachedBusObRecId != null &&
                    this.AttachedBusObRecId.Equals(input.AttachedBusObRecId))
                ) && 
                (
                    this.AttachmentFileId == input.AttachmentFileId ||
                    (this.AttachmentFileId != null &&
                    this.AttachmentFileId.Equals(input.AttachmentFileId))
                ) && 
                (
                    this.AttachmentFileName == input.AttachmentFileName ||
                    (this.AttachmentFileName != null &&
                    this.AttachmentFileName.Equals(input.AttachmentFileName))
                ) && 
                (
                    this.AttachmentFileType == input.AttachmentFileType ||
                    (this.AttachmentFileType != null &&
                    this.AttachmentFileType.Equals(input.AttachmentFileType))
                ) && 
                (
                    this.AttachmentId == input.AttachmentId ||
                    (this.AttachmentId != null &&
                    this.AttachmentId.Equals(input.AttachmentId))
                ) && 
                (
                    this.AttachmentType == input.AttachmentType ||
                    (this.AttachmentType != null &&
                    this.AttachmentType.Equals(input.AttachmentType))
                ) && 
                (
                    this.BusObId == input.BusObId ||
                    (this.BusObId != null &&
                    this.BusObId.Equals(input.BusObId))
                ) && 
                (
                    this.BusObRecId == input.BusObRecId ||
                    (this.BusObRecId != null &&
                    this.BusObRecId.Equals(input.BusObRecId))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.DisplayText == input.DisplayText ||
                    (this.DisplayText != null &&
                    this.DisplayText.Equals(input.DisplayText))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                ) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.ScopeOwner == input.ScopeOwner ||
                    (this.ScopeOwner != null &&
                    this.ScopeOwner.Equals(input.ScopeOwner))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AttachedBusObId != null)
                    hashCode = hashCode * 59 + this.AttachedBusObId.GetHashCode();
                if (this.AttachedBusObRecId != null)
                    hashCode = hashCode * 59 + this.AttachedBusObRecId.GetHashCode();
                if (this.AttachmentFileId != null)
                    hashCode = hashCode * 59 + this.AttachmentFileId.GetHashCode();
                if (this.AttachmentFileName != null)
                    hashCode = hashCode * 59 + this.AttachmentFileName.GetHashCode();
                if (this.AttachmentFileType != null)
                    hashCode = hashCode * 59 + this.AttachmentFileType.GetHashCode();
                if (this.AttachmentId != null)
                    hashCode = hashCode * 59 + this.AttachmentId.GetHashCode();
                if (this.AttachmentType != null)
                    hashCode = hashCode * 59 + this.AttachmentType.GetHashCode();
                if (this.BusObId != null)
                    hashCode = hashCode * 59 + this.BusObId.GetHashCode();
                if (this.BusObRecId != null)
                    hashCode = hashCode * 59 + this.BusObRecId.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.DisplayText != null)
                    hashCode = hashCode * 59 + this.DisplayText.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                if (this.Owner != null)
                    hashCode = hashCode * 59 + this.Owner.GetHashCode();
                if (this.Scope != null)
                    hashCode = hashCode * 59 + this.Scope.GetHashCode();
                if (this.ScopeOwner != null)
                    hashCode = hashCode * 59 + this.ScopeOwner.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
