/* 
 * Cherwell Rest API
 *
 * <a href=\"../../index.html\">Cherwell Rest API Documentation</a><br>Select version options from the header drop-down list (to the left of the Client Key box). Then, click Explore to view different versions of operations.
 *
 * OpenAPI spec version: 9.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Summary
    /// </summary>
    [DataContract]
    public partial class Summary :  IEquatable<Summary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Summary" /> class.
        /// </summary>
        /// <param name="BusObId">BusObId.</param>
        /// <param name="DisplayName">DisplayName.</param>
        /// <param name="FirstRecIdField">FirstRecIdField.</param>
        /// <param name="Group">Group.</param>
        /// <param name="GroupSummaries">GroupSummaries.</param>
        /// <param name="Lookup">Lookup.</param>
        /// <param name="Major">Major.</param>
        /// <param name="Name">Name.</param>
        /// <param name="RecIdFields">RecIdFields.</param>
        /// <param name="StateFieldId">StateFieldId.</param>
        /// <param name="States">States.</param>
        /// <param name="Supporting">Supporting.</param>
        public Summary(string BusObId = default(string), string DisplayName = default(string), string FirstRecIdField = default(string), bool? Group = default(bool?), List<Summary> GroupSummaries = default(List<Summary>), bool? Lookup = default(bool?), bool? Major = default(bool?), string Name = default(string), string RecIdFields = default(string), string StateFieldId = default(string), string States = default(string), bool? Supporting = default(bool?))
        {
            this.BusObId = BusObId;
            this.DisplayName = DisplayName;
            this.FirstRecIdField = FirstRecIdField;
            this.Group = Group;
            this.GroupSummaries = GroupSummaries;
            this.Lookup = Lookup;
            this.Major = Major;
            this.Name = Name;
            this.RecIdFields = RecIdFields;
            this.StateFieldId = StateFieldId;
            this.States = States;
            this.Supporting = Supporting;
        }
        
        /// <summary>
        /// Gets or Sets BusObId
        /// </summary>
        [DataMember(Name="busObId", EmitDefaultValue=false)]
        public string BusObId { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets FirstRecIdField
        /// </summary>
        [DataMember(Name="firstRecIdField", EmitDefaultValue=false)]
        public string FirstRecIdField { get; set; }

        /// <summary>
        /// Gets or Sets Group
        /// </summary>
        [DataMember(Name="group", EmitDefaultValue=false)]
        public bool? Group { get; set; }

        /// <summary>
        /// Gets or Sets GroupSummaries
        /// </summary>
        [DataMember(Name="groupSummaries", EmitDefaultValue=false)]
        public List<Summary> GroupSummaries { get; set; }

        /// <summary>
        /// Gets or Sets Lookup
        /// </summary>
        [DataMember(Name="lookup", EmitDefaultValue=false)]
        public bool? Lookup { get; set; }

        /// <summary>
        /// Gets or Sets Major
        /// </summary>
        [DataMember(Name="major", EmitDefaultValue=false)]
        public bool? Major { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets RecIdFields
        /// </summary>
        [DataMember(Name="recIdFields", EmitDefaultValue=false)]
        public string RecIdFields { get; set; }

        /// <summary>
        /// Gets or Sets StateFieldId
        /// </summary>
        [DataMember(Name="stateFieldId", EmitDefaultValue=false)]
        public string StateFieldId { get; set; }

        /// <summary>
        /// Gets or Sets States
        /// </summary>
        [DataMember(Name="states", EmitDefaultValue=false)]
        public string States { get; set; }

        /// <summary>
        /// Gets or Sets Supporting
        /// </summary>
        [DataMember(Name="supporting", EmitDefaultValue=false)]
        public bool? Supporting { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Summary {\n");
            sb.Append("  BusObId: ").Append(BusObId).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  FirstRecIdField: ").Append(FirstRecIdField).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  GroupSummaries: ").Append(GroupSummaries).Append("\n");
            sb.Append("  Lookup: ").Append(Lookup).Append("\n");
            sb.Append("  Major: ").Append(Major).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RecIdFields: ").Append(RecIdFields).Append("\n");
            sb.Append("  StateFieldId: ").Append(StateFieldId).Append("\n");
            sb.Append("  States: ").Append(States).Append("\n");
            sb.Append("  Supporting: ").Append(Supporting).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Summary);
        }

        /// <summary>
        /// Returns true if Summary instances are equal
        /// </summary>
        /// <param name="input">Instance of Summary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Summary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BusObId == input.BusObId ||
                    (this.BusObId != null &&
                    this.BusObId.Equals(input.BusObId))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.FirstRecIdField == input.FirstRecIdField ||
                    (this.FirstRecIdField != null &&
                    this.FirstRecIdField.Equals(input.FirstRecIdField))
                ) && 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) && 
                (
                    this.GroupSummaries == input.GroupSummaries ||
                    this.GroupSummaries != null &&
                    this.GroupSummaries.SequenceEqual(input.GroupSummaries)
                ) && 
                (
                    this.Lookup == input.Lookup ||
                    (this.Lookup != null &&
                    this.Lookup.Equals(input.Lookup))
                ) && 
                (
                    this.Major == input.Major ||
                    (this.Major != null &&
                    this.Major.Equals(input.Major))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.RecIdFields == input.RecIdFields ||
                    (this.RecIdFields != null &&
                    this.RecIdFields.Equals(input.RecIdFields))
                ) && 
                (
                    this.StateFieldId == input.StateFieldId ||
                    (this.StateFieldId != null &&
                    this.StateFieldId.Equals(input.StateFieldId))
                ) && 
                (
                    this.States == input.States ||
                    (this.States != null &&
                    this.States.Equals(input.States))
                ) && 
                (
                    this.Supporting == input.Supporting ||
                    (this.Supporting != null &&
                    this.Supporting.Equals(input.Supporting))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BusObId != null)
                    hashCode = hashCode * 59 + this.BusObId.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.FirstRecIdField != null)
                    hashCode = hashCode * 59 + this.FirstRecIdField.GetHashCode();
                if (this.Group != null)
                    hashCode = hashCode * 59 + this.Group.GetHashCode();
                if (this.GroupSummaries != null)
                    hashCode = hashCode * 59 + this.GroupSummaries.GetHashCode();
                if (this.Lookup != null)
                    hashCode = hashCode * 59 + this.Lookup.GetHashCode();
                if (this.Major != null)
                    hashCode = hashCode * 59 + this.Major.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.RecIdFields != null)
                    hashCode = hashCode * 59 + this.RecIdFields.GetHashCode();
                if (this.StateFieldId != null)
                    hashCode = hashCode * 59 + this.StateFieldId.GetHashCode();
                if (this.States != null)
                    hashCode = hashCode * 59 + this.States.GetHashCode();
                if (this.Supporting != null)
                    hashCode = hashCode * 59 + this.Supporting.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
