/* 
 * Cherwell Rest API
 *
 * <a href=\"../../index.html\">Cherwell Rest API Documentation</a><br>Select version options from the header drop-down list (to the left of the Client Key box). Then, click Explore to view different versions of operations.
 *
 * OpenAPI spec version: 9.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Relationship
    /// </summary>
    [DataContract]
    public partial class Relationship :  IEquatable<Relationship>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Relationship" /> class.
        /// </summary>
        /// <param name="Cardinality">Cardinality.</param>
        /// <param name="Description">Description.</param>
        /// <param name="DisplayName">DisplayName.</param>
        /// <param name="FieldDefinitions">FieldDefinitions.</param>
        /// <param name="RelationshipId">RelationshipId.</param>
        /// <param name="Target">Target.</param>
        public Relationship(string Cardinality = default(string), string Description = default(string), string DisplayName = default(string), List<FieldDefinition> FieldDefinitions = default(List<FieldDefinition>), string RelationshipId = default(string), string Target = default(string))
        {
            this.Cardinality = Cardinality;
            this.Description = Description;
            this.DisplayName = DisplayName;
            this.FieldDefinitions = FieldDefinitions;
            this.RelationshipId = RelationshipId;
            this.Target = Target;
        }
        
        /// <summary>
        /// Gets or Sets Cardinality
        /// </summary>
        [DataMember(Name="cardinality", EmitDefaultValue=false)]
        public string Cardinality { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets FieldDefinitions
        /// </summary>
        [DataMember(Name="fieldDefinitions", EmitDefaultValue=false)]
        public List<FieldDefinition> FieldDefinitions { get; set; }

        /// <summary>
        /// Gets or Sets RelationshipId
        /// </summary>
        [DataMember(Name="relationshipId", EmitDefaultValue=false)]
        public string RelationshipId { get; set; }

        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [DataMember(Name="target", EmitDefaultValue=false)]
        public string Target { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Relationship {\n");
            sb.Append("  Cardinality: ").Append(Cardinality).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  FieldDefinitions: ").Append(FieldDefinitions).Append("\n");
            sb.Append("  RelationshipId: ").Append(RelationshipId).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Relationship);
        }

        /// <summary>
        /// Returns true if Relationship instances are equal
        /// </summary>
        /// <param name="input">Instance of Relationship to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Relationship input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Cardinality == input.Cardinality ||
                    (this.Cardinality != null &&
                    this.Cardinality.Equals(input.Cardinality))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.FieldDefinitions == input.FieldDefinitions ||
                    this.FieldDefinitions != null &&
                    this.FieldDefinitions.SequenceEqual(input.FieldDefinitions)
                ) && 
                (
                    this.RelationshipId == input.RelationshipId ||
                    (this.RelationshipId != null &&
                    this.RelationshipId.Equals(input.RelationshipId))
                ) && 
                (
                    this.Target == input.Target ||
                    (this.Target != null &&
                    this.Target.Equals(input.Target))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Cardinality != null)
                    hashCode = hashCode * 59 + this.Cardinality.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.FieldDefinitions != null)
                    hashCode = hashCode * 59 + this.FieldDefinitions.GetHashCode();
                if (this.RelationshipId != null)
                    hashCode = hashCode * 59 + this.RelationshipId.GetHashCode();
                if (this.Target != null)
                    hashCode = hashCode * 59 + this.Target.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
