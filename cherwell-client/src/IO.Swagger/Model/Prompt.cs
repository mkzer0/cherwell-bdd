/* 
 * Cherwell Rest API
 *
 * <a href=\"../../index.html\">Cherwell Rest API Documentation</a><br>Select version options from the header drop-down list (to the left of the Client Key box). Then, click Explore to view different versions of operations.
 *
 * OpenAPI spec version: 9.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Prompt
    /// </summary>
    [DataContract]
    public partial class Prompt :  IEquatable<Prompt>, IValidatableObject
    {
        /// <summary>
        /// Defines ListDisplayOption
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ListDisplayOptionEnum
        {
            
            /// <summary>
            /// Enum Auto for value: Auto
            /// </summary>
            [EnumMember(Value = "Auto")]
            Auto = 1,
            
            /// <summary>
            /// Enum Text for value: Text
            /// </summary>
            [EnumMember(Value = "Text")]
            Text = 2,
            
            /// <summary>
            /// Enum Combo for value: Combo
            /// </summary>
            [EnumMember(Value = "Combo")]
            Combo = 3,
            
            /// <summary>
            /// Enum GridList for value: GridList
            /// </summary>
            [EnumMember(Value = "GridList")]
            GridList = 4,
            
            /// <summary>
            /// Enum SimpleList for value: SimpleList
            /// </summary>
            [EnumMember(Value = "SimpleList")]
            SimpleList = 5,
            
            /// <summary>
            /// Enum PromptSimpleGrid for value: PromptSimpleGrid
            /// </summary>
            [EnumMember(Value = "PromptSimpleGrid")]
            PromptSimpleGrid = 6
        }

        /// <summary>
        /// Gets or Sets ListDisplayOption
        /// </summary>
        [DataMember(Name="listDisplayOption", EmitDefaultValue=false)]
        public ListDisplayOptionEnum? ListDisplayOption { get; set; }
        /// <summary>
        /// Defines PromptType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PromptTypeEnum
        {
            
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,
            
            /// <summary>
            /// Enum Text for value: Text
            /// </summary>
            [EnumMember(Value = "Text")]
            Text = 2,
            
            /// <summary>
            /// Enum Number for value: Number
            /// </summary>
            [EnumMember(Value = "Number")]
            Number = 3,
            
            /// <summary>
            /// Enum DateTime for value: DateTime
            /// </summary>
            [EnumMember(Value = "DateTime")]
            DateTime = 4,
            
            /// <summary>
            /// Enum Logical for value: Logical
            /// </summary>
            [EnumMember(Value = "Logical")]
            Logical = 5,
            
            /// <summary>
            /// Enum Binary for value: Binary
            /// </summary>
            [EnumMember(Value = "Binary")]
            Binary = 6,
            
            /// <summary>
            /// Enum DateOnly for value: DateOnly
            /// </summary>
            [EnumMember(Value = "DateOnly")]
            DateOnly = 7,
            
            /// <summary>
            /// Enum TimeOnly for value: TimeOnly
            /// </summary>
            [EnumMember(Value = "TimeOnly")]
            TimeOnly = 8,
            
            /// <summary>
            /// Enum Json for value: Json
            /// </summary>
            [EnumMember(Value = "Json")]
            Json = 9,
            
            /// <summary>
            /// Enum JsonArray for value: JsonArray
            /// </summary>
            [EnumMember(Value = "JsonArray")]
            JsonArray = 10,
            
            /// <summary>
            /// Enum Xml for value: Xml
            /// </summary>
            [EnumMember(Value = "Xml")]
            Xml = 11,
            
            /// <summary>
            /// Enum XmlCollection for value: XmlCollection
            /// </summary>
            [EnumMember(Value = "XmlCollection")]
            XmlCollection = 12,
            
            /// <summary>
            /// Enum TimeValue for value: TimeValue
            /// </summary>
            [EnumMember(Value = "TimeValue")]
            TimeValue = 13
        }

        /// <summary>
        /// Gets or Sets PromptType
        /// </summary>
        [DataMember(Name="promptType", EmitDefaultValue=false)]
        public PromptTypeEnum? PromptType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Prompt" /> class.
        /// </summary>
        /// <param name="AllowValuesOnly">AllowValuesOnly.</param>
        /// <param name="BusObId">BusObId.</param>
        /// <param name="ConstraintXml">ConstraintXml.</param>
        /// <param name="_Default">_Default.</param>
        /// <param name="FieldId">FieldId.</param>
        /// <param name="IsDateRange">IsDateRange.</param>
        /// <param name="ListDisplayOption">ListDisplayOption.</param>
        /// <param name="ListReturnFieldId">ListReturnFieldId.</param>
        /// <param name="MultiLine">MultiLine.</param>
        /// <param name="PromptId">PromptId.</param>
        /// <param name="PromptType">PromptType.</param>
        /// <param name="PromptTypeName">PromptTypeName.</param>
        /// <param name="Required">Required.</param>
        /// <param name="Text">Text.</param>
        /// <param name="Value">Value.</param>
        /// <param name="Values">Values.</param>
        public Prompt(bool? AllowValuesOnly = default(bool?), string BusObId = default(string), string ConstraintXml = default(string), string _Default = default(string), string FieldId = default(string), bool? IsDateRange = default(bool?), ListDisplayOptionEnum? ListDisplayOption = default(ListDisplayOptionEnum?), string ListReturnFieldId = default(string), bool? MultiLine = default(bool?), string PromptId = default(string), PromptTypeEnum? PromptType = default(PromptTypeEnum?), string PromptTypeName = default(string), bool? Required = default(bool?), string Text = default(string), Object Value = default(Object), List<string> Values = default(List<string>))
        {
            this.AllowValuesOnly = AllowValuesOnly;
            this.BusObId = BusObId;
            this.ConstraintXml = ConstraintXml;
            this._Default = _Default;
            this.FieldId = FieldId;
            this.IsDateRange = IsDateRange;
            this.ListDisplayOption = ListDisplayOption;
            this.ListReturnFieldId = ListReturnFieldId;
            this.MultiLine = MultiLine;
            this.PromptId = PromptId;
            this.PromptType = PromptType;
            this.PromptTypeName = PromptTypeName;
            this.Required = Required;
            this.Text = Text;
            this.Value = Value;
            this.Values = Values;
        }
        
        /// <summary>
        /// Gets or Sets AllowValuesOnly
        /// </summary>
        [DataMember(Name="allowValuesOnly", EmitDefaultValue=false)]
        public bool? AllowValuesOnly { get; set; }

        /// <summary>
        /// Gets or Sets BusObId
        /// </summary>
        [DataMember(Name="busObId", EmitDefaultValue=false)]
        public string BusObId { get; set; }

        /// <summary>
        /// Gets or Sets ConstraintXml
        /// </summary>
        [DataMember(Name="constraintXml", EmitDefaultValue=false)]
        public string ConstraintXml { get; set; }

        /// <summary>
        /// Gets or Sets _Default
        /// </summary>
        [DataMember(Name="default", EmitDefaultValue=false)]
        public string _Default { get; set; }

        /// <summary>
        /// Gets or Sets FieldId
        /// </summary>
        [DataMember(Name="fieldId", EmitDefaultValue=false)]
        public string FieldId { get; set; }

        /// <summary>
        /// Gets or Sets IsDateRange
        /// </summary>
        [DataMember(Name="isDateRange", EmitDefaultValue=false)]
        public bool? IsDateRange { get; set; }


        /// <summary>
        /// Gets or Sets ListReturnFieldId
        /// </summary>
        [DataMember(Name="listReturnFieldId", EmitDefaultValue=false)]
        public string ListReturnFieldId { get; set; }

        /// <summary>
        /// Gets or Sets MultiLine
        /// </summary>
        [DataMember(Name="multiLine", EmitDefaultValue=false)]
        public bool? MultiLine { get; set; }

        /// <summary>
        /// Gets or Sets PromptId
        /// </summary>
        [DataMember(Name="promptId", EmitDefaultValue=false)]
        public string PromptId { get; set; }


        /// <summary>
        /// Gets or Sets PromptTypeName
        /// </summary>
        [DataMember(Name="promptTypeName", EmitDefaultValue=false)]
        public string PromptTypeName { get; set; }

        /// <summary>
        /// Gets or Sets Required
        /// </summary>
        [DataMember(Name="required", EmitDefaultValue=false)]
        public bool? Required { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public Object Value { get; set; }

        /// <summary>
        /// Gets or Sets Values
        /// </summary>
        [DataMember(Name="values", EmitDefaultValue=false)]
        public List<string> Values { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Prompt {\n");
            sb.Append("  AllowValuesOnly: ").Append(AllowValuesOnly).Append("\n");
            sb.Append("  BusObId: ").Append(BusObId).Append("\n");
            sb.Append("  ConstraintXml: ").Append(ConstraintXml).Append("\n");
            sb.Append("  _Default: ").Append(_Default).Append("\n");
            sb.Append("  FieldId: ").Append(FieldId).Append("\n");
            sb.Append("  IsDateRange: ").Append(IsDateRange).Append("\n");
            sb.Append("  ListDisplayOption: ").Append(ListDisplayOption).Append("\n");
            sb.Append("  ListReturnFieldId: ").Append(ListReturnFieldId).Append("\n");
            sb.Append("  MultiLine: ").Append(MultiLine).Append("\n");
            sb.Append("  PromptId: ").Append(PromptId).Append("\n");
            sb.Append("  PromptType: ").Append(PromptType).Append("\n");
            sb.Append("  PromptTypeName: ").Append(PromptTypeName).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Prompt);
        }

        /// <summary>
        /// Returns true if Prompt instances are equal
        /// </summary>
        /// <param name="input">Instance of Prompt to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Prompt input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllowValuesOnly == input.AllowValuesOnly ||
                    (this.AllowValuesOnly != null &&
                    this.AllowValuesOnly.Equals(input.AllowValuesOnly))
                ) && 
                (
                    this.BusObId == input.BusObId ||
                    (this.BusObId != null &&
                    this.BusObId.Equals(input.BusObId))
                ) && 
                (
                    this.ConstraintXml == input.ConstraintXml ||
                    (this.ConstraintXml != null &&
                    this.ConstraintXml.Equals(input.ConstraintXml))
                ) && 
                (
                    this._Default == input._Default ||
                    (this._Default != null &&
                    this._Default.Equals(input._Default))
                ) && 
                (
                    this.FieldId == input.FieldId ||
                    (this.FieldId != null &&
                    this.FieldId.Equals(input.FieldId))
                ) && 
                (
                    this.IsDateRange == input.IsDateRange ||
                    (this.IsDateRange != null &&
                    this.IsDateRange.Equals(input.IsDateRange))
                ) && 
                (
                    this.ListDisplayOption == input.ListDisplayOption ||
                    (this.ListDisplayOption != null &&
                    this.ListDisplayOption.Equals(input.ListDisplayOption))
                ) && 
                (
                    this.ListReturnFieldId == input.ListReturnFieldId ||
                    (this.ListReturnFieldId != null &&
                    this.ListReturnFieldId.Equals(input.ListReturnFieldId))
                ) && 
                (
                    this.MultiLine == input.MultiLine ||
                    (this.MultiLine != null &&
                    this.MultiLine.Equals(input.MultiLine))
                ) && 
                (
                    this.PromptId == input.PromptId ||
                    (this.PromptId != null &&
                    this.PromptId.Equals(input.PromptId))
                ) && 
                (
                    this.PromptType == input.PromptType ||
                    (this.PromptType != null &&
                    this.PromptType.Equals(input.PromptType))
                ) && 
                (
                    this.PromptTypeName == input.PromptTypeName ||
                    (this.PromptTypeName != null &&
                    this.PromptTypeName.Equals(input.PromptTypeName))
                ) && 
                (
                    this.Required == input.Required ||
                    (this.Required != null &&
                    this.Required.Equals(input.Required))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Values == input.Values ||
                    this.Values != null &&
                    this.Values.SequenceEqual(input.Values)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllowValuesOnly != null)
                    hashCode = hashCode * 59 + this.AllowValuesOnly.GetHashCode();
                if (this.BusObId != null)
                    hashCode = hashCode * 59 + this.BusObId.GetHashCode();
                if (this.ConstraintXml != null)
                    hashCode = hashCode * 59 + this.ConstraintXml.GetHashCode();
                if (this._Default != null)
                    hashCode = hashCode * 59 + this._Default.GetHashCode();
                if (this.FieldId != null)
                    hashCode = hashCode * 59 + this.FieldId.GetHashCode();
                if (this.IsDateRange != null)
                    hashCode = hashCode * 59 + this.IsDateRange.GetHashCode();
                if (this.ListDisplayOption != null)
                    hashCode = hashCode * 59 + this.ListDisplayOption.GetHashCode();
                if (this.ListReturnFieldId != null)
                    hashCode = hashCode * 59 + this.ListReturnFieldId.GetHashCode();
                if (this.MultiLine != null)
                    hashCode = hashCode * 59 + this.MultiLine.GetHashCode();
                if (this.PromptId != null)
                    hashCode = hashCode * 59 + this.PromptId.GetHashCode();
                if (this.PromptType != null)
                    hashCode = hashCode * 59 + this.PromptType.GetHashCode();
                if (this.PromptTypeName != null)
                    hashCode = hashCode * 59 + this.PromptTypeName.GetHashCode();
                if (this.Required != null)
                    hashCode = hashCode * 59 + this.Required.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Values != null)
                    hashCode = hashCode * 59 + this.Values.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
