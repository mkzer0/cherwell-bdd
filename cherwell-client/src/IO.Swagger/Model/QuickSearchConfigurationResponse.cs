/* 
 * Cherwell Rest API
 *
 * <a href=\"../../index.html\">Cherwell Rest API Documentation</a><br>Select version options from the header drop-down list (to the left of the Client Key box). Then, click Explore to view different versions of operations.
 *
 * OpenAPI spec version: 9.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// QuickSearchConfigurationResponse
    /// </summary>
    [DataContract]
    public partial class QuickSearchConfigurationResponse :  IEquatable<QuickSearchConfigurationResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QuickSearchConfigurationResponse" /> class.
        /// </summary>
        /// <param name="AllowQuickSearch">AllowQuickSearch.</param>
        /// <param name="AllowSpecificSearch">AllowSpecificSearch.</param>
        /// <param name="DefaultToQuickSearch">DefaultToQuickSearch.</param>
        /// <param name="DisplayName">DisplayName.</param>
        /// <param name="GalleryImage">GalleryImage.</param>
        /// <param name="IncludeAvailableInSpecific">IncludeAvailableInSpecific.</param>
        /// <param name="IncludeQuickSearchInSpecific">IncludeQuickSearchInSpecific.</param>
        /// <param name="QuickSearchId">QuickSearchId.</param>
        /// <param name="QuickSearchItems">QuickSearchItems.</param>
        /// <param name="QuickSearchWatermark">QuickSearchWatermark.</param>
        /// <param name="ResolvedQuickSearchWatermark">ResolvedQuickSearchWatermark.</param>
        /// <param name="Scope">Scope.</param>
        /// <param name="ScopeOwner">ScopeOwner.</param>
        /// <param name="SpecificSearchItems">SpecificSearchItems.</param>
        public QuickSearchConfigurationResponse(bool? AllowQuickSearch = default(bool?), bool? AllowSpecificSearch = default(bool?), bool? DefaultToQuickSearch = default(bool?), string DisplayName = default(string), string GalleryImage = default(string), bool? IncludeAvailableInSpecific = default(bool?), bool? IncludeQuickSearchInSpecific = default(bool?), string QuickSearchId = default(string), List<QuickSearchItem> QuickSearchItems = default(List<QuickSearchItem>), string QuickSearchWatermark = default(string), string ResolvedQuickSearchWatermark = default(string), string Scope = default(string), string ScopeOwner = default(string), List<QuickSearchItem> SpecificSearchItems = default(List<QuickSearchItem>))
        {
            this.AllowQuickSearch = AllowQuickSearch;
            this.AllowSpecificSearch = AllowSpecificSearch;
            this.DefaultToQuickSearch = DefaultToQuickSearch;
            this.DisplayName = DisplayName;
            this.GalleryImage = GalleryImage;
            this.IncludeAvailableInSpecific = IncludeAvailableInSpecific;
            this.IncludeQuickSearchInSpecific = IncludeQuickSearchInSpecific;
            this.QuickSearchId = QuickSearchId;
            this.QuickSearchItems = QuickSearchItems;
            this.QuickSearchWatermark = QuickSearchWatermark;
            this.ResolvedQuickSearchWatermark = ResolvedQuickSearchWatermark;
            this.Scope = Scope;
            this.ScopeOwner = ScopeOwner;
            this.SpecificSearchItems = SpecificSearchItems;
        }
        
        /// <summary>
        /// Gets or Sets AllowQuickSearch
        /// </summary>
        [DataMember(Name="allowQuickSearch", EmitDefaultValue=false)]
        public bool? AllowQuickSearch { get; set; }

        /// <summary>
        /// Gets or Sets AllowSpecificSearch
        /// </summary>
        [DataMember(Name="allowSpecificSearch", EmitDefaultValue=false)]
        public bool? AllowSpecificSearch { get; set; }

        /// <summary>
        /// Gets or Sets DefaultToQuickSearch
        /// </summary>
        [DataMember(Name="defaultToQuickSearch", EmitDefaultValue=false)]
        public bool? DefaultToQuickSearch { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets GalleryImage
        /// </summary>
        [DataMember(Name="galleryImage", EmitDefaultValue=false)]
        public string GalleryImage { get; set; }

        /// <summary>
        /// Gets or Sets IncludeAvailableInSpecific
        /// </summary>
        [DataMember(Name="includeAvailableInSpecific", EmitDefaultValue=false)]
        public bool? IncludeAvailableInSpecific { get; set; }

        /// <summary>
        /// Gets or Sets IncludeQuickSearchInSpecific
        /// </summary>
        [DataMember(Name="includeQuickSearchInSpecific", EmitDefaultValue=false)]
        public bool? IncludeQuickSearchInSpecific { get; set; }

        /// <summary>
        /// Gets or Sets QuickSearchId
        /// </summary>
        [DataMember(Name="quickSearchId", EmitDefaultValue=false)]
        public string QuickSearchId { get; set; }

        /// <summary>
        /// Gets or Sets QuickSearchItems
        /// </summary>
        [DataMember(Name="quickSearchItems", EmitDefaultValue=false)]
        public List<QuickSearchItem> QuickSearchItems { get; set; }

        /// <summary>
        /// Gets or Sets QuickSearchWatermark
        /// </summary>
        [DataMember(Name="quickSearchWatermark", EmitDefaultValue=false)]
        public string QuickSearchWatermark { get; set; }

        /// <summary>
        /// Gets or Sets ResolvedQuickSearchWatermark
        /// </summary>
        [DataMember(Name="resolvedQuickSearchWatermark", EmitDefaultValue=false)]
        public string ResolvedQuickSearchWatermark { get; set; }

        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [DataMember(Name="scope", EmitDefaultValue=false)]
        public string Scope { get; set; }

        /// <summary>
        /// Gets or Sets ScopeOwner
        /// </summary>
        [DataMember(Name="scopeOwner", EmitDefaultValue=false)]
        public string ScopeOwner { get; set; }

        /// <summary>
        /// Gets or Sets SpecificSearchItems
        /// </summary>
        [DataMember(Name="specificSearchItems", EmitDefaultValue=false)]
        public List<QuickSearchItem> SpecificSearchItems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QuickSearchConfigurationResponse {\n");
            sb.Append("  AllowQuickSearch: ").Append(AllowQuickSearch).Append("\n");
            sb.Append("  AllowSpecificSearch: ").Append(AllowSpecificSearch).Append("\n");
            sb.Append("  DefaultToQuickSearch: ").Append(DefaultToQuickSearch).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  GalleryImage: ").Append(GalleryImage).Append("\n");
            sb.Append("  IncludeAvailableInSpecific: ").Append(IncludeAvailableInSpecific).Append("\n");
            sb.Append("  IncludeQuickSearchInSpecific: ").Append(IncludeQuickSearchInSpecific).Append("\n");
            sb.Append("  QuickSearchId: ").Append(QuickSearchId).Append("\n");
            sb.Append("  QuickSearchItems: ").Append(QuickSearchItems).Append("\n");
            sb.Append("  QuickSearchWatermark: ").Append(QuickSearchWatermark).Append("\n");
            sb.Append("  ResolvedQuickSearchWatermark: ").Append(ResolvedQuickSearchWatermark).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  ScopeOwner: ").Append(ScopeOwner).Append("\n");
            sb.Append("  SpecificSearchItems: ").Append(SpecificSearchItems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QuickSearchConfigurationResponse);
        }

        /// <summary>
        /// Returns true if QuickSearchConfigurationResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of QuickSearchConfigurationResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuickSearchConfigurationResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllowQuickSearch == input.AllowQuickSearch ||
                    (this.AllowQuickSearch != null &&
                    this.AllowQuickSearch.Equals(input.AllowQuickSearch))
                ) && 
                (
                    this.AllowSpecificSearch == input.AllowSpecificSearch ||
                    (this.AllowSpecificSearch != null &&
                    this.AllowSpecificSearch.Equals(input.AllowSpecificSearch))
                ) && 
                (
                    this.DefaultToQuickSearch == input.DefaultToQuickSearch ||
                    (this.DefaultToQuickSearch != null &&
                    this.DefaultToQuickSearch.Equals(input.DefaultToQuickSearch))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.GalleryImage == input.GalleryImage ||
                    (this.GalleryImage != null &&
                    this.GalleryImage.Equals(input.GalleryImage))
                ) && 
                (
                    this.IncludeAvailableInSpecific == input.IncludeAvailableInSpecific ||
                    (this.IncludeAvailableInSpecific != null &&
                    this.IncludeAvailableInSpecific.Equals(input.IncludeAvailableInSpecific))
                ) && 
                (
                    this.IncludeQuickSearchInSpecific == input.IncludeQuickSearchInSpecific ||
                    (this.IncludeQuickSearchInSpecific != null &&
                    this.IncludeQuickSearchInSpecific.Equals(input.IncludeQuickSearchInSpecific))
                ) && 
                (
                    this.QuickSearchId == input.QuickSearchId ||
                    (this.QuickSearchId != null &&
                    this.QuickSearchId.Equals(input.QuickSearchId))
                ) && 
                (
                    this.QuickSearchItems == input.QuickSearchItems ||
                    this.QuickSearchItems != null &&
                    this.QuickSearchItems.SequenceEqual(input.QuickSearchItems)
                ) && 
                (
                    this.QuickSearchWatermark == input.QuickSearchWatermark ||
                    (this.QuickSearchWatermark != null &&
                    this.QuickSearchWatermark.Equals(input.QuickSearchWatermark))
                ) && 
                (
                    this.ResolvedQuickSearchWatermark == input.ResolvedQuickSearchWatermark ||
                    (this.ResolvedQuickSearchWatermark != null &&
                    this.ResolvedQuickSearchWatermark.Equals(input.ResolvedQuickSearchWatermark))
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.ScopeOwner == input.ScopeOwner ||
                    (this.ScopeOwner != null &&
                    this.ScopeOwner.Equals(input.ScopeOwner))
                ) && 
                (
                    this.SpecificSearchItems == input.SpecificSearchItems ||
                    this.SpecificSearchItems != null &&
                    this.SpecificSearchItems.SequenceEqual(input.SpecificSearchItems)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllowQuickSearch != null)
                    hashCode = hashCode * 59 + this.AllowQuickSearch.GetHashCode();
                if (this.AllowSpecificSearch != null)
                    hashCode = hashCode * 59 + this.AllowSpecificSearch.GetHashCode();
                if (this.DefaultToQuickSearch != null)
                    hashCode = hashCode * 59 + this.DefaultToQuickSearch.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.GalleryImage != null)
                    hashCode = hashCode * 59 + this.GalleryImage.GetHashCode();
                if (this.IncludeAvailableInSpecific != null)
                    hashCode = hashCode * 59 + this.IncludeAvailableInSpecific.GetHashCode();
                if (this.IncludeQuickSearchInSpecific != null)
                    hashCode = hashCode * 59 + this.IncludeQuickSearchInSpecific.GetHashCode();
                if (this.QuickSearchId != null)
                    hashCode = hashCode * 59 + this.QuickSearchId.GetHashCode();
                if (this.QuickSearchItems != null)
                    hashCode = hashCode * 59 + this.QuickSearchItems.GetHashCode();
                if (this.QuickSearchWatermark != null)
                    hashCode = hashCode * 59 + this.QuickSearchWatermark.GetHashCode();
                if (this.ResolvedQuickSearchWatermark != null)
                    hashCode = hashCode * 59 + this.ResolvedQuickSearchWatermark.GetHashCode();
                if (this.Scope != null)
                    hashCode = hashCode * 59 + this.Scope.GetHashCode();
                if (this.ScopeOwner != null)
                    hashCode = hashCode * 59 + this.ScopeOwner.GetHashCode();
                if (this.SpecificSearchItems != null)
                    hashCode = hashCode * 59 + this.SpecificSearchItems.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
